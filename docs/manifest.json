{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v8.json", "dbt_version": "1.4.5", "generated_at": "2023-04-26T17:49:45.671168Z", "invocation_id": "bc5bb2ac-7d2a-473f-919f-1e45433197ce", "env": {}, "project_id": "26c4f7c0b4ab5284fdfebdf16aae6eac", "user_id": "81581f81-d5af-4143-8fbf-c2f0001e4f56", "send_anonymous_usage_stats": true, "adapter_type": "postgres"}, "nodes": {"seed.zuora_source_integration_tests.zuora_invoice_item_data": {"database": "postgres", "schema": "zuora_integration_tests", "name": "zuora_invoice_item_data", "resource_type": "seed", "package_name": "zuora_source_integration_tests", "path": "zuora_invoice_item_data.csv", "original_file_path": "seeds/zuora_invoice_item_data.csv", "unique_id": "seed.zuora_source_integration_tests.zuora_invoice_item_data", "fqn": ["zuora_source_integration_tests", "zuora_invoice_item_data"], "alias": "zuora_invoice_item_data", "checksum": {"name": "sha256", "checksum": "c935ff9c53bdc4bde9cec7a892f2735e706dba91bfd2a71a480541d499ab6a66"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "amount": "float", "amount_home_currency": "float", "balance": "float", "bill_cycle_day": "bigint", "cancelled_date": "timestamp", "cancelled_on": "timestamp", "created_date": "timestamp", "current_term": "bigint", "exchange_rate": "float", "mrr": "float", "quantity": "float", "renewal_term": "bigint", "submitted_on": "timestamp", "tax_amount": "float", "updated_date": "timestamp", "charge_amount": "float", "charge_amount_home_currency": "float", "charge_date": "timestamp", "unit_price": "float"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"charge_amount": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "charge_amount_home_currency": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "charge_date": "timestamp", "unit_price": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}"}}, "created_at": 1682531375.603395, "relation_name": "\"postgres\".\"zuora_integration_tests\".\"zuora_invoice_item_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/zuora/dbt_zuora_source/integration_tests", "depends_on": {"macros": []}}, "seed.zuora_source_integration_tests.zuora_contact_data": {"database": "postgres", "schema": "zuora_integration_tests", "name": "zuora_contact_data", "resource_type": "seed", "package_name": "zuora_source_integration_tests", "path": "zuora_contact_data.csv", "original_file_path": "seeds/zuora_contact_data.csv", "unique_id": "seed.zuora_source_integration_tests.zuora_contact_data", "fqn": ["zuora_source_integration_tests", "zuora_contact_data"], "alias": "zuora_contact_data", "checksum": {"name": "sha256", "checksum": "0320dd2d62c5a3c71fda26fdd4875b9f6a142e3919201c6ef8a38c281c818ec6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "amount": "float", "amount_home_currency": "float", "balance": "float", "bill_cycle_day": "bigint", "cancelled_date": "timestamp", "cancelled_on": "timestamp", "created_date": "timestamp", "current_term": "bigint", "exchange_rate": "float", "mrr": "float", "quantity": "float", "renewal_term": "bigint", "submitted_on": "timestamp", "tax_amount": "float", "updated_date": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"_fivetran_synced": "timestamp", "amount": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "amount_home_currency": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "balance": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "bill_cycle_day": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "cancelled_date": "timestamp", "cancelled_on": "timestamp", "created_date": "timestamp", "current_term": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "exchange_rate": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "mrr": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "quantity": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "renewal_term": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "submitted_on": "timestamp", "tax_amount": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "updated_date": "timestamp"}}, "created_at": 1682531375.609493, "relation_name": "\"postgres\".\"zuora_integration_tests\".\"zuora_contact_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/zuora/dbt_zuora_source/integration_tests", "depends_on": {"macros": []}}, "seed.zuora_source_integration_tests.zuora_rate_plan_charge_data": {"database": "postgres", "schema": "zuora_integration_tests", "name": "zuora_rate_plan_charge_data", "resource_type": "seed", "package_name": "zuora_source_integration_tests", "path": "zuora_rate_plan_charge_data.csv", "original_file_path": "seeds/zuora_rate_plan_charge_data.csv", "unique_id": "seed.zuora_source_integration_tests.zuora_rate_plan_charge_data", "fqn": ["zuora_source_integration_tests", "zuora_rate_plan_charge_data"], "alias": "zuora_rate_plan_charge_data", "checksum": {"name": "sha256", "checksum": "607879494964bb86c5fcf32fa1628e6cc38f8d017523f66abb26cd90706869f5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "amount": "float", "amount_home_currency": "float", "balance": "float", "bill_cycle_day": "bigint", "cancelled_date": "timestamp", "cancelled_on": "timestamp", "created_date": "timestamp", "current_term": "bigint", "exchange_rate": "float", "mrr": "float", "quantity": "float", "renewal_term": "bigint", "submitted_on": "timestamp", "tax_amount": "float", "updated_date": "timestamp", "booking_exchange_rate": "float", "dmrc": "float", "dmrchome_currency": "float", "dtcv": "float", "dtcvhome_currency": "float", "mrrhome_currency": "float", "price_increase_percentage": "float", "tcv": "float", "tcvhome_currency": "float"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"booking_exchange_rate": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "dmrc": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "dmrchome_currency": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "dtcv": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "dtcvhome_currency": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "mrrhome_currency": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "price_increase_percentage": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "tcv": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "tcvhome_currency": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}"}}, "created_at": 1682531375.61068, "relation_name": "\"postgres\".\"zuora_integration_tests\".\"zuora_rate_plan_charge_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/zuora/dbt_zuora_source/integration_tests", "depends_on": {"macros": []}}, "seed.zuora_source_integration_tests.zuora_product_rate_plan_data": {"database": "postgres", "schema": "zuora_integration_tests", "name": "zuora_product_rate_plan_data", "resource_type": "seed", "package_name": "zuora_source_integration_tests", "path": "zuora_product_rate_plan_data.csv", "original_file_path": "seeds/zuora_product_rate_plan_data.csv", "unique_id": "seed.zuora_source_integration_tests.zuora_product_rate_plan_data", "fqn": ["zuora_source_integration_tests", "zuora_product_rate_plan_data"], "alias": "zuora_product_rate_plan_data", "checksum": {"name": "sha256", "checksum": "89a83ffc65493fa037da29b1345ec48d5639a40d96eb98f92e713064eb3f3642"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "amount": "float", "amount_home_currency": "float", "balance": "float", "bill_cycle_day": "bigint", "cancelled_date": "timestamp", "cancelled_on": "timestamp", "created_date": "timestamp", "current_term": "bigint", "exchange_rate": "float", "mrr": "float", "quantity": "float", "renewal_term": "bigint", "submitted_on": "timestamp", "tax_amount": "float", "updated_date": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"_fivetran_synced": "timestamp", "amount": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "amount_home_currency": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "balance": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "bill_cycle_day": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "cancelled_date": "timestamp", "cancelled_on": "timestamp", "created_date": "timestamp", "current_term": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "exchange_rate": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "mrr": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "quantity": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "renewal_term": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "submitted_on": "timestamp", "tax_amount": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "updated_date": "timestamp"}}, "created_at": 1682531375.6118321, "relation_name": "\"postgres\".\"zuora_integration_tests\".\"zuora_product_rate_plan_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/zuora/dbt_zuora_source/integration_tests", "depends_on": {"macros": []}}, "seed.zuora_source_integration_tests.zuora_refund_data": {"database": "postgres", "schema": "zuora_integration_tests", "name": "zuora_refund_data", "resource_type": "seed", "package_name": "zuora_source_integration_tests", "path": "zuora_refund_data.csv", "original_file_path": "seeds/zuora_refund_data.csv", "unique_id": "seed.zuora_source_integration_tests.zuora_refund_data", "fqn": ["zuora_source_integration_tests", "zuora_refund_data"], "alias": "zuora_refund_data", "checksum": {"name": "sha256", "checksum": "278912cc3f152a5a16fe28979d7e96a6aa9a00fcf28a4b23e25613571b88d57e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "amount": "float", "amount_home_currency": "float", "balance": "float", "bill_cycle_day": "bigint", "cancelled_date": "timestamp", "cancelled_on": "timestamp", "created_date": "timestamp", "current_term": "bigint", "exchange_rate": "float", "mrr": "float", "quantity": "float", "renewal_term": "bigint", "submitted_on": "timestamp", "tax_amount": "float", "updated_date": "timestamp", "refund_transaction_time": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"refund_transaction_time": "timestamp"}}, "created_at": 1682531375.613226, "relation_name": "\"postgres\".\"zuora_integration_tests\".\"zuora_refund_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/zuora/dbt_zuora_source/integration_tests", "depends_on": {"macros": []}}, "seed.zuora_source_integration_tests.zuora_rate_plan_data": {"database": "postgres", "schema": "zuora_integration_tests", "name": "zuora_rate_plan_data", "resource_type": "seed", "package_name": "zuora_source_integration_tests", "path": "zuora_rate_plan_data.csv", "original_file_path": "seeds/zuora_rate_plan_data.csv", "unique_id": "seed.zuora_source_integration_tests.zuora_rate_plan_data", "fqn": ["zuora_source_integration_tests", "zuora_rate_plan_data"], "alias": "zuora_rate_plan_data", "checksum": {"name": "sha256", "checksum": "90b5d9c6a831e8635c6813489e765344f234a868887e31762188ab7dee6ef7d5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "amount": "float", "amount_home_currency": "float", "balance": "float", "bill_cycle_day": "bigint", "cancelled_date": "timestamp", "cancelled_on": "timestamp", "created_date": "timestamp", "current_term": "bigint", "exchange_rate": "float", "mrr": "float", "quantity": "float", "renewal_term": "bigint", "submitted_on": "timestamp", "tax_amount": "float", "updated_date": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"_fivetran_synced": "timestamp", "amount": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "amount_home_currency": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "balance": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "bill_cycle_day": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "cancelled_date": "timestamp", "cancelled_on": "timestamp", "created_date": "timestamp", "current_term": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "exchange_rate": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "mrr": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "quantity": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "renewal_term": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "submitted_on": "timestamp", "tax_amount": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "updated_date": "timestamp"}}, "created_at": 1682531375.614594, "relation_name": "\"postgres\".\"zuora_integration_tests\".\"zuora_rate_plan_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/zuora/dbt_zuora_source/integration_tests", "depends_on": {"macros": []}}, "seed.zuora_source_integration_tests.zuora_product_data": {"database": "postgres", "schema": "zuora_integration_tests", "name": "zuora_product_data", "resource_type": "seed", "package_name": "zuora_source_integration_tests", "path": "zuora_product_data.csv", "original_file_path": "seeds/zuora_product_data.csv", "unique_id": "seed.zuora_source_integration_tests.zuora_product_data", "fqn": ["zuora_source_integration_tests", "zuora_product_data"], "alias": "zuora_product_data", "checksum": {"name": "sha256", "checksum": "ac98d00bf2218e9aa4828106314ee963545057464b5ad5d71b240e232a3db715"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "amount": "float", "amount_home_currency": "float", "balance": "float", "bill_cycle_day": "bigint", "cancelled_date": "timestamp", "cancelled_on": "timestamp", "created_date": "timestamp", "current_term": "bigint", "exchange_rate": "float", "mrr": "float", "quantity": "float", "renewal_term": "bigint", "submitted_on": "timestamp", "tax_amount": "float", "updated_date": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"_fivetran_synced": "timestamp", "amount": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "amount_home_currency": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "balance": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "bill_cycle_day": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "cancelled_date": "timestamp", "cancelled_on": "timestamp", "created_date": "timestamp", "current_term": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "exchange_rate": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "mrr": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "quantity": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "renewal_term": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "submitted_on": "timestamp", "tax_amount": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "updated_date": "timestamp"}}, "created_at": 1682531375.615629, "relation_name": "\"postgres\".\"zuora_integration_tests\".\"zuora_product_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/zuora/dbt_zuora_source/integration_tests", "depends_on": {"macros": []}}, "seed.zuora_source_integration_tests.zuora_account_data": {"database": "postgres", "schema": "zuora_integration_tests", "name": "zuora_account_data", "resource_type": "seed", "package_name": "zuora_source_integration_tests", "path": "zuora_account_data.csv", "original_file_path": "seeds/zuora_account_data.csv", "unique_id": "seed.zuora_source_integration_tests.zuora_account_data", "fqn": ["zuora_source_integration_tests", "zuora_account_data"], "alias": "zuora_account_data", "checksum": {"name": "sha256", "checksum": "c3eaff314b2550d4e2498d6bd359a7283c004cd94cf38c57a80cd5895dff0a60"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "amount": "float", "amount_home_currency": "float", "balance": "float", "bill_cycle_day": "bigint", "cancelled_date": "timestamp", "cancelled_on": "timestamp", "created_date": "timestamp", "current_term": "bigint", "exchange_rate": "float", "mrr": "float", "quantity": "float", "renewal_term": "bigint", "submitted_on": "timestamp", "tax_amount": "float", "updated_date": "timestamp", "credit_balance": "float", "last_invoice_date": "timestamp", "tax_exempt_effective_date": "timestamp", "tax_exempt_expiration_date": "timestamp", "total_debit_memo_balance": "float", "total_invoice_balance": "float", "unapplied_balance": "float", "unapplied_credit_memo_amount": "float"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"credit_balance": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "last_invoice_date": "timestamp", "tax_exempt_effective_date": "timestamp", "tax_exempt_expiration_date": "timestamp", "total_debit_memo_balance": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "total_invoice_balance": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "unapplied_balance": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "unapplied_credit_memo_amount": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}"}}, "created_at": 1682531375.6166852, "relation_name": "\"postgres\".\"zuora_integration_tests\".\"zuora_account_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/zuora/dbt_zuora_source/integration_tests", "depends_on": {"macros": []}}, "seed.zuora_source_integration_tests.zuora_amendment_data": {"database": "postgres", "schema": "zuora_integration_tests", "name": "zuora_amendment_data", "resource_type": "seed", "package_name": "zuora_source_integration_tests", "path": "zuora_amendment_data.csv", "original_file_path": "seeds/zuora_amendment_data.csv", "unique_id": "seed.zuora_source_integration_tests.zuora_amendment_data", "fqn": ["zuora_source_integration_tests", "zuora_amendment_data"], "alias": "zuora_amendment_data", "checksum": {"name": "sha256", "checksum": "86f864bc9ab9d7bf1256e65ee101e37f8298a5242336bbfcaaf015230efac568"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "amount": "float", "amount_home_currency": "float", "balance": "float", "bill_cycle_day": "bigint", "cancelled_date": "timestamp", "cancelled_on": "timestamp", "created_date": "timestamp", "current_term": "bigint", "exchange_rate": "float", "mrr": "float", "quantity": "float", "renewal_term": "bigint", "submitted_on": "timestamp", "tax_amount": "float", "updated_date": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"_fivetran_synced": "timestamp", "amount": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "amount_home_currency": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "balance": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "bill_cycle_day": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "cancelled_date": "timestamp", "cancelled_on": "timestamp", "created_date": "timestamp", "current_term": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "exchange_rate": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "mrr": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "quantity": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "renewal_term": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "submitted_on": "timestamp", "tax_amount": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "updated_date": "timestamp"}}, "created_at": 1682531375.6178792, "relation_name": "\"postgres\".\"zuora_integration_tests\".\"zuora_amendment_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/zuora/dbt_zuora_source/integration_tests", "depends_on": {"macros": []}}, "seed.zuora_source_integration_tests.zuora_taxation_item_data": {"database": "postgres", "schema": "zuora_integration_tests", "name": "zuora_taxation_item_data", "resource_type": "seed", "package_name": "zuora_source_integration_tests", "path": "zuora_taxation_item_data.csv", "original_file_path": "seeds/zuora_taxation_item_data.csv", "unique_id": "seed.zuora_source_integration_tests.zuora_taxation_item_data", "fqn": ["zuora_source_integration_tests", "zuora_taxation_item_data"], "alias": "zuora_taxation_item_data", "checksum": {"name": "sha256", "checksum": "b56e7b08d8bf24ec3576c7a8b52d2a62890f02b5d6eded85ca3e1dcad9195abb"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "amount": "float", "amount_home_currency": "float", "balance": "float", "bill_cycle_day": "bigint", "cancelled_date": "timestamp", "cancelled_on": "timestamp", "created_date": "timestamp", "current_term": "bigint", "exchange_rate": "float", "mrr": "float", "quantity": "float", "renewal_term": "bigint", "submitted_on": "timestamp", "tax_amount": "float", "updated_date": "timestamp", "tax_date": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"tax_date": "timestamp"}}, "created_at": 1682531375.619232, "relation_name": "\"postgres\".\"zuora_integration_tests\".\"zuora_taxation_item_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/zuora/dbt_zuora_source/integration_tests", "depends_on": {"macros": []}}, "seed.zuora_source_integration_tests.zuora_payment_method_data": {"database": "postgres", "schema": "zuora_integration_tests", "name": "zuora_payment_method_data", "resource_type": "seed", "package_name": "zuora_source_integration_tests", "path": "zuora_payment_method_data.csv", "original_file_path": "seeds/zuora_payment_method_data.csv", "unique_id": "seed.zuora_source_integration_tests.zuora_payment_method_data", "fqn": ["zuora_source_integration_tests", "zuora_payment_method_data"], "alias": "zuora_payment_method_data", "checksum": {"name": "sha256", "checksum": "c810aec44e44e93a84d2f077a499c4c8bac18b6dc8a1894ede8bd1d4dadd5ce9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "amount": "float", "amount_home_currency": "float", "balance": "float", "bill_cycle_day": "bigint", "cancelled_date": "timestamp", "cancelled_on": "timestamp", "created_date": "timestamp", "current_term": "bigint", "exchange_rate": "float", "mrr": "float", "quantity": "float", "renewal_term": "bigint", "submitted_on": "timestamp", "tax_amount": "float", "updated_date": "timestamp", "last_failed_sale_transaction_date": "timestamp", "last_transaction_date_time": "timestamp", "max_consecutive_payment_failures": "bigint", "num_consecutive_failures": "bigint", "total_number_of_error_payments": "bigint", "total_number_of_processed_payments": "bigint"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"last_failed_sale_transaction_date": "timestamp", "last_transaction_date_time": "timestamp", "max_consecutive_payment_failures": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "num_consecutive_failures": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "total_number_of_error_payments": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "total_number_of_processed_payments": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}"}}, "created_at": 1682531375.6204858, "relation_name": "\"postgres\".\"zuora_integration_tests\".\"zuora_payment_method_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/zuora/dbt_zuora_source/integration_tests", "depends_on": {"macros": []}}, "seed.zuora_source_integration_tests.zuora_product_rate_plan_charge_data": {"database": "postgres", "schema": "zuora_integration_tests", "name": "zuora_product_rate_plan_charge_data", "resource_type": "seed", "package_name": "zuora_source_integration_tests", "path": "zuora_product_rate_plan_charge_data.csv", "original_file_path": "seeds/zuora_product_rate_plan_charge_data.csv", "unique_id": "seed.zuora_source_integration_tests.zuora_product_rate_plan_charge_data", "fqn": ["zuora_source_integration_tests", "zuora_product_rate_plan_charge_data"], "alias": "zuora_product_rate_plan_charge_data", "checksum": {"name": "sha256", "checksum": "d6f98f3e7db7ecfac3b405e48877d149e1216326c2c094746c093e8ce7114931"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "amount": "float", "amount_home_currency": "float", "balance": "float", "bill_cycle_day": "bigint", "cancelled_date": "timestamp", "cancelled_on": "timestamp", "created_date": "timestamp", "current_term": "bigint", "exchange_rate": "float", "mrr": "float", "quantity": "float", "renewal_term": "bigint", "submitted_on": "timestamp", "tax_amount": "float", "updated_date": "timestamp", "default_quantity": "float", "included_units": "float", "max_quantity": "float", "min_quantity": "float", "specific_billing_period": "bigint", "up_to_periods": "bigint"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"default_quantity": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "included_units": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "max_quantity": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "min_quantity": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "specific_billing_period": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "up_to_periods": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}"}}, "created_at": 1682531375.621896, "relation_name": "\"postgres\".\"zuora_integration_tests\".\"zuora_product_rate_plan_charge_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/zuora/dbt_zuora_source/integration_tests", "depends_on": {"macros": []}}, "seed.zuora_source_integration_tests.zuora_refund_invoice_payment_data": {"database": "postgres", "schema": "zuora_integration_tests", "name": "zuora_refund_invoice_payment_data", "resource_type": "seed", "package_name": "zuora_source_integration_tests", "path": "zuora_refund_invoice_payment_data.csv", "original_file_path": "seeds/zuora_refund_invoice_payment_data.csv", "unique_id": "seed.zuora_source_integration_tests.zuora_refund_invoice_payment_data", "fqn": ["zuora_source_integration_tests", "zuora_refund_invoice_payment_data"], "alias": "zuora_refund_invoice_payment_data", "checksum": {"name": "sha256", "checksum": "de41680d5906d8aaec6905923bc04f7f2ae2315a78b46b2bc948d708fdb15fb1"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "amount": "float", "amount_home_currency": "float", "balance": "float", "bill_cycle_day": "bigint", "cancelled_date": "timestamp", "cancelled_on": "timestamp", "created_date": "timestamp", "current_term": "bigint", "exchange_rate": "float", "mrr": "float", "quantity": "float", "renewal_term": "bigint", "submitted_on": "timestamp", "tax_amount": "float", "updated_date": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"_fivetran_synced": "timestamp", "amount": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "amount_home_currency": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "balance": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "bill_cycle_day": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "cancelled_date": "timestamp", "cancelled_on": "timestamp", "created_date": "timestamp", "current_term": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "exchange_rate": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "mrr": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "quantity": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "renewal_term": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "submitted_on": "timestamp", "tax_amount": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "updated_date": "timestamp"}}, "created_at": 1682531375.6235032, "relation_name": "\"postgres\".\"zuora_integration_tests\".\"zuora_refund_invoice_payment_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/zuora/dbt_zuora_source/integration_tests", "depends_on": {"macros": []}}, "seed.zuora_source_integration_tests.zuora_invoice_payment_data": {"database": "postgres", "schema": "zuora_integration_tests", "name": "zuora_invoice_payment_data", "resource_type": "seed", "package_name": "zuora_source_integration_tests", "path": "zuora_invoice_payment_data.csv", "original_file_path": "seeds/zuora_invoice_payment_data.csv", "unique_id": "seed.zuora_source_integration_tests.zuora_invoice_payment_data", "fqn": ["zuora_source_integration_tests", "zuora_invoice_payment_data"], "alias": "zuora_invoice_payment_data", "checksum": {"name": "sha256", "checksum": "72f4f6f27f68f8cd402fc7900b9f5bf3adff1f9c74496c09d70fd2e78938641b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "amount": "float", "amount_home_currency": "float", "balance": "float", "bill_cycle_day": "bigint", "cancelled_date": "timestamp", "cancelled_on": "timestamp", "created_date": "timestamp", "current_term": "bigint", "exchange_rate": "float", "mrr": "float", "quantity": "float", "renewal_term": "bigint", "submitted_on": "timestamp", "tax_amount": "float", "updated_date": "timestamp", "amount_currency_rounding": "float"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"amount_currency_rounding": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}"}}, "created_at": 1682531375.6245492, "relation_name": "\"postgres\".\"zuora_integration_tests\".\"zuora_invoice_payment_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/zuora/dbt_zuora_source/integration_tests", "depends_on": {"macros": []}}, "seed.zuora_source_integration_tests.zuora_subscription_data": {"database": "postgres", "schema": "zuora_integration_tests", "name": "zuora_subscription_data", "resource_type": "seed", "package_name": "zuora_source_integration_tests", "path": "zuora_subscription_data.csv", "original_file_path": "seeds/zuora_subscription_data.csv", "unique_id": "seed.zuora_source_integration_tests.zuora_subscription_data", "fqn": ["zuora_source_integration_tests", "zuora_subscription_data"], "alias": "zuora_subscription_data", "checksum": {"name": "sha256", "checksum": "612fe9ef9b63f5c6c1f4e071eb53e032b20877d80c00b5237596dd11920562ef"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "amount": "float", "amount_home_currency": "float", "balance": "float", "bill_cycle_day": "bigint", "cancelled_date": "timestamp", "cancelled_on": "timestamp", "created_date": "timestamp", "current_term": "bigint", "exchange_rate": "float", "mrr": "float", "quantity": "float", "renewal_term": "bigint", "submitted_on": "timestamp", "tax_amount": "float", "updated_date": "timestamp", "contract_acceptance_date": "timestamp", "contract_effective_date": "timestamp", "initial_term": "bigint", "original_created_date": "timestamp", "service_activation_date": "timestamp", "subscription_end_date": "timestamp", "subscription_start_date": "timestamp", "term_end_date": "timestamp", "term_start_date": "timestamp", "version": "bigint"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"contract_acceptance_date": "timestamp", "contract_effective_date": "timestamp", "created_date": "timestamp", "initial_term": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "original_created_date": "timestamp", "service_activation_date": "timestamp", "subscription_end_date": "timestamp", "subscription_start_date": "timestamp", "term_end_date": "timestamp", "term_start_date": "timestamp", "version": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}"}}, "created_at": 1682531375.625629, "relation_name": "\"postgres\".\"zuora_integration_tests\".\"zuora_subscription_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/zuora/dbt_zuora_source/integration_tests", "depends_on": {"macros": []}}, "seed.zuora_source_integration_tests.zuora_order_data": {"database": "postgres", "schema": "zuora_integration_tests", "name": "zuora_order_data", "resource_type": "seed", "package_name": "zuora_source_integration_tests", "path": "zuora_order_data.csv", "original_file_path": "seeds/zuora_order_data.csv", "unique_id": "seed.zuora_source_integration_tests.zuora_order_data", "fqn": ["zuora_source_integration_tests", "zuora_order_data"], "alias": "zuora_order_data", "checksum": {"name": "sha256", "checksum": "c7c01280156b988c3ff826c166d24e1cd934e2bf46bb24e30bc6ce43d6d9c572"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "amount": "float", "amount_home_currency": "float", "balance": "float", "bill_cycle_day": "bigint", "cancelled_date": "timestamp", "cancelled_on": "timestamp", "created_date": "timestamp", "current_term": "bigint", "exchange_rate": "float", "mrr": "float", "quantity": "float", "renewal_term": "bigint", "submitted_on": "timestamp", "tax_amount": "float", "updated_date": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"_fivetran_synced": "timestamp", "amount": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "amount_home_currency": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "balance": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "bill_cycle_day": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "cancelled_date": "timestamp", "cancelled_on": "timestamp", "created_date": "timestamp", "current_term": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "exchange_rate": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "mrr": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "quantity": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "renewal_term": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "submitted_on": "timestamp", "tax_amount": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "updated_date": "timestamp"}}, "created_at": 1682531375.6267111, "relation_name": "\"postgres\".\"zuora_integration_tests\".\"zuora_order_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/zuora/dbt_zuora_source/integration_tests", "depends_on": {"macros": []}}, "seed.zuora_source_integration_tests.zuora_payment_data": {"database": "postgres", "schema": "zuora_integration_tests", "name": "zuora_payment_data", "resource_type": "seed", "package_name": "zuora_source_integration_tests", "path": "zuora_payment_data.csv", "original_file_path": "seeds/zuora_payment_data.csv", "unique_id": "seed.zuora_source_integration_tests.zuora_payment_data", "fqn": ["zuora_source_integration_tests", "zuora_payment_data"], "alias": "zuora_payment_data", "checksum": {"name": "sha256", "checksum": "6667fe3f60a4e2033a06220eb2d46ebefb9d0513e7a5493d3e50bc523fb87683"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "amount": "float", "amount_home_currency": "float", "balance": "float", "bill_cycle_day": "bigint", "cancelled_date": "timestamp", "cancelled_on": "timestamp", "created_date": "timestamp", "current_term": "bigint", "exchange_rate": "float", "mrr": "float", "quantity": "float", "renewal_term": "bigint", "submitted_on": "timestamp", "tax_amount": "float", "updated_date": "timestamp", "applied_amount": "float", "applied_credit_balance_amount": "float", "settled_on": "timestamp", "unapplied_amount": "float"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"applied_amount": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "applied_credit_balance_amount": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "settled_on": "timestamp", "unapplied_amount": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}"}}, "created_at": 1682531375.627882, "relation_name": "\"postgres\".\"zuora_integration_tests\".\"zuora_payment_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/zuora/dbt_zuora_source/integration_tests", "depends_on": {"macros": []}}, "seed.zuora_source_integration_tests.zuora_invoice_data": {"database": "postgres", "schema": "zuora_integration_tests", "name": "zuora_invoice_data", "resource_type": "seed", "package_name": "zuora_source_integration_tests", "path": "zuora_invoice_data.csv", "original_file_path": "seeds/zuora_invoice_data.csv", "unique_id": "seed.zuora_source_integration_tests.zuora_invoice_data", "fqn": ["zuora_source_integration_tests", "zuora_invoice_data"], "alias": "zuora_invoice_data", "checksum": {"name": "sha256", "checksum": "8f6b1f8c51db0bd2fd1fb7a465de4ad0d2751b2f404d622474c5a3aa3f85ca04"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "amount": "float", "amount_home_currency": "float", "balance": "float", "bill_cycle_day": "bigint", "cancelled_date": "timestamp", "cancelled_on": "timestamp", "created_date": "timestamp", "current_term": "bigint", "exchange_rate": "float", "mrr": "float", "quantity": "float", "renewal_term": "bigint", "submitted_on": "timestamp", "tax_amount": "float", "updated_date": "timestamp", "adjustment_amount": "float", "amount_without_tax": "float", "amount_without_tax_home_currency": "float", "credit_balance_adjustment_amount": "float", "credit_memo_amount": "float", "last_email_sent_date": "timestamp", "payment_amount": "float", "posted_date": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"adjustment_amount": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "amount_without_tax": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "amount_without_tax_home_currency": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "credit_balance_adjustment_amount": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "credit_memo_amount": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "last_email_sent_date": "timestamp", "payment_amount": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "posted_date": "timestamp"}}, "created_at": 1682531375.62918, "relation_name": "\"postgres\".\"zuora_integration_tests\".\"zuora_invoice_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/zuora/dbt_zuora_source/integration_tests", "depends_on": {"macros": []}}, "seed.zuora_source_integration_tests.zuora_credit_balance_adjustment_data": {"database": "postgres", "schema": "zuora_integration_tests", "name": "zuora_credit_balance_adjustment_data", "resource_type": "seed", "package_name": "zuora_source_integration_tests", "path": "zuora_credit_balance_adjustment_data.csv", "original_file_path": "seeds/zuora_credit_balance_adjustment_data.csv", "unique_id": "seed.zuora_source_integration_tests.zuora_credit_balance_adjustment_data", "fqn": ["zuora_source_integration_tests", "zuora_credit_balance_adjustment_data"], "alias": "zuora_credit_balance_adjustment_data", "checksum": {"name": "sha256", "checksum": "a1c273841651f31b9b2e509039b0dd46a8413ebfdede8613978210588e543110"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"_fivetran_synced": "timestamp", "amount": "float", "amount_home_currency": "float", "balance": "float", "bill_cycle_day": "bigint", "cancelled_date": "timestamp", "cancelled_on": "timestamp", "created_date": "timestamp", "current_term": "bigint", "exchange_rate": "float", "mrr": "float", "quantity": "float", "renewal_term": "bigint", "submitted_on": "timestamp", "tax_amount": "float", "updated_date": "timestamp"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"column_types": {"_fivetran_synced": "timestamp", "amount": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "amount_home_currency": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "balance": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "bill_cycle_day": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "cancelled_date": "timestamp", "cancelled_on": "timestamp", "created_date": "timestamp", "current_term": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "exchange_rate": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "mrr": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "quantity": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "renewal_term": "{{ 'INT64' if target.type == 'bigquery' else 'bigint' }}", "submitted_on": "timestamp", "tax_amount": "{{ 'FLOAT64' if target.type == 'bigquery' else 'float' }}", "updated_date": "timestamp"}}, "created_at": 1682531375.630412, "relation_name": "\"postgres\".\"zuora_integration_tests\".\"zuora_credit_balance_adjustment_data\"", "raw_code": "", "root_path": "/Users/avinash.kunnath/Documents/dbt_packages/zuora/dbt_zuora_source/integration_tests", "depends_on": {"macros": []}}, "model.zuora_source.stg_zuora__product": {"database": "postgres", "schema": "zuora_integration_tests", "name": "stg_zuora__product", "resource_type": "model", "package_name": "zuora_source", "path": "stg_zuora__product.sql", "original_file_path": "models/stg_zuora__product.sql", "unique_id": "model.zuora_source.stg_zuora__product", "fqn": ["zuora_source", "stg_zuora__product"], "alias": "stg_zuora__product", "checksum": {"name": "sha256", "checksum": "099a3f2d29ca2320ec691f5362f110b6484d800ac97eb725037b368c21938e41"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "A product is an item or service that your company sells. In the subscription economy, a product is generally a service that your customers subscribe to rather than a physical item that they purchase one time.", "columns": {"product_id": {"name": "product_id", "description": "The unique identifier for the product.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "category": {"name": "category", "description": "The category of the product.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_by_id": {"name": "created_by_id", "description": "The id of the user who created the product.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_date": {"name": "created_date", "description": "The date and time when the product was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "A description of the product.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "effective_end_date": {"name": "effective_end_date", "description": "The date when the product is no longer available for purchase.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "effective_start_date": {"name": "effective_start_date", "description": "The date when the product becomes available for purchase.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the product.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sku": {"name": "sku", "description": "The SKU (stock keeping unit) of the product.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_by_id": {"name": "updated_by_id", "description": "The id of the user who last updated the product.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_date": {"name": "updated_date", "description": "The date and time when the product was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Is this the most recent record of the payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "zuora_source://models/stg_zuora.yml", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1682531376.0903869, "relation_name": "\"postgres\".\"zuora_integration_tests\".\"stg_zuora__product\"", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_zuora__product_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_zuora__product_tmp')),\n                staging_columns=get_product_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        id as product_id,\n        category,\n        created_by_id,\n        created_date,\n        description,\n        effective_end_date,\n        effective_start_date,\n        name,\n        sku,\n        updated_by_id,\n        updated_date,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [["stg_zuora__product_tmp"], ["stg_zuora__product_tmp"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.zuora_source.get_product_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.zuora_source.stg_zuora__product_tmp", "model.zuora_source.stg_zuora__product_tmp"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora__product.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"zuora_integration_tests\".\"stg_zuora__product_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    category\n    \n as \n    \n    category\n    \n, \n    \n    \n    created_by_id\n    \n as \n    \n    created_by_id\n    \n, \n    \n    \n    created_date\n    \n as \n    \n    created_date\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    effective_end_date\n    \n as \n    \n    effective_end_date\n    \n, \n    \n    \n    effective_start_date\n    \n as \n    \n    effective_start_date\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    sku\n    \n as \n    \n    sku\n    \n, \n    \n    \n    updated_by_id\n    \n as \n    \n    updated_by_id\n    \n, \n    \n    \n    updated_date\n    \n as \n    \n    updated_date\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as product_id,\n        category,\n        created_by_id,\n        created_date,\n        description,\n        effective_end_date,\n        effective_start_date,\n        name,\n        sku,\n        updated_by_id,\n        updated_date,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": []}, "model.zuora_source.stg_zuora__product_rate_plan_charge": {"database": "postgres", "schema": "zuora_integration_tests", "name": "stg_zuora__product_rate_plan_charge", "resource_type": "model", "package_name": "zuora_source", "path": "stg_zuora__product_rate_plan_charge.sql", "original_file_path": "models/stg_zuora__product_rate_plan_charge.sql", "unique_id": "model.zuora_source.stg_zuora__product_rate_plan_charge", "fqn": ["zuora_source", "stg_zuora__product_rate_plan_charge"], "alias": "stg_zuora__product_rate_plan_charge", "checksum": {"name": "sha256", "checksum": "6155a040c14b835bff5c7ca8e4a753fc54ffcff8ee08bc926a0b5e29b5968f64"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "A product rate plan charge represents a charge model or a set of fees associated with a product rate plan, which is the part of a product that your customers subscribe to. Each product rate plan can have multiple product rate plan charges.", "columns": {"product_rate_plan_charge_id": {"name": "product_rate_plan_charge_id", "description": "Unique identifier of the product rate plan charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_receivable_accounting_code_id": {"name": "account_receivable_accounting_code_id", "description": "The id of the accounting code for the accounts receivable account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accounting_code": {"name": "accounting_code", "description": "The accounting code for the charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "apply_discount_to": {"name": "apply_discount_to", "description": "The type of charge to which discounts apply.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bill_cycle_day": {"name": "bill_cycle_day", "description": "The day of the bill cycle on which the charge should be billed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bill_cycle_type": {"name": "bill_cycle_type", "description": "The type of bill cycle for the charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_period": {"name": "billing_period", "description": "The billing period for the charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "charge_model": {"name": "charge_model", "description": "The charge model for the charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "charge_type": {"name": "charge_type", "description": "The type of charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_by_id": {"name": "created_by_id", "description": "The id of the user who created the charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_date": {"name": "created_date", "description": "The date on which the charge was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "default_quantity": {"name": "default_quantity", "description": "The default quantity for the charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deferred_revenue_accounting_code_id": {"name": "deferred_revenue_accounting_code_id", "description": "The id of the accounting code for deferred revenue.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "A description of the charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "discount_class_id": {"name": "discount_class_id", "description": "The id of the discount class for the charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "discount_level": {"name": "discount_level", "description": "The level at which the discount is applied.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "end_date_condition": {"name": "end_date_condition", "description": "The condition that determines when the charge ends.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "exclude_item_billing_from_revenue_accounting": {"name": "exclude_item_billing_from_revenue_accounting", "description": "Indicates whether the charge should be excluded from revenue accounting.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "exclude_item_booking_from_revenue_accounting": {"name": "exclude_item_booking_from_revenue_accounting", "description": "Indicates whether the charge should be excluded from booking revenue accounting.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "included_units": {"name": "included_units", "description": "The number of units included in the charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_stacked_discount": {"name": "is_stacked_discount", "description": "Indicates whether the discount is a stacked discount. Values are true or false.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "list_price_base": {"name": "list_price_base", "description": "The price used to calculate the charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "max_quantity": {"name": "max_quantity", "description": "The maximum number of units allowed for this charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "min_quantity": {"name": "min_quantity", "description": "The minimum number of units required for this charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the product rate plan charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "product_id": {"name": "product_id", "description": "The unique identifier of the product associated with the product rate plan charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "product_rate_plan_id": {"name": "product_rate_plan_id", "description": "The unique identifier of the product rate plan associated with the product rate plan charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "specific_billing_period": {"name": "specific_billing_period", "description": "The billing period for this product rate plan charge. Values are DAY, WEEK, MONTH, and YEAR.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tax_mode": {"name": "tax_mode", "description": "Indicates how the charge is taxed. Values are TAXABLE, NON-TAXABLE, and TAXED_INCLUSIVE.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "taxable": {"name": "taxable", "description": "Indicates whether the charge is taxable. Values are true or false.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "trigger_event": {"name": "trigger_event", "description": "The event that triggers the charge. Values are SERVICE_ACTIVATION, CONTRACT_EFFECTIVE, CUSTOMER_ACCEPTANCE, or SERVICE_USAGE.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "uom": {"name": "uom", "description": "The unit of measure for the charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "up_to_periods": {"name": "up_to_periods", "description": "The maximum number of billing periods allowed for this charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "up_to_periods_type": {"name": "up_to_periods_type", "description": "The billing period type for the up to periods setting. Values are DAY, WEEK, MONTH, and YEAR.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_by_id": {"name": "updated_by_id", "description": "The unique identifier of the user who last updated the product rate plan charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_date": {"name": "updated_date", "description": "The date and time when the product rate plan charge was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "use_discount_specific_accounting_code": {"name": "use_discount_specific_accounting_code", "description": "Indicates whether the discount uses a specific accounting code. Values are true or false.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "weekly_bill_cycle_day": {"name": "weekly_bill_cycle_day", "description": "The day of the week when the bill cycle starts for a weekly billing period. Values are MON, TUE, WED, THU, FRI, SAT, and SUN.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Is this the most recent record of the product rate plan charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "zuora_source://models/stg_zuora.yml", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1682531376.098248, "relation_name": "\"postgres\".\"zuora_integration_tests\".\"stg_zuora__product_rate_plan_charge\"", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_zuora__product_rate_plan_charge_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_zuora__product_rate_plan_charge_tmp')),\n                staging_columns=get_product_rate_plan_charge_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        id as product_rate_plan_charge_id,\n        account_receivable_accounting_code_id,\n        accounting_code,\n        apply_discount_to,\n        bill_cycle_day,\n        bill_cycle_type,\n        billing_period,  \n        charge_model,\n        charge_type,\n        created_by_id,\n        created_date,\n        default_quantity,\n        deferred_revenue_accounting_code_id,\n        description,\n        discount_class_id,\n        discount_level,\n        end_date_condition,\n        exclude_item_billing_from_revenue_accounting,\n        exclude_item_booking_from_revenue_accounting,\n        included_units,\n        is_stacked_discount, \n        list_price_base,\n        max_quantity,\n        min_quantity,\n        name,\n        product_id,\n        product_rate_plan_id, \n        specific_billing_period,\n        tax_mode,\n        taxable,\n        trigger_event,\n        uom,\n        up_to_periods,\n        up_to_periods_type,\n        updated_by_id,\n        updated_date, \n        use_discount_specific_accounting_code,\n        weekly_bill_cycle_day,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [["stg_zuora__product_rate_plan_charge_tmp"], ["stg_zuora__product_rate_plan_charge_tmp"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.zuora_source.get_product_rate_plan_charge_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.zuora_source.stg_zuora__product_rate_plan_charge_tmp", "model.zuora_source.stg_zuora__product_rate_plan_charge_tmp"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora__product_rate_plan_charge.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"zuora_integration_tests\".\"stg_zuora__product_rate_plan_charge_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_receivable_accounting_code_id\n    \n as \n    \n    account_receivable_accounting_code_id\n    \n, \n    \n    \n    accounting_code\n    \n as \n    \n    accounting_code\n    \n, \n    \n    \n    apply_discount_to\n    \n as \n    \n    apply_discount_to\n    \n, \n    \n    \n    bill_cycle_day\n    \n as \n    \n    bill_cycle_day\n    \n, \n    \n    \n    bill_cycle_type\n    \n as \n    \n    bill_cycle_type\n    \n, \n    \n    \n    billing_period\n    \n as \n    \n    billing_period\n    \n, \n    \n    \n    charge_model\n    \n as \n    \n    charge_model\n    \n, \n    \n    \n    charge_type\n    \n as \n    \n    charge_type\n    \n, \n    \n    \n    created_by_id\n    \n as \n    \n    created_by_id\n    \n, \n    \n    \n    created_date\n    \n as \n    \n    created_date\n    \n, \n    \n    \n    default_quantity\n    \n as \n    \n    default_quantity\n    \n, \n    \n    \n    deferred_revenue_accounting_code_id\n    \n as \n    \n    deferred_revenue_accounting_code_id\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    discount_class_id\n    \n as \n    \n    discount_class_id\n    \n, \n    \n    \n    discount_level\n    \n as \n    \n    discount_level\n    \n, \n    \n    \n    end_date_condition\n    \n as \n    \n    end_date_condition\n    \n, \n    \n    \n    exclude_item_billing_from_revenue_accounting\n    \n as \n    \n    exclude_item_billing_from_revenue_accounting\n    \n, \n    \n    \n    exclude_item_booking_from_revenue_accounting\n    \n as \n    \n    exclude_item_booking_from_revenue_accounting\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    included_units\n    \n as \n    \n    included_units\n    \n, \n    \n    \n    is_stacked_discount\n    \n as \n    \n    is_stacked_discount\n    \n, \n    \n    \n    list_price_base\n    \n as \n    \n    list_price_base\n    \n, \n    \n    \n    max_quantity\n    \n as \n    \n    max_quantity\n    \n, \n    \n    \n    min_quantity\n    \n as \n    \n    min_quantity\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    product_id\n    \n as \n    \n    product_id\n    \n, \n    \n    \n    product_rate_plan_id\n    \n as \n    \n    product_rate_plan_id\n    \n, \n    \n    \n    recognized_revenue_accounting_code_id\n    \n as \n    \n    recognized_revenue_accounting_code_id\n    \n, \n    \n    \n    specific_billing_period\n    \n as \n    \n    specific_billing_period\n    \n, \n    \n    \n    tax_mode\n    \n as \n    \n    tax_mode\n    \n, \n    \n    \n    taxable\n    \n as \n    \n    taxable\n    \n, \n    \n    \n    trigger_event\n    \n as \n    \n    trigger_event\n    \n, \n    \n    \n    uom\n    \n as \n    \n    uom\n    \n, \n    \n    \n    up_to_periods\n    \n as \n    \n    up_to_periods\n    \n, \n    \n    \n    up_to_periods_type\n    \n as \n    \n    up_to_periods_type\n    \n, \n    \n    \n    updated_by_id\n    \n as \n    \n    updated_by_id\n    \n, \n    \n    \n    updated_date\n    \n as \n    \n    updated_date\n    \n, \n    \n    \n    use_discount_specific_accounting_code\n    \n as \n    \n    use_discount_specific_accounting_code\n    \n, \n    \n    \n    weekly_bill_cycle_day\n    \n as \n    \n    weekly_bill_cycle_day\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as product_rate_plan_charge_id,\n        account_receivable_accounting_code_id,\n        accounting_code,\n        apply_discount_to,\n        bill_cycle_day,\n        bill_cycle_type,\n        billing_period,  \n        charge_model,\n        charge_type,\n        created_by_id,\n        created_date,\n        default_quantity,\n        deferred_revenue_accounting_code_id,\n        description,\n        discount_class_id,\n        discount_level,\n        end_date_condition,\n        exclude_item_billing_from_revenue_accounting,\n        exclude_item_booking_from_revenue_accounting,\n        included_units,\n        is_stacked_discount, \n        list_price_base,\n        max_quantity,\n        min_quantity,\n        name,\n        product_id,\n        product_rate_plan_id, \n        specific_billing_period,\n        tax_mode,\n        taxable,\n        trigger_event,\n        uom,\n        up_to_periods,\n        up_to_periods_type,\n        updated_by_id,\n        updated_date, \n        use_discount_specific_accounting_code,\n        weekly_bill_cycle_day,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": []}, "model.zuora_source.stg_zuora__invoice_item": {"database": "postgres", "schema": "zuora_integration_tests", "name": "stg_zuora__invoice_item", "resource_type": "model", "package_name": "zuora_source", "path": "stg_zuora__invoice_item.sql", "original_file_path": "models/stg_zuora__invoice_item.sql", "unique_id": "model.zuora_source.stg_zuora__invoice_item", "fqn": ["zuora_source", "stg_zuora__invoice_item"], "alias": "stg_zuora__invoice_item", "checksum": {"name": "sha256", "checksum": "363f21548a94a25bfd31c5b8982f001215d869b512cb71aff79e5b55f72e52c6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "An invoice item is an individual line item in an invoice. Invoice items are charges, such as a monthly recurring charge.", "columns": {"invoice_item_id": {"name": "invoice_item_id", "description": "The unique identifier of the invoice item table.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "id of the account associated with this invoice item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_receivable_accounting_code_id": {"name": "account_receivable_accounting_code_id", "description": "id of the accounting code for the account receivable account for this invoice item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accounting_code": {"name": "accounting_code", "description": "Accounting code for the invoice item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amendment_id": {"name": "amendment_id", "description": "id of the amendment associated with this invoice item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "applied_to_invoice_item_id": {"name": "applied_to_invoice_item_id", "description": "id of the invoice item that this invoice item is applied to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "balance": {"name": "balance", "description": "Balance of the invoice item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bill_to_contact_id": {"name": "bill_to_contact_id", "description": "id of the contact to whom the invoice item is billed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "charge_amount": {"name": "charge_amount", "description": "Amount charged for the invoice item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "charge_amount_home_currency": {"name": "charge_amount_home_currency", "description": "Amount charged for the invoice item in the home currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "charge_date": {"name": "charge_date", "description": "Date on which the charge for the invoice item was made.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "charge_name": {"name": "charge_name", "description": "Name of the charge associated with this invoice item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_by_id": {"name": "created_by_id", "description": "id of the user who created this invoice item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_date": {"name": "created_date", "description": "Date on which the invoice item was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deferred_revenue_accounting_code_id": {"name": "deferred_revenue_accounting_code_id", "description": "id of the accounting code for the deferred revenue account for this invoice item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "exchange_rate": {"name": "exchange_rate", "description": "Exchange rate for the invoice item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "exchange_rate_date": {"name": "exchange_rate_date", "description": "Date of the exchange rate for the invoice item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_currency": {"name": "home_currency", "description": "Currency used for the invoice item in the home currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invoice_id": {"name": "invoice_id", "description": "id of the invoice associated with this invoice item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "journal_entry_id": {"name": "journal_entry_id", "description": "id of the journal entry associated with this invoice item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_account_id": {"name": "parent_account_id", "description": "id of the parent account associated with this invoice item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "processing_type": {"name": "processing_type", "description": "Type of processing for the invoice item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "product_id": {"name": "product_id", "description": "id of the product associated with this invoice item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "product_rate_plan_charge_id": {"name": "product_rate_plan_charge_id", "description": "id of the product rate plan charge associated with this invoice item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "product_rate_plan_id": {"name": "product_rate_plan_id", "description": "id of the product rate plan associated with this invoice item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "quantity": {"name": "quantity", "description": "Quantity associated with the invoice item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rate_plan_charge_id": {"name": "rate_plan_charge_id", "description": "id of the rate plan charge associated with this invoice item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rate_plan_id": {"name": "rate_plan_id", "description": "id of the rate plan associated with this invoice item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "recognized_revenue_accounting_code_id": {"name": "recognized_revenue_accounting_code_id", "description": "id of the accounting code for the recognized revenue account for this invoice item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rev_rec_start_date": {"name": "rev_rec_start_date", "description": "Date on which revenue recognition starts for the invoice item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "service_end_date": {"name": "service_end_date", "description": "End date of the service associated with the invoice item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "service_start_date": {"name": "service_start_date", "description": "Start date of the service associated with the invoice item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sku": {"name": "sku", "description": "SKU of the invoice item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sold_to_contact_id": {"name": "sold_to_contact_id", "description": "The id of the contact to whom the product or service was sold.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_item_type": {"name": "source_item_type", "description": "The type of the source item that created the invoice item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subscription_id": {"name": "subscription_id", "description": "The id of the subscription associated with the invoice item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tax_amount": {"name": "tax_amount", "description": "The tax amount for the invoice item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tax_mode": {"name": "tax_mode", "description": "The tax mode for the invoice item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_currency": {"name": "transaction_currency", "description": "The transaction currency for the invoice item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "unit_price": {"name": "unit_price", "description": "The unit price for the invoice item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "uom": {"name": "uom", "description": "The unit of measure for the invoice item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_by_id": {"name": "updated_by_id", "description": "The id of the user who last updated the invoice item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_date": {"name": "updated_date", "description": "The date and time when the invoice item was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Is this the most recent record of the invoice item.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "zuora_source://models/stg_zuora.yml", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1682531376.071529, "relation_name": "\"postgres\".\"zuora_integration_tests\".\"stg_zuora__invoice_item\"", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_zuora__invoice_item_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_zuora__invoice_item_tmp')),\n                staging_columns=get_invoice_item_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        id as invoice_item_id,\n        account_id,\n        account_receivable_accounting_code_id,\n        accounting_code, \n        amendment_id,\n        applied_to_invoice_item_id,\n        balance,\n        bill_to_contact_id, \n        charge_amount, \n        charge_amount_home_currency,\n        charge_date,\n        charge_name,\n        created_by_id,\n        created_date,\n        deferred_revenue_accounting_code_id,\n        exchange_rate,\n        exchange_rate_date,\n        home_currency,\n        invoice_id,\n        journal_entry_id,\n        parent_account_id,\n        processing_type,\n        product_id,\n        product_rate_plan_charge_id,\n        product_rate_plan_id,\n        quantity,\n        rate_plan_charge_id,\n        rate_plan_id,\n        recognized_revenue_accounting_code_id,\n        rev_rec_start_date,\n        service_end_date,\n        service_start_date,\n        sku,\n        sold_to_contact_id,\n        source_item_type,\n        subscription_id,\n        tax_amount,\n        tax_mode,\n        transaction_currency,\n        unit_price,\n        uom,\n        updated_by_id,\n        updated_date,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [["stg_zuora__invoice_item_tmp"], ["stg_zuora__invoice_item_tmp"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.zuora_source.get_invoice_item_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.zuora_source.stg_zuora__invoice_item_tmp", "model.zuora_source.stg_zuora__invoice_item_tmp"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora__invoice_item.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"zuora_integration_tests\".\"stg_zuora__invoice_item_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    account_receivable_accounting_code_id\n    \n as \n    \n    account_receivable_accounting_code_id\n    \n, \n    \n    \n    accounting_code\n    \n as \n    \n    accounting_code\n    \n, \n    \n    \n    amendment_id\n    \n as \n    \n    amendment_id\n    \n, \n    \n    \n    applied_to_invoice_item_id\n    \n as \n    \n    applied_to_invoice_item_id\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    bill_to_contact_id\n    \n as \n    \n    bill_to_contact_id\n    \n, \n    \n    \n    charge_amount\n    \n as \n    \n    charge_amount\n    \n, \n    \n    \n    charge_amount_home_currency\n    \n as \n    \n    charge_amount_home_currency\n    \n, \n    \n    \n    charge_date\n    \n as \n    \n    charge_date\n    \n, \n    \n    \n    charge_name\n    \n as \n    \n    charge_name\n    \n, \n    \n    \n    created_by_id\n    \n as \n    \n    created_by_id\n    \n, \n    \n    \n    created_date\n    \n as \n    \n    created_date\n    \n, \n    \n    \n    default_payment_method_id\n    \n as \n    \n    default_payment_method_id\n    \n, \n    \n    \n    deferred_revenue_accounting_code_id\n    \n as \n    \n    deferred_revenue_accounting_code_id\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    exchange_rate_date\n    \n as \n    \n    exchange_rate_date\n    \n, \n    \n    \n    home_currency\n    \n as \n    \n    home_currency\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    invoice_id\n    \n as \n    \n    invoice_id\n    \n, \n    \n    \n    journal_entry_id\n    \n as \n    \n    journal_entry_id\n    \n, \n    \n    \n    parent_account_id\n    \n as \n    \n    parent_account_id\n    \n, \n    \n    \n    processing_type\n    \n as \n    \n    processing_type\n    \n, \n    \n    \n    product_id\n    \n as \n    \n    product_id\n    \n, \n    \n    \n    product_rate_plan_charge_id\n    \n as \n    \n    product_rate_plan_charge_id\n    \n, \n    \n    \n    product_rate_plan_id\n    \n as \n    \n    product_rate_plan_id\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    rate_plan_charge_id\n    \n as \n    \n    rate_plan_charge_id\n    \n, \n    \n    \n    rate_plan_id\n    \n as \n    \n    rate_plan_id\n    \n, \n    \n    \n    recognized_revenue_accounting_code_id\n    \n as \n    \n    recognized_revenue_accounting_code_id\n    \n, \n    \n    \n    rev_rec_start_date\n    \n as \n    \n    rev_rec_start_date\n    \n, \n    \n    \n    service_end_date\n    \n as \n    \n    service_end_date\n    \n, \n    \n    \n    service_start_date\n    \n as \n    \n    service_start_date\n    \n, \n    \n    \n    sku\n    \n as \n    \n    sku\n    \n, \n    \n    \n    sold_to_contact_id\n    \n as \n    \n    sold_to_contact_id\n    \n, \n    \n    \n    source_item_type\n    \n as \n    \n    source_item_type\n    \n, \n    \n    \n    subscription_id\n    \n as \n    \n    subscription_id\n    \n, \n    \n    \n    tax_amount\n    \n as \n    \n    tax_amount\n    \n, \n    \n    \n    tax_mode\n    \n as \n    \n    tax_mode\n    \n, \n    \n    \n    transaction_currency\n    \n as \n    \n    transaction_currency\n    \n, \n    \n    \n    unit_price\n    \n as \n    \n    unit_price\n    \n, \n    \n    \n    uom\n    \n as \n    \n    uom\n    \n, \n    \n    \n    updated_by_id\n    \n as \n    \n    updated_by_id\n    \n, \n    \n    \n    updated_date\n    \n as \n    \n    updated_date\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as invoice_item_id,\n        account_id,\n        account_receivable_accounting_code_id,\n        accounting_code, \n        amendment_id,\n        applied_to_invoice_item_id,\n        balance,\n        bill_to_contact_id, \n        charge_amount, \n        charge_amount_home_currency,\n        charge_date,\n        charge_name,\n        created_by_id,\n        created_date,\n        deferred_revenue_accounting_code_id,\n        exchange_rate,\n        exchange_rate_date,\n        home_currency,\n        invoice_id,\n        journal_entry_id,\n        parent_account_id,\n        processing_type,\n        product_id,\n        product_rate_plan_charge_id,\n        product_rate_plan_id,\n        quantity,\n        rate_plan_charge_id,\n        rate_plan_id,\n        recognized_revenue_accounting_code_id,\n        rev_rec_start_date,\n        service_end_date,\n        service_start_date,\n        sku,\n        sold_to_contact_id,\n        source_item_type,\n        subscription_id,\n        tax_amount,\n        tax_mode,\n        transaction_currency,\n        unit_price,\n        uom,\n        updated_by_id,\n        updated_date,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": []}, "model.zuora_source.stg_zuora__payment": {"database": "postgres", "schema": "zuora_integration_tests", "name": "stg_zuora__payment", "resource_type": "model", "package_name": "zuora_source", "path": "stg_zuora__payment.sql", "original_file_path": "models/stg_zuora__payment.sql", "unique_id": "model.zuora_source.stg_zuora__payment", "fqn": ["zuora_source", "stg_zuora__payment"], "alias": "stg_zuora__payment", "checksum": {"name": "sha256", "checksum": "34233f05b69299e6f9efa9de49cb5ebd1f9696ce78d035b833ca5f0afef20aee"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "A payment is the money that customers send to pay for invoices related to their subscriptions", "columns": {"payment_id": {"name": "payment_id", "description": "The unique identifier of the payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The id of the Zuora account associated with the payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accounting_code": {"name": "accounting_code", "description": "The accounting code associated with the payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "The amount of the payment in the transaction currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount_home_currency": {"name": "amount_home_currency", "description": "The amount of the payment in the home currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "applied_amount": {"name": "applied_amount", "description": "The amount of the payment that has been applied to one or more invoices.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "applied_credit_balance_amount": {"name": "applied_credit_balance_amount", "description": "The amount of the payment that has been applied to a credit balance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bill_to_contact_id": {"name": "bill_to_contact_id", "description": "The id of the contact to which the payment should be billed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cancelled_on": {"name": "cancelled_on", "description": "The date the payment was cancelled.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "comment": {"name": "comment", "description": "A comment associated with the payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_by_id": {"name": "created_by_id", "description": "The id of the user who created the payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_date": {"name": "created_date", "description": "The date the payment was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "The currency of the payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "effective_date": {"name": "effective_date", "description": "The date the payment will be effective.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "exchange_rate": {"name": "exchange_rate", "description": "The exchange rate used to convert the payment amount from the transaction currency to the home currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "exchange_rate_date": {"name": "exchange_rate_date", "description": "The date the exchange rate was set.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_currency": {"name": "home_currency", "description": "The home currency of the payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_account_id": {"name": "parent_account_id", "description": "The id of the parent account associated with the payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payment_method_id": {"name": "payment_method_id", "description": "The id of the payment method used for the payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payment_number": {"name": "payment_number", "description": "The payment number assigned by Zuora.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "refund_amount": {"name": "refund_amount", "description": "The amount of the payment that has been refunded.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "settled_on": {"name": "settled_on", "description": "The date the payment was settled.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sold_to_contact_id": {"name": "sold_to_contact_id", "description": "The id of the contact who made the payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of the payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "submitted_on": {"name": "submitted_on", "description": "The date the payment was submitted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_currency": {"name": "transaction_currency", "description": "The transaction currency of the payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transferred_to_accounting": {"name": "transferred_to_accounting", "description": "Whether the payment has been transferred to the accounting system.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "The type of the payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "unapplied_amount": {"name": "unapplied_amount", "description": "The amount of the payment that has not yet been applied.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_by_id": {"name": "updated_by_id", "description": "The id of the user who last updated the payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_date": {"name": "updated_date", "description": "The date the payment was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Is this the most recent record of the payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "zuora_source://models/stg_zuora.yml", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1682531376.084109, "relation_name": "\"postgres\".\"zuora_integration_tests\".\"stg_zuora__payment\"", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_zuora__payment_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_zuora__payment_tmp')),\n                staging_columns=get_payment_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        id as payment_id,\n        account_id,\n        accounting_code,\n        amount,\n        amount_home_currency,\n        applied_amount,\n        applied_credit_balance_amount,\n        bill_to_contact_id,\n        cancelled_on,\n        comment,\n        created_by_id,\n        created_date,\n        currency,\n        effective_date,\n        exchange_rate,\n        exchange_rate_date,\n        home_currency,\n        parent_account_id,\n        payment_method_id,\n        payment_number,\n        refund_amount,\n        settled_on, \n        sold_to_contact_id,\n        status,\n        submitted_on,\n        transaction_currency,\n        transferred_to_accounting,\n        type,\n        unapplied_amount,\n        updated_by_id,\n        updated_date,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [["stg_zuora__payment_tmp"], ["stg_zuora__payment_tmp"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.zuora_source.get_payment_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.zuora_source.stg_zuora__payment_tmp", "model.zuora_source.stg_zuora__payment_tmp"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora__payment.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"zuora_integration_tests\".\"stg_zuora__payment_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    accounting_code\n    \n as \n    \n    accounting_code\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    amount_home_currency\n    \n as \n    \n    amount_home_currency\n    \n, \n    \n    \n    applied_amount\n    \n as \n    \n    applied_amount\n    \n, \n    \n    \n    applied_credit_balance_amount\n    \n as \n    \n    applied_credit_balance_amount\n    \n, \n    \n    \n    bill_to_contact_id\n    \n as \n    \n    bill_to_contact_id\n    \n, \n    \n    \n    cancelled_on\n    \n as \n    \n    cancelled_on\n    \n, \n    \n    \n    comment\n    \n as \n    \n    comment\n    \n, \n    \n    \n    created_by_id\n    \n as \n    \n    created_by_id\n    \n, \n    \n    \n    created_date\n    \n as \n    \n    created_date\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    effective_date\n    \n as \n    \n    effective_date\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    exchange_rate_date\n    \n as \n    \n    exchange_rate_date\n    \n, \n    \n    \n    home_currency\n    \n as \n    \n    home_currency\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    parent_account_id\n    \n as \n    \n    parent_account_id\n    \n, \n    \n    \n    payment_method_id\n    \n as \n    \n    payment_method_id\n    \n, \n    \n    \n    payment_number\n    \n as \n    \n    payment_number\n    \n, \n    \n    \n    refund_amount\n    \n as \n    \n    refund_amount\n    \n, \n    \n    \n    settled_on\n    \n as \n    \n    settled_on\n    \n, \n    \n    \n    sold_to_contact_id\n    \n as \n    \n    sold_to_contact_id\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    submitted_on\n    \n as \n    \n    submitted_on\n    \n, \n    \n    \n    transaction_currency\n    \n as \n    \n    transaction_currency\n    \n, \n    \n    \n    transferred_to_accounting\n    \n as \n    \n    transferred_to_accounting\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    unapplied_amount\n    \n as \n    \n    unapplied_amount\n    \n, \n    \n    \n    updated_by_id\n    \n as \n    \n    updated_by_id\n    \n, \n    \n    \n    updated_date\n    \n as \n    \n    updated_date\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as payment_id,\n        account_id,\n        accounting_code,\n        amount,\n        amount_home_currency,\n        applied_amount,\n        applied_credit_balance_amount,\n        bill_to_contact_id,\n        cancelled_on,\n        comment,\n        created_by_id,\n        created_date,\n        currency,\n        effective_date,\n        exchange_rate,\n        exchange_rate_date,\n        home_currency,\n        parent_account_id,\n        payment_method_id,\n        payment_number,\n        refund_amount,\n        settled_on, \n        sold_to_contact_id,\n        status,\n        submitted_on,\n        transaction_currency,\n        transferred_to_accounting,\n        type,\n        unapplied_amount,\n        updated_by_id,\n        updated_date,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": []}, "model.zuora_source.stg_zuora__contact": {"database": "postgres", "schema": "zuora_integration_tests", "name": "stg_zuora__contact", "resource_type": "model", "package_name": "zuora_source", "path": "stg_zuora__contact.sql", "original_file_path": "models/stg_zuora__contact.sql", "unique_id": "model.zuora_source.stg_zuora__contact", "fqn": ["zuora_source", "stg_zuora__contact"], "alias": "stg_zuora__contact", "checksum": {"name": "sha256", "checksum": "7537c9d6e86bd7b800b06622870964dde88de8be79e28fd2d2afdae71be9cd39"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Customer who holds an account or who is otherwise a person to contact about an account.", "columns": {"contact_id": {"name": "contact_id", "description": "The unique identifier of the contact table.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The Zuora account id associated with this contact.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "address_1": {"name": "address_1", "description": "The first line of the contact's address, which is often a street address or business name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "address_2": {"name": "address_2", "description": "The second line of the contact's address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "city": {"name": "city", "description": "The city of the contact's address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country": {"name": "country", "description": "The country of the contact's address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_by_id": {"name": "created_by_id", "description": "Identifier of the user who created the contact.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_date": {"name": "created_date", "description": "Creation date for the contact.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "A description for the contact.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_name": {"name": "first_name", "description": "The contact's first name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_name": {"name": "last_name", "description": "The contact's last name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "postal_code": {"name": "postal_code", "description": "The zip code for the contact's address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "state": {"name": "state", "description": "The state for the contact's address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_by_id": {"name": "updated_by_id", "description": "Identifier of the user who last updated the contact.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_date": {"name": "updated_date", "description": "Last updated date for the contact.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "work_email": {"name": "work_email", "description": "The contact's business email address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "work_phone": {"name": "work_phone", "description": "The contact's business phone number.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Is this the most recent record of the contact.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_account_contact": {"name": "is_most_recent_account_contact", "description": "Is this the most recent account for the contact?", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "zuora_source://models/stg_zuora.yml", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1682531376.05231, "relation_name": "\"postgres\".\"zuora_integration_tests\".\"stg_zuora__contact\"", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_zuora__contact_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_zuora__contact_tmp')),\n                staging_columns=get_contact_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select  \n        id as contact_id,\n        account_id,\n        address_1,\n        address_2,\n        city,\n        country,\n        created_by_id,\n        created_date,\n        description, \n        first_name, \n        last_name,  \n        postal_code,\n        state,\n        updated_by_id,\n        updated_date,\n        work_email,\n        work_phone,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record,\n        row_number() over (partition by account_id order by created_date desc) = 1 as is_most_recent_account_contact\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [["stg_zuora__contact_tmp"], ["stg_zuora__contact_tmp"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.zuora_source.get_contact_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.zuora_source.stg_zuora__contact_tmp", "model.zuora_source.stg_zuora__contact_tmp"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora__contact.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"zuora_integration_tests\".\"stg_zuora__contact_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    address_1\n    \n as \n    \n    address_1\n    \n, \n    \n    \n    address_2\n    \n as \n    \n    address_2\n    \n, \n    \n    \n    city\n    \n as \n    \n    city\n    \n, \n    \n    \n    country\n    \n as \n    \n    country\n    \n, \n    \n    \n    created_by_id\n    \n as \n    \n    created_by_id\n    \n, \n    \n    \n    created_date\n    \n as \n    \n    created_date\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    first_name\n    \n as \n    \n    first_name\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    last_name\n    \n as \n    \n    last_name\n    \n, \n    \n    \n    postal_code\n    \n as \n    \n    postal_code\n    \n, \n    \n    \n    state\n    \n as \n    \n    state\n    \n, \n    \n    \n    updated_by_id\n    \n as \n    \n    updated_by_id\n    \n, \n    \n    \n    updated_date\n    \n as \n    \n    updated_date\n    \n, \n    \n    \n    work_email\n    \n as \n    \n    work_email\n    \n, \n    \n    \n    work_phone\n    \n as \n    \n    work_phone\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select  \n        id as contact_id,\n        account_id,\n        address_1,\n        address_2,\n        city,\n        country,\n        created_by_id,\n        created_date,\n        description, \n        first_name, \n        last_name,  \n        postal_code,\n        state,\n        updated_by_id,\n        updated_date,\n        work_email,\n        work_phone,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record,\n        row_number() over (partition by account_id order by created_date desc) = 1 as is_most_recent_account_contact\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": []}, "model.zuora_source.stg_zuora__refund": {"database": "postgres", "schema": "zuora_integration_tests", "name": "stg_zuora__refund", "resource_type": "model", "package_name": "zuora_source", "path": "stg_zuora__refund.sql", "original_file_path": "models/stg_zuora__refund.sql", "unique_id": "model.zuora_source.stg_zuora__refund", "fqn": ["zuora_source", "stg_zuora__refund"], "alias": "stg_zuora__refund", "checksum": {"name": "sha256", "checksum": "52c712727700c730586d038c67904f1a28b0cb2014b49b11d1783c6c66536195"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "A refund returns money to a customer - as opposed to a credit, which creates a customer credit balance that may be applied to reduce the amount owed to you. Electronic refunds are processed by Zuora via a payment gateway.\nExternal refunds indicate that the refund was processed outside of Zuora, say by a check, and the transaction must be recorded.", "columns": {"refund_id": {"name": "refund_id", "description": "The unique identifier of the refund object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accounting_code": {"name": "accounting_code", "description": "The accounting code associated with the refund.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "The amount of the refund.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cancelled_on": {"name": "cancelled_on", "description": "The date and time when the refund was cancelled.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "comment": {"name": "comment", "description": "A comment about the refund.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_by_id": {"name": "created_by_id", "description": "The id of the user who created the refund.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_date": {"name": "created_date", "description": "The date and time when the refund was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "method_type": {"name": "method_type", "description": "The type of the refund method.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payment_method_id": {"name": "payment_method_id", "description": "The id of the payment method used for the refund.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "refund_date": {"name": "refund_date", "description": "The date when the refund was processed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "refund_number": {"name": "refund_number", "description": "The refund number associated with the refund.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "refund_transaction_time": {"name": "refund_transaction_time", "description": "The date and time when the refund transaction was processed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "settled_on": {"name": "settled_on", "description": "The date and time when the refund was settled.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_type": {"name": "source_type", "description": "The type of the refund source.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of the refund.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "submitted_on": {"name": "submitted_on", "description": "The date and time when the refund was submitted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transferred_to_accounting": {"name": "transferred_to_accounting", "description": "A flag that indicates whether the refund was transferred to the accounting system.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "The type of the refund.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_by_id": {"name": "updated_by_id", "description": "The id of the user who last updated the refund.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_date": {"name": "updated_date", "description": "The date and time when the refund was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Is this the most recent record of the refund.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "zuora_source://models/stg_zuora.yml", "build_path": null, "deferred": false, "unrendered_config": {"enabled": true}, "created_at": 1682531376.115529, "relation_name": "\"postgres\".\"zuora_integration_tests\".\"stg_zuora__refund\"", "raw_code": "{{ config(enabled=var('zuora__using_refund', true)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_zuora__refund_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_zuora__refund_tmp')),\n                staging_columns=get_refund_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        id as refund_id,\n        accounting_code,\n        amount,\n        cancelled_on,\n        comment,\n        created_by_id,\n        created_date,\n        method_type,\n        payment_method_id,\n        refund_date,\n        refund_number,\n        refund_transaction_time, \n        settled_on, \n        source_type,\n        status,\n        submitted_on,\n        transferred_to_accounting,\n        type,\n        updated_by_id,\n        updated_date,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [["stg_zuora__refund_tmp"], ["stg_zuora__refund_tmp"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.zuora_source.get_refund_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.zuora_source.stg_zuora__refund_tmp", "model.zuora_source.stg_zuora__refund_tmp"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora__refund.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"zuora_integration_tests\".\"stg_zuora__refund_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    accounting_code\n    \n as \n    \n    accounting_code\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    cancelled_on\n    \n as \n    \n    cancelled_on\n    \n, \n    \n    \n    comment\n    \n as \n    \n    comment\n    \n, \n    \n    \n    created_by_id\n    \n as \n    \n    created_by_id\n    \n, \n    \n    \n    created_date\n    \n as \n    \n    created_date\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    method_type\n    \n as \n    \n    method_type\n    \n, \n    \n    \n    payment_method_id\n    \n as \n    \n    payment_method_id\n    \n, \n    \n    \n    reason_code\n    \n as \n    \n    reason_code\n    \n, \n    \n    \n    reference_id\n    \n as \n    \n    reference_id\n    \n, \n    \n    \n    refund_date\n    \n as \n    \n    refund_date\n    \n, \n    \n    \n    refund_number\n    \n as \n    \n    refund_number\n    \n, \n    \n    \n    refund_transaction_time\n    \n as \n    \n    refund_transaction_time\n    \n, \n    cast(null as TIMESTAMP) as \n    \n    settled_on\n    \n , \n    \n    \n    source_type\n    \n as \n    \n    source_type\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    submitted_on\n    \n as \n    \n    submitted_on\n    \n, \n    \n    \n    transferred_to_accounting\n    \n as \n    \n    transferred_to_accounting\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    updated_by_id\n    \n as \n    \n    updated_by_id\n    \n, \n    \n    \n    updated_date\n    \n as \n    \n    updated_date\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as refund_id,\n        accounting_code,\n        amount,\n        cancelled_on,\n        comment,\n        created_by_id,\n        created_date,\n        method_type,\n        payment_method_id,\n        refund_date,\n        refund_number,\n        refund_transaction_time, \n        settled_on, \n        source_type,\n        status,\n        submitted_on,\n        transferred_to_accounting,\n        type,\n        updated_by_id,\n        updated_date,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": []}, "model.zuora_source.stg_zuora__account": {"database": "postgres", "schema": "zuora_integration_tests", "name": "stg_zuora__account", "resource_type": "model", "package_name": "zuora_source", "path": "stg_zuora__account.sql", "original_file_path": "models/stg_zuora__account.sql", "unique_id": "model.zuora_source.stg_zuora__account", "fqn": ["zuora_source", "stg_zuora__account"], "alias": "stg_zuora__account", "checksum": {"name": "sha256", "checksum": "31940079023bdc083a6ee5a57c1d346a6106e838fecafc21cab47cc01d55c167"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "An account is a customer account that collects all of the critical information about the customer, such as contact information, payment terms, and payment methods.", "columns": {"account_id": {"name": "account_id", "description": "The unique identifier of the account table.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_number": {"name": "account_number", "description": "Unique account number assigned to the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "auto_pay": {"name": "auto_pay", "description": "Indicates if future payments are automatically collected when they're due during a Payment Run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "balance": {"name": "balance", "description": "Current outstanding balance for the account. Can be calculated by (Total Invoice Balance - Total Credit Balance)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "batch": {"name": "batch", "description": "Organizes your customer accounts into groups to optimize your billing and payment operations.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bill_cycle_day": {"name": "bill_cycle_day", "description": "Day on which bill runs generate invoices for the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bill_to_contact_id": {"name": "bill_to_contact_id", "description": "Person that you would like to bill or send the invoice to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_date": {"name": "created_date", "description": "Creation date for the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_by_id": {"name": "created_by_id", "description": "Identifier of the user who created the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "credit_balance": {"name": "credit_balance", "description": "Total credit balance for the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "crm_id": {"name": "crm_id", "description": "CRM account ID, used in Salesforce integration.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Currency the customer is billed in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "default_payment_method_id": {"name": "default_payment_method_id", "description": "Identifier of the default payment method for the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_invoice_date": {"name": "last_invoice_date", "description": "The date when the previous invoice was generated for the account. The field value is null if no invoice has ever been generated for the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "mrr": {"name": "mrr", "description": "The amount of predictable revenue expected to be received on a monthly basis.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Account name as displayed in Zuora.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "notes": {"name": "notes", "description": "Comments about the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_account_id": {"name": "parent_account_id", "description": "Identifier of the parent customer account for this account. Use this field if you have customer hierarchy enabled.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payment_term": {"name": "payment_term", "description": "Indicates when the customer pays for subscriptions.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sold_to_contact_id": {"name": "sold_to_contact_id", "description": "Person that you have sold your product or services to; can be the same as the bill to contact.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Status of the account in the system.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tax_exempt_effective_date": {"name": "tax_exempt_effective_date", "description": "Date when the customer's tax exemption starts.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tax_exempt_expiration_date": {"name": "tax_exempt_expiration_date", "description": "Date when the customer's tax exemption certificate expires.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tax_exempt_status": {"name": "tax_exempt_status", "description": "Status of the account's tax exemption.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_debit_memo_balance": {"name": "total_debit_memo_balance", "description": "Total balance of the account's debit memos.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_invoice_balance": {"name": "total_invoice_balance", "description": "Total balance of the account's invoices.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "unapplied_balance": {"name": "unapplied_balance", "description": "Total of unapplied payments not applied to invoices or debit memos.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "unapplied_credit_memo_amount": {"name": "unapplied_credit_memo_amount", "description": "Total of credit memos created that has been created, but not used to settle or offset an invoice balance or a debit memo balance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_date": {"name": "updated_date", "description": "Last updated date for the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_by_id": {"name": "updated_by_id", "description": "Identifier of the user who last updated the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vatid": {"name": "vatid", "description": "EU Value Added Tax ID.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Is this the most recent record of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "zuora_source://models/stg_zuora.yml", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1682531376.0443861, "relation_name": "\"postgres\".\"zuora_integration_tests\".\"stg_zuora__account\"", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_zuora__account_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_zuora__account_tmp')),\n                staging_columns=get_account_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        id as account_id,\n        account_number,\n        auto_pay,\n        balance,\n        batch, \n        bill_cycle_day,\n        bill_to_contact_id,\n        created_by_id,\n        created_date,\n        credit_balance,\n        crm_id,\n        currency,\n        default_payment_method_id,\n        last_invoice_date,\n        mrr,\n        name,\n        notes,\n        parent_account_id,\n        payment_term,\n        sold_to_contact_id,\n        status, \n        tax_exempt_effective_date, \n        tax_exempt_expiration_date, \n        tax_exempt_status, \n        total_debit_memo_balance,\n        total_invoice_balance,\n        updated_by_id,\n        updated_date,\n        vatid,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n\n        {{ fivetran_utils.fill_pass_through_columns('zuora_account_pass_through_columns') }}\n\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [["stg_zuora__account_tmp"], ["stg_zuora__account_tmp"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.zuora_source.get_account_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.fill_pass_through_columns"], "nodes": ["model.zuora_source.stg_zuora__account_tmp", "model.zuora_source.stg_zuora__account_tmp"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora__account.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"zuora_integration_tests\".\"stg_zuora__account_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_number\n    \n as \n    \n    account_number\n    \n, \n    \n    \n    auto_pay\n    \n as \n    \n    auto_pay\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    batch\n    \n as \n    \n    batch\n    \n, \n    \n    \n    bill_cycle_day\n    \n as \n    \n    bill_cycle_day\n    \n, \n    \n    \n    bill_to_contact_id\n    \n as \n    \n    bill_to_contact_id\n    \n, \n    \n    \n    created_by_id\n    \n as \n    \n    created_by_id\n    \n, \n    \n    \n    created_date\n    \n as \n    \n    created_date\n    \n, \n    \n    \n    credit_balance\n    \n as \n    \n    credit_balance\n    \n, \n    \n    \n    crm_id\n    \n as \n    \n    crm_id\n    \n, \n    \n    \n    currency\n    \n as \n    \n    currency\n    \n, \n    \n    \n    default_payment_method_id\n    \n as \n    \n    default_payment_method_id\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    last_invoice_date\n    \n as \n    \n    last_invoice_date\n    \n, \n    \n    \n    mrr\n    \n as \n    \n    mrr\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    notes\n    \n as \n    \n    notes\n    \n, \n    \n    \n    parent_account_id\n    \n as \n    \n    parent_account_id\n    \n, \n    \n    \n    payment_term\n    \n as \n    \n    payment_term\n    \n, \n    \n    \n    sold_to_contact_id\n    \n as \n    \n    sold_to_contact_id\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    tax_exempt_effective_date\n    \n as \n    \n    tax_exempt_effective_date\n    \n, \n    \n    \n    tax_exempt_expiration_date\n    \n as \n    \n    tax_exempt_expiration_date\n    \n, \n    \n    \n    tax_exempt_status\n    \n as \n    \n    tax_exempt_status\n    \n, \n    \n    \n    total_debit_memo_balance\n    \n as \n    \n    total_debit_memo_balance\n    \n, \n    \n    \n    total_invoice_balance\n    \n as \n    \n    total_invoice_balance\n    \n, \n    \n    \n    unapplied_balance\n    \n as \n    \n    unapplied_balance\n    \n, \n    \n    \n    unapplied_credit_memo_amount\n    \n as \n    \n    unapplied_credit_memo_amount\n    \n, \n    \n    \n    updated_by_id\n    \n as \n    \n    updated_by_id\n    \n, \n    \n    \n    updated_date\n    \n as \n    \n    updated_date\n    \n, \n    \n    \n    vatid\n    \n as \n    \n    vatid\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as account_id,\n        account_number,\n        auto_pay,\n        balance,\n        batch, \n        bill_cycle_day,\n        bill_to_contact_id,\n        created_by_id,\n        created_date,\n        credit_balance,\n        crm_id,\n        currency,\n        default_payment_method_id,\n        last_invoice_date,\n        mrr,\n        name,\n        notes,\n        parent_account_id,\n        payment_term,\n        sold_to_contact_id,\n        status, \n        tax_exempt_effective_date, \n        tax_exempt_expiration_date, \n        tax_exempt_status, \n        total_debit_memo_balance,\n        total_invoice_balance,\n        updated_by_id,\n        updated_date,\n        vatid,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n\n        \n\n\n\n\n\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": []}, "model.zuora_source.stg_zuora__taxation_item": {"database": "postgres", "schema": "zuora_integration_tests", "name": "stg_zuora__taxation_item", "resource_type": "model", "package_name": "zuora_source", "path": "stg_zuora__taxation_item.sql", "original_file_path": "models/stg_zuora__taxation_item.sql", "unique_id": "model.zuora_source.stg_zuora__taxation_item", "fqn": ["zuora_source", "stg_zuora__taxation_item"], "alias": "stg_zuora__taxation_item", "checksum": {"name": "sha256", "checksum": "28d4bb2ff268e9c40fc4c7df2cbd0f928d0adfe86f55c4a72dba13c2f9cf390b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Used to add a tax amount to an invoice item. Changes that you make with this object affect the product charges in your product catalog, but not the charges in existing subscriptions. To change taxes in existing subscriptions, you need to amend the subscription - remove the existing charge and replace it with the modified charge.", "columns": {"taxation_item_id": {"name": "taxation_item_id", "description": "The unique identifier of the taxation item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The id of the account associated with the taxation item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_receivable_accounting_code_id": {"name": "account_receivable_accounting_code_id", "description": "The id of the accounting code for the account receivable.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accounting_code": {"name": "accounting_code", "description": "The accounting code associated with the taxation item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amendment_id": {"name": "amendment_id", "description": "The id of the amendment associated with the taxation item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "balance": {"name": "balance", "description": "The balance of the taxation item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bill_to_contact_id": {"name": "bill_to_contact_id", "description": "The id of the contact associated with the billing of the taxation item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_by_id": {"name": "created_by_id", "description": "The id of the user who created the taxation item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_date": {"name": "created_date", "description": "The date when the taxation item was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "credit_amount": {"name": "credit_amount", "description": "The credit amount of the taxation item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "exchange_rate": {"name": "exchange_rate", "description": "The exchange rate of the taxation item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "exchange_rate_date": {"name": "exchange_rate_date", "description": "The date of the exchange rate of the taxation item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "exempt_amount": {"name": "exempt_amount", "description": "The exempt amount of the taxation item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "exempt_amount_home_currency": {"name": "exempt_amount_home_currency", "description": "The exempt amount in home currency of the taxation item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_currency": {"name": "home_currency", "description": "The home currency of the taxation item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invoice_id": {"name": "invoice_id", "description": "The id of the invoice associated with the taxation item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invoice_item_id": {"name": "invoice_item_id", "description": "The id of the invoice item associated with the taxation item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "journal_entry_id": {"name": "journal_entry_id", "description": "The id of the journal entry associated with the taxation item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the taxation item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payment_amount": {"name": "payment_amount", "description": "The payment amount of the taxation item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "product_id": {"name": "product_id", "description": "The id of the product associated with the taxation item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "product_rate_plan_charge_id": {"name": "product_rate_plan_charge_id", "description": "The id of the product rate plan charge associated with the taxation item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "product_rate_plan_id": {"name": "product_rate_plan_id", "description": "The id of the product rate plan associated with the taxation item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rate_plan_charge_id": {"name": "rate_plan_charge_id", "description": "The id of the rate plan charge associated with the taxation item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rate_plan_id": {"name": "rate_plan_id", "description": "The id of the rate plan associated with the taxation item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sales_tax_payable_accounting_code_id": {"name": "sales_tax_payable_accounting_code_id", "description": "The id of the accounting code for the sales tax payable.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sold_to_contact_id": {"name": "sold_to_contact_id", "description": "The id of the contact associated with the sale of the taxation item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subscription_id": {"name": "subscription_id", "description": "The id of the subscription associated with the taxation item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tax_amount": {"name": "tax_amount", "description": "The tax amount of the taxation item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tax_amount_home_currency": {"name": "tax_amount_home_currency", "description": "The tax amount in home currency of the taxation item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tax_date": {"name": "tax_date", "description": "The date of the tax of the taxation item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tax_description": {"name": "tax_description", "description": "The description of the tax of the taxation item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tax_mode": {"name": "tax_mode", "description": "The tax mode of the taxation item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tax_rate": {"name": "tax_rate", "description": "The tax rate of the taxation item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tax_rate_type": {"name": "tax_rate_type", "description": "The type of tax rate that applies to the taxation item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_currency": {"name": "transaction_currency", "description": "The currency in which the transaction was processed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_by_id": {"name": "updated_by_id", "description": "The id of the user who last updated the taxation item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_date": {"name": "updated_date", "description": "The date and time the taxation item was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Is this the most recent record of the taxation item.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "zuora_source://models/stg_zuora.yml", "build_path": null, "deferred": false, "unrendered_config": {"enabled": true}, "created_at": 1682531376.1279712, "relation_name": "\"postgres\".\"zuora_integration_tests\".\"stg_zuora__taxation_item\"", "raw_code": "{{ config(enabled=var('zuora__using_taxation_item', true)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_zuora__taxation_item_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_zuora__taxation_item_tmp')),\n                staging_columns=get_taxation_item_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select  \n        id as taxation_item_id,\n        account_id,\n        account_receivable_accounting_code_id,\n        accounting_code, \n        amendment_id,\n        balance,\n        bill_to_contact_id,\n        created_by_id,\n        created_date,\n        credit_amount,\n        exchange_rate,\n        exchange_rate_date,\n        exempt_amount, \n        exempt_amount_home_currency, \n        home_currency,\n        invoice_id,\n        invoice_item_id,\n        journal_entry_id,   \n        name,\n        payment_amount,\n        product_id,\n        product_rate_plan_charge_id,\n        product_rate_plan_id, \n        rate_plan_charge_id,\n        rate_plan_id,\n        sales_tax_payable_accounting_code_id, \n        sold_to_contact_id,\n        subscription_id,\n        tax_amount, \n        tax_amount_home_currency,\n        tax_date,\n        tax_description,\n        tax_mode,\n        tax_rate,\n        tax_rate_type, \n        transaction_currency,\n        updated_by_id,\n        updated_date,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [["stg_zuora__taxation_item_tmp"], ["stg_zuora__taxation_item_tmp"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.zuora_source.get_taxation_item_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.zuora_source.stg_zuora__taxation_item_tmp", "model.zuora_source.stg_zuora__taxation_item_tmp"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora__taxation_item.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"zuora_integration_tests\".\"stg_zuora__taxation_item_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    account_receivable_accounting_code_id\n    \n as \n    \n    account_receivable_accounting_code_id\n    \n, \n    \n    \n    accounting_code\n    \n as \n    \n    accounting_code\n    \n, \n    \n    \n    amendment_id\n    \n as \n    \n    amendment_id\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    bill_to_contact_id\n    \n as \n    \n    bill_to_contact_id\n    \n, \n    \n    \n    created_by_id\n    \n as \n    \n    created_by_id\n    \n, \n    \n    \n    created_date\n    \n as \n    \n    created_date\n    \n, \n    \n    \n    credit_amount\n    \n as \n    \n    credit_amount\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    exchange_rate_date\n    \n as \n    \n    exchange_rate_date\n    \n, \n    \n    \n    exempt_amount\n    \n as \n    \n    exempt_amount\n    \n, \n    \n    \n    exempt_amount_home_currency\n    \n as \n    \n    exempt_amount_home_currency\n    \n, \n    \n    \n    home_currency\n    \n as \n    \n    home_currency\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    invoice_id\n    \n as \n    \n    invoice_id\n    \n, \n    \n    \n    invoice_item_id\n    \n as \n    \n    invoice_item_id\n    \n, \n    \n    \n    journal_entry_id\n    \n as \n    \n    journal_entry_id\n    \n, \n    \n    \n    journal_run_id\n    \n as \n    \n    journal_run_id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    payment_amount\n    \n as \n    \n    payment_amount\n    \n, \n    \n    \n    product_id\n    \n as \n    \n    product_id\n    \n, \n    \n    \n    product_rate_plan_charge_id\n    \n as \n    \n    product_rate_plan_charge_id\n    \n, \n    \n    \n    product_rate_plan_id\n    \n as \n    \n    product_rate_plan_id\n    \n, \n    \n    \n    rate_plan_charge_id\n    \n as \n    \n    rate_plan_charge_id\n    \n, \n    \n    \n    rate_plan_id\n    \n as \n    \n    rate_plan_id\n    \n, \n    \n    \n    sales_tax_payable_accounting_code_id\n    \n as \n    \n    sales_tax_payable_accounting_code_id\n    \n, \n    \n    \n    seller_registration\n    \n as \n    \n    seller_registration\n    \n, \n    \n    \n    sold_to_contact_id\n    \n as \n    \n    sold_to_contact_id\n    \n, \n    \n    \n    subscription_id\n    \n as \n    \n    subscription_id\n    \n, \n    \n    \n    tax_amount\n    \n as \n    \n    tax_amount\n    \n, \n    \n    \n    tax_amount_home_currency\n    \n as \n    \n    tax_amount_home_currency\n    \n, \n    \n    \n    tax_date\n    \n as \n    \n    tax_date\n    \n, \n    \n    \n    tax_description\n    \n as \n    \n    tax_description\n    \n, \n    \n    \n    tax_mode\n    \n as \n    \n    tax_mode\n    \n, \n    \n    \n    tax_rate\n    \n as \n    \n    tax_rate\n    \n, \n    \n    \n    tax_rate_description\n    \n as \n    \n    tax_rate_description\n    \n, \n    \n    \n    tax_rate_type\n    \n as \n    \n    tax_rate_type\n    \n, \n    \n    \n    tax_rule_id\n    \n as \n    \n    tax_rule_id\n    \n, \n    \n    \n    transaction_currency\n    \n as \n    \n    transaction_currency\n    \n, \n    \n    \n    updated_by_id\n    \n as \n    \n    updated_by_id\n    \n, \n    \n    \n    updated_date\n    \n as \n    \n    updated_date\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select  \n        id as taxation_item_id,\n        account_id,\n        account_receivable_accounting_code_id,\n        accounting_code, \n        amendment_id,\n        balance,\n        bill_to_contact_id,\n        created_by_id,\n        created_date,\n        credit_amount,\n        exchange_rate,\n        exchange_rate_date,\n        exempt_amount, \n        exempt_amount_home_currency, \n        home_currency,\n        invoice_id,\n        invoice_item_id,\n        journal_entry_id,   \n        name,\n        payment_amount,\n        product_id,\n        product_rate_plan_charge_id,\n        product_rate_plan_id, \n        rate_plan_charge_id,\n        rate_plan_id,\n        sales_tax_payable_accounting_code_id, \n        sold_to_contact_id,\n        subscription_id,\n        tax_amount, \n        tax_amount_home_currency,\n        tax_date,\n        tax_description,\n        tax_mode,\n        tax_rate,\n        tax_rate_type, \n        transaction_currency,\n        updated_by_id,\n        updated_date,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": []}, "model.zuora_source.stg_zuora__rate_plan": {"database": "postgres", "schema": "zuora_integration_tests", "name": "stg_zuora__rate_plan", "resource_type": "model", "package_name": "zuora_source", "path": "stg_zuora__rate_plan.sql", "original_file_path": "models/stg_zuora__rate_plan.sql", "unique_id": "model.zuora_source.stg_zuora__rate_plan", "fqn": ["zuora_source", "stg_zuora__rate_plan"], "alias": "stg_zuora__rate_plan", "checksum": {"name": "sha256", "checksum": "7d1ecdd4654c3282b7913b363a027ea26235ea643c844ac627b7bfd2a93b062f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "A rate plan is part of a subscription or an amendment to a subscription, and it comes from a product rate plan.  Rate plans represent a price or a collection of prices for a service you sell. An individual rate plan contains all charges specific to a particular subscription.", "columns": {"rate_plan_id": {"name": "rate_plan_id", "description": "The unique identifier of the rate plan.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The unique identifier of the account that the rate plan belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amendment_id": {"name": "amendment_id", "description": "The unique identifier of the amendment that the rate plan belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bill_to_contact_id": {"name": "bill_to_contact_id", "description": "The unique identifier of the contact that the rate plan is billed to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_by_id": {"name": "created_by_id", "description": "The unique identifier of the user who created the rate plan.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_date": {"name": "created_date", "description": "The date and time when the rate plan was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "default_payment_method_id": {"name": "default_payment_method_id", "description": "The unique identifier of the default payment method for the rate plan.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the rate plan.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "original_rate_plan_id": {"name": "original_rate_plan_id", "description": "The unique identifier of the original rate plan that was used to create the rate plan.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "product_id": {"name": "product_id", "description": "The unique identifier of the product that the rate plan belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "product_rate_plan_id": {"name": "product_rate_plan_id", "description": "The unique identifier of the product rate plan that the rate plan belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sold_to_contact_id": {"name": "sold_to_contact_id", "description": "The unique identifier of the contact that the rate plan is sold to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subscription_id": {"name": "subscription_id", "description": "The unique identifier of the subscription that the rate plan belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_by_id": {"name": "updated_by_id", "description": "The unique identifier of the user who last updated the rate plan.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_date": {"name": "updated_date", "description": "The date and time when the rate plan was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Is this the most recent record of the rate plan.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "zuora_source://models/stg_zuora.yml", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1682531376.100578, "relation_name": "\"postgres\".\"zuora_integration_tests\".\"stg_zuora__rate_plan\"", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_zuora__rate_plan_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_zuora__rate_plan_tmp')),\n                staging_columns=get_rate_plan_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        id as rate_plan_id,\n        account_id,\n        amendment_id,\n        bill_to_contact_id,\n        created_by_id,\n        created_date,\n        default_payment_method_id,  \n        name,\n        original_rate_plan_id, \n        product_id,\n        product_rate_plan_id,\n        sold_to_contact_id,\n        subscription_id, \n        updated_by_id,\n        updated_date,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n\n        {{ fivetran_utils.fill_pass_through_columns('zuora_rate_plan_pass_through_columns') }}\n\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [["stg_zuora__rate_plan_tmp"], ["stg_zuora__rate_plan_tmp"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.zuora_source.get_rate_plan_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.fill_pass_through_columns"], "nodes": ["model.zuora_source.stg_zuora__rate_plan_tmp", "model.zuora_source.stg_zuora__rate_plan_tmp"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora__rate_plan.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"zuora_integration_tests\".\"stg_zuora__rate_plan_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    amendment_id\n    \n as \n    \n    amendment_id\n    \n, \n    \n    \n    bill_to_contact_id\n    \n as \n    \n    bill_to_contact_id\n    \n, \n    \n    \n    created_by_id\n    \n as \n    \n    created_by_id\n    \n, \n    \n    \n    created_date\n    \n as \n    \n    created_date\n    \n, \n    \n    \n    default_payment_method_id\n    \n as \n    \n    default_payment_method_id\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    original_rate_plan_id\n    \n as \n    \n    original_rate_plan_id\n    \n, \n    \n    \n    product_id\n    \n as \n    \n    product_id\n    \n, \n    \n    \n    product_rate_plan_id\n    \n as \n    \n    product_rate_plan_id\n    \n, \n    \n    \n    sold_to_contact_id\n    \n as \n    \n    sold_to_contact_id\n    \n, \n    \n    \n    subscription_id\n    \n as \n    \n    subscription_id\n    \n, \n    \n    \n    updated_by_id\n    \n as \n    \n    updated_by_id\n    \n, \n    \n    \n    updated_date\n    \n as \n    \n    updated_date\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as rate_plan_id,\n        account_id,\n        amendment_id,\n        bill_to_contact_id,\n        created_by_id,\n        created_date,\n        default_payment_method_id,  \n        name,\n        original_rate_plan_id, \n        product_id,\n        product_rate_plan_id,\n        sold_to_contact_id,\n        subscription_id, \n        updated_by_id,\n        updated_date,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n\n        \n\n\n\n\n\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": []}, "model.zuora_source.stg_zuora__rate_plan_charge": {"database": "postgres", "schema": "zuora_integration_tests", "name": "stg_zuora__rate_plan_charge", "resource_type": "model", "package_name": "zuora_source", "path": "stg_zuora__rate_plan_charge.sql", "original_file_path": "models/stg_zuora__rate_plan_charge.sql", "unique_id": "model.zuora_source.stg_zuora__rate_plan_charge", "fqn": ["zuora_source", "stg_zuora__rate_plan_charge"], "alias": "stg_zuora__rate_plan_charge", "checksum": {"name": "sha256", "checksum": "60332b03bc7785a596a95126a015c717c1102c1b7f2e044ff338718e4a5585d1"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "A rate plan charge is part of a subscription or an amendment to a subscription, and it comes from a product rate plan charge. Rate plan charges represent the actual charges for the rate plans or services that you sell.", "columns": {"rate_plan_charge_id": {"name": "rate_plan_charge_id", "description": "The unique identifier for the rate plan charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The unique identifier of the account associated with the rate plan charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_receivable_accounting_code_id": {"name": "account_receivable_accounting_code_id", "description": "The unique identifier for the accounting code that represents the account receivable for this charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accounting_code": {"name": "accounting_code", "description": "The accounting code associated with this charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amended_by_order_on": {"name": "amended_by_order_on", "description": "The date when the amendment order was created or processed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amendment_id": {"name": "amendment_id", "description": "The unique identifier for the amendment associated with this rate plan charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "apply_discount_to": {"name": "apply_discount_to", "description": "The type of discount that is applied to the charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bill_cycle_day": {"name": "bill_cycle_day", "description": "The day of the month when the billing cycle for the charge ends.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bill_cycle_type": {"name": "bill_cycle_type", "description": "The type of billing cycle that the charge uses.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bill_to_contact_id": {"name": "bill_to_contact_id", "description": "The unique identifier of the contact associated with the account's billing information.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bill_to_contact_snapshot_id": {"name": "bill_to_contact_snapshot_id", "description": "The unique identifier for the snapshot of the bill-to contact information that was used when the charge was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_period": {"name": "billing_period", "description": "The billing period for the charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_timing": {"name": "billing_timing", "description": "The timing of the charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "booking_exchange_rate": {"name": "booking_exchange_rate", "description": "The exchange rate for the charge when it was booked.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "booking_exchange_rate_date": {"name": "booking_exchange_rate_date", "description": "The date on which the exchange rate for the charge when it was booked was determined.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "charge_model": {"name": "charge_model", "description": "The model used to calculate the charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "charge_number": {"name": "charge_number", "description": "The number of the charge within the subscription.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "charge_type": {"name": "charge_type", "description": "The type of charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "charged_through_date": {"name": "charged_through_date", "description": "The date through which the charge has been charged.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_by_id": {"name": "created_by_id", "description": "The unique identifier of the user who created the rate plan charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_date": {"name": "created_date", "description": "The date and time when the rate plan charge was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "credit_option": {"name": "credit_option", "description": "The option used to calculate the credit for the charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "default_payment_method_id": {"name": "default_payment_method_id", "description": "The unique identifier of the default payment method for the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deferred_revenue_accounting_code_id": {"name": "deferred_revenue_accounting_code_id", "description": "The unique identifier for the accounting code that represents the deferred revenue for this charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "The description of the rate plan charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "discount_level": {"name": "discount_level", "description": "The level of the discount applied to the charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dmrc": {"name": "dmrc", "description": "The amount of the charge in the charge currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dmrchome_currency": {"name": "dmrchome_currency", "description": "The amount of the charge in the home currency of the company.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dtcv": {"name": "dtcv", "description": "The deferred tax calculated value of the rate plan charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dtcvhome_currency": {"name": "dtcvhome_currency", "description": "The deferred tax calculated value of the rate plan charge in the home currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "effective_end_date": {"name": "effective_end_date", "description": "The date on which the rate plan charge is no longer in effect.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "effective_start_date": {"name": "effective_start_date", "description": "The date on which the rate plan charge goes into effect.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "end_date_condition": {"name": "end_date_condition", "description": "The condition that triggers the end date of the rate plan charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "exchange_rate": {"name": "exchange_rate", "description": "The exchange rate used for the rate plan charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "exchange_rate_date": {"name": "exchange_rate_date", "description": "The date on which the exchange rate was determined.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_currency": {"name": "home_currency", "description": "Home currency the customer is billed in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_prepaid": {"name": "is_prepaid", "description": "A boolean value indicating whether the rate plan charge is prepaid.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_processed": {"name": "is_processed", "description": "A boolean value indicating whether the rate plan charge has been processed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "mrr": {"name": "mrr", "description": "The monthly recurring revenue of the rate plan charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "mrrhome_currency": {"name": "mrrhome_currency", "description": "The monthly recurring revenue of the rate plan charge in the home currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the rate plan charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "number_of_periods": {"name": "number_of_periods", "description": "The number of billing periods for the rate plan charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "original_id": {"name": "original_id", "description": "The original id of the rate plan charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "original_order_date": {"name": "original_order_date", "description": "The date on which the original order was placed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "price_change_option": {"name": "price_change_option", "description": "The option selected for handling price changes for the rate plan charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "price_increase_percentage": {"name": "price_increase_percentage", "description": "The percentage increase applied to the rate plan charge price.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "processed_through_date": {"name": "processed_through_date", "description": "The date through which the rate plan charge has been processed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "product_id": {"name": "product_id", "description": "The unique identifier of the product associated with the rate plan charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "product_rate_plan_charge_id": {"name": "product_rate_plan_charge_id", "description": "The unique identifier of the product rate plan charge associated with the rate plan charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "product_rate_plan_id": {"name": "product_rate_plan_id", "description": "The unique identifier of the product rate plan associated with the rate plan charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "quantity": {"name": "quantity", "description": "The quantity associated with the rate plan charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rate_plan_id": {"name": "rate_plan_id", "description": "The unique identifier of the rate plan associated with the rate plan charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "recognized_revenue_accounting_code_id": {"name": "recognized_revenue_accounting_code_id", "description": "The unique identifier of the accounting code associated with recognized revenue for the rate plan charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "segment": {"name": "segment", "description": "The segment associated with the rate plan charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sold_to_contact_id": {"name": "sold_to_contact_id", "description": "The unique identifier of the contact associated with the sold-to account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "specific_billing_period": {"name": "specific_billing_period", "description": "The specific billing period associated with the rate plan charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "specific_end_date": {"name": "specific_end_date", "description": "The specific end date associated with the rate plan charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "specific_list_base_price": {"name": "specific_list_base_price", "description": "The list price base for the rate plan charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subscription_id": {"name": "subscription_id", "description": "The id of the subscription associated with the rate plan charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tcv": {"name": "tcv", "description": "The total contract value for the rate plan charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tcvhome_currency": {"name": "tcvhome_currency", "description": "The home currency value of the Total Contract Value.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_currency": {"name": "transaction_currency", "description": "The currency in which the transaction occurs.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "trigger_date": {"name": "trigger_date", "description": "The date on which the trigger event occurs.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "trigger_event": {"name": "trigger_event", "description": "The type of trigger event that is associated with the rate plan charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "uom": {"name": "uom", "description": "The unit of measure for the quantity of the rate plan charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "up_to_periods": {"name": "up_to_periods", "description": "The maximum number of billing periods for which the charge is applicable.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "up_to_periods_type": {"name": "up_to_periods_type", "description": "The time unit that is used to calculate the maximum number of billing periods for which the charge is applicable.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_by_id": {"name": "updated_by_id", "description": "The id of the user who last updated the rate plan charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_date": {"name": "updated_date", "description": "The date and time when the rate plan charge was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "version": {"name": "version", "description": "The version number of the rate plan charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "weekly_bill_cycle_day": {"name": "weekly_bill_cycle_day", "description": "The day of the week on which the bill cycle starts.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Is this the most recent record of the rate plan charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "zuora_source://models/stg_zuora.yml", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1682531376.110719, "relation_name": "\"postgres\".\"zuora_integration_tests\".\"stg_zuora__rate_plan_charge\"", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_zuora__rate_plan_charge_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_zuora__rate_plan_charge_tmp')),\n                staging_columns=get_rate_plan_charge_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        id as rate_plan_charge_id,\n        account_id,\n        account_receivable_accounting_code_id,\n        accounting_code,\n        amended_by_order_on,\n        amendment_id,\n        apply_discount_to,\n        bill_cycle_day,\n        bill_cycle_type,\n        bill_to_contact_id,\n        bill_to_contact_snapshot_id,\n        billing_period,\n        billing_timing,\n        booking_exchange_rate,\n        booking_exchange_rate_date,\n        charge_model,\n        charge_number,\n        charge_type,\n        charged_through_date,\n        created_by_id,\n        created_date,\n        credit_option,\n        default_payment_method_id,\n        deferred_revenue_accounting_code_id,\n        description,\n        discount_level,\n        dmrc,\n        dmrchome_currency,\n        dtcv,\n        dtcvhome_currency,\n        effective_end_date,\n        effective_start_date,\n        end_date_condition,\n        exchange_rate,\n        exchange_rate_date, \n        home_currency,  \n        is_prepaid,\n        is_processed,  \n        mrr,\n        mrrhome_currency,\n        name,\n        number_of_periods,\n        original_id,\n        original_order_date,\n        price_change_option,\n        price_increase_percentage,\n        processed_through_date,\n        product_id,\n        product_rate_plan_charge_id,\n        product_rate_plan_id,\n        quantity,\n        rate_plan_id, \n        recognized_revenue_accounting_code_id,\n        segment,\n        sold_to_contact_id,\n        specific_billing_period,\n        specific_end_date,\n        specific_list_price_base,\n        subscription_id, \n        tcv, \n        tcvhome_currency,\n        transaction_currency,\n        trigger_date,\n        trigger_event,\n        uom,\n        up_to_periods,\n        up_to_periods_type,\n        updated_by_id,\n        updated_date, \n        version,\n        weekly_bill_cycle_day,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n\n        {{ fivetran_utils.fill_pass_through_columns('zuora_rate_plan_charge_pass_through_columns') }}\n\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [["stg_zuora__rate_plan_charge_tmp"], ["stg_zuora__rate_plan_charge_tmp"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.zuora_source.get_rate_plan_charge_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.fill_pass_through_columns"], "nodes": ["model.zuora_source.stg_zuora__rate_plan_charge_tmp", "model.zuora_source.stg_zuora__rate_plan_charge_tmp"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora__rate_plan_charge.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"zuora_integration_tests\".\"stg_zuora__rate_plan_charge_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    account_receivable_accounting_code_id\n    \n as \n    \n    account_receivable_accounting_code_id\n    \n, \n    \n    \n    accounting_code\n    \n as \n    \n    accounting_code\n    \n, \n    \n    \n    amended_by_order_on\n    \n as \n    \n    amended_by_order_on\n    \n, \n    \n    \n    amendment_id\n    \n as \n    \n    amendment_id\n    \n, \n    \n    \n    apply_discount_to\n    \n as \n    \n    apply_discount_to\n    \n, \n    \n    \n    bill_cycle_day\n    \n as \n    \n    bill_cycle_day\n    \n, \n    \n    \n    bill_cycle_type\n    \n as \n    \n    bill_cycle_type\n    \n, \n    \n    \n    bill_to_contact_id\n    \n as \n    \n    bill_to_contact_id\n    \n, \n    \n    \n    bill_to_contact_snapshot_id\n    \n as \n    \n    bill_to_contact_snapshot_id\n    \n, \n    \n    \n    billing_period\n    \n as \n    \n    billing_period\n    \n, \n    \n    \n    billing_timing\n    \n as \n    \n    billing_timing\n    \n, \n    \n    \n    booking_exchange_rate\n    \n as \n    \n    booking_exchange_rate\n    \n, \n    \n    \n    booking_exchange_rate_date\n    \n as \n    \n    booking_exchange_rate_date\n    \n, \n    \n    \n    charge_model\n    \n as \n    \n    charge_model\n    \n, \n    \n    \n    charge_number\n    \n as \n    \n    charge_number\n    \n, \n    \n    \n    charge_type\n    \n as \n    \n    charge_type\n    \n, \n    \n    \n    charged_through_date\n    \n as \n    \n    charged_through_date\n    \n, \n    \n    \n    created_by_id\n    \n as \n    \n    created_by_id\n    \n, \n    \n    \n    created_date\n    \n as \n    \n    created_date\n    \n, \n    \n    \n    credit_option\n    \n as \n    \n    credit_option\n    \n, \n    \n    \n    default_payment_method_id\n    \n as \n    \n    default_payment_method_id\n    \n, \n    \n    \n    deferred_revenue_accounting_code_id\n    \n as \n    \n    deferred_revenue_accounting_code_id\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    discount_level\n    \n as \n    \n    discount_level\n    \n, \n    \n    \n    dmrc\n    \n as \n    \n    dmrc\n    \n, \n    \n    \n    dmrchome_currency\n    \n as \n    \n    dmrchome_currency\n    \n, \n    \n    \n    dtcv\n    \n as \n    \n    dtcv\n    \n, \n    \n    \n    dtcvhome_currency\n    \n as \n    \n    dtcvhome_currency\n    \n, \n    \n    \n    effective_end_date\n    \n as \n    \n    effective_end_date\n    \n, \n    \n    \n    effective_start_date\n    \n as \n    \n    effective_start_date\n    \n, \n    \n    \n    end_date_condition\n    \n as \n    \n    end_date_condition\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    exchange_rate_date\n    \n as \n    \n    exchange_rate_date\n    \n, \n    \n    \n    home_currency\n    \n as \n    \n    home_currency\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    invoice_owner_id\n    \n as \n    \n    invoice_owner_id\n    \n, \n    \n    \n    is_prepaid\n    \n as \n    \n    is_prepaid\n    \n, \n    \n    \n    is_processed\n    \n as \n    \n    is_processed\n    \n, \n    \n    \n    mrr\n    \n as \n    \n    mrr\n    \n, \n    \n    \n    mrrhome_currency\n    \n as \n    \n    mrrhome_currency\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    number_of_periods\n    \n as \n    \n    number_of_periods\n    \n, \n    \n    \n    original_id\n    \n as \n    \n    original_id\n    \n, \n    \n    \n    original_order_date\n    \n as \n    \n    original_order_date\n    \n, \n    \n    \n    price_change_option\n    \n as \n    \n    price_change_option\n    \n, \n    \n    \n    price_increase_percentage\n    \n as \n    \n    price_increase_percentage\n    \n, \n    \n    \n    processed_through_date\n    \n as \n    \n    processed_through_date\n    \n, \n    \n    \n    product_id\n    \n as \n    \n    product_id\n    \n, \n    \n    \n    product_rate_plan_charge_id\n    \n as \n    \n    product_rate_plan_charge_id\n    \n, \n    \n    \n    product_rate_plan_id\n    \n as \n    \n    product_rate_plan_id\n    \n, \n    \n    \n    quantity\n    \n as \n    \n    quantity\n    \n, \n    \n    \n    rate_plan_id\n    \n as \n    \n    rate_plan_id\n    \n, \n    \n    \n    recognized_revenue_accounting_code_id\n    \n as \n    \n    recognized_revenue_accounting_code_id\n    \n, \n    \n    \n    segment\n    \n as \n    \n    segment\n    \n, \n    \n    \n    sold_to_contact_id\n    \n as \n    \n    sold_to_contact_id\n    \n, \n    \n    \n    specific_billing_period\n    \n as \n    \n    specific_billing_period\n    \n, \n    \n    \n    specific_end_date\n    \n as \n    \n    specific_end_date\n    \n, \n    \n    \n    specific_list_price_base\n    \n as \n    \n    specific_list_price_base\n    \n, \n    \n    \n    subscription_id\n    \n as \n    \n    subscription_id\n    \n, \n    \n    \n    subscription_owner_id\n    \n as \n    \n    subscription_owner_id\n    \n, \n    \n    \n    tcv\n    \n as \n    \n    tcv\n    \n, \n    \n    \n    tcvhome_currency\n    \n as \n    \n    tcvhome_currency\n    \n, \n    \n    \n    transaction_currency\n    \n as \n    \n    transaction_currency\n    \n, \n    \n    \n    trigger_date\n    \n as \n    \n    trigger_date\n    \n, \n    \n    \n    trigger_event\n    \n as \n    \n    trigger_event\n    \n, \n    \n    \n    uom\n    \n as \n    \n    uom\n    \n, \n    \n    \n    up_to_periods\n    \n as \n    \n    up_to_periods\n    \n, \n    \n    \n    up_to_periods_type\n    \n as \n    \n    up_to_periods_type\n    \n, \n    \n    \n    updated_by_id\n    \n as \n    \n    updated_by_id\n    \n, \n    \n    \n    updated_date\n    \n as \n    \n    updated_date\n    \n, \n    \n    \n    version\n    \n as \n    \n    version\n    \n, \n    \n    \n    weekly_bill_cycle_day\n    \n as \n    \n    weekly_bill_cycle_day\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as rate_plan_charge_id,\n        account_id,\n        account_receivable_accounting_code_id,\n        accounting_code,\n        amended_by_order_on,\n        amendment_id,\n        apply_discount_to,\n        bill_cycle_day,\n        bill_cycle_type,\n        bill_to_contact_id,\n        bill_to_contact_snapshot_id,\n        billing_period,\n        billing_timing,\n        booking_exchange_rate,\n        booking_exchange_rate_date,\n        charge_model,\n        charge_number,\n        charge_type,\n        charged_through_date,\n        created_by_id,\n        created_date,\n        credit_option,\n        default_payment_method_id,\n        deferred_revenue_accounting_code_id,\n        description,\n        discount_level,\n        dmrc,\n        dmrchome_currency,\n        dtcv,\n        dtcvhome_currency,\n        effective_end_date,\n        effective_start_date,\n        end_date_condition,\n        exchange_rate,\n        exchange_rate_date, \n        home_currency,  \n        is_prepaid,\n        is_processed,  \n        mrr,\n        mrrhome_currency,\n        name,\n        number_of_periods,\n        original_id,\n        original_order_date,\n        price_change_option,\n        price_increase_percentage,\n        processed_through_date,\n        product_id,\n        product_rate_plan_charge_id,\n        product_rate_plan_id,\n        quantity,\n        rate_plan_id, \n        recognized_revenue_accounting_code_id,\n        segment,\n        sold_to_contact_id,\n        specific_billing_period,\n        specific_end_date,\n        specific_list_price_base,\n        subscription_id, \n        tcv, \n        tcvhome_currency,\n        transaction_currency,\n        trigger_date,\n        trigger_event,\n        uom,\n        up_to_periods,\n        up_to_periods_type,\n        updated_by_id,\n        updated_date, \n        version,\n        weekly_bill_cycle_day,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n\n        \n\n\n\n\n\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": []}, "model.zuora_source.stg_zuora__invoice": {"database": "postgres", "schema": "zuora_integration_tests", "name": "stg_zuora__invoice", "resource_type": "model", "package_name": "zuora_source", "path": "stg_zuora__invoice.sql", "original_file_path": "models/stg_zuora__invoice.sql", "unique_id": "model.zuora_source.stg_zuora__invoice", "fqn": ["zuora_source", "stg_zuora__invoice"], "alias": "stg_zuora__invoice", "checksum": {"name": "sha256", "checksum": "d6b45be2f555a0200dab4e8d73e48b2376734bc3c8f768234e7aedd319202b0a"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "An invoice represents a bill to a customer, providing information about customers' accounts for invoices, including dates, status, and amounts. It is created at the account level, and can include all of the charges for multiple subscriptions for an account.", "columns": {"invoice_id": {"name": "invoice_id", "description": "The unique identifier of the invoice table.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The account identifier associated with the invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "adjustment_amount": {"name": "adjustment_amount", "description": "The amount of the invoice adjustments associated with the invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "The sum of all charges and taxes associated with the invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount_home_currency": {"name": "amount_home_currency", "description": "The total amount of the invoice in the home currency of the customer's billing account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount_without_tax": {"name": "amount_without_tax", "description": "The sum of all charges associated with the invoice. Taxes are excluded from this value.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount_without_tax_home_currency": {"name": "amount_without_tax_home_currency", "description": "The amount of the invoice that is not subject to tax, in the home currency of the customer's billing account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "auto_pay": {"name": "auto_pay", "description": "Whether invoices are automatically picked up for processing in the corresponding payment run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "balance": {"name": "balance", "description": "The remaining balance of the invoice after all payments, adjustments, and refunds are applied.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bill_to_contact_id": {"name": "bill_to_contact_id", "description": "Person that you would like to bill or send the invoice to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "comments": {"name": "comments", "description": "Additional comments about the invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_by_id": {"name": "created_by_id", "description": "Identifier of the user who created the invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_date": {"name": "created_date", "description": "Creation date for the invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "credit_balance_adjustment_amount": {"name": "credit_balance_adjustment_amount", "description": "The total amount of credit balance adjustments applied to the invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "credit_memo_amount": {"name": "credit_memo_amount", "description": "The total amount of credit memos applied to the invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "default_payment_method_id": {"name": "default_payment_method_id", "description": "Identifier of the default payment method for the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "due_date": {"name": "due_date", "description": "The due date of the invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "exchange_rate": {"name": "exchange_rate", "description": "The exchange rate used to convert the invoice amount into the customer's billing account currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "exchange_rate_date": {"name": "exchange_rate_date", "description": "The date the exchange rate was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_currency": {"name": "home_currency", "description": "Home currency the customer is billed in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "includes_one_time": {"name": "includes_one_time", "description": "Specifies whether the invoice includes one-time charges.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "includes_recurring": {"name": "includes_recurring", "description": "Specifies whether the invoice includes recurring charges.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "includes_usage": {"name": "includes_usage", "description": "Specifies whether the invoice includes usage charges.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invoice_date": {"name": "invoice_date", "description": "Specifies the date on which to generate the invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invoice_number": {"name": "invoice_number", "description": "The unique identification number for the invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_email_sent_date": {"name": "last_email_sent_date", "description": "The date when the invoice was last emailed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_account_id": {"name": "parent_account_id", "description": "The id of the parent account, if the invoice is associated with a parent-child account relationship.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payment_amount": {"name": "payment_amount", "description": "The amount of payments applied to the invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payment_term": {"name": "payment_term", "description": "The name of the payment term associated with the invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "posted_by": {"name": "posted_by", "description": "The user ID of the person who moved the invoice to Posted status.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "posted_date": {"name": "posted_date", "description": "The date when the invoice was posted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "refund_amount": {"name": "refund_amount", "description": "Specifies the amount of a refund that was applied against an earlier payment on the invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sold_to_contact_id": {"name": "sold_to_contact_id", "description": "Person that you have sold your product or services to; can be the same as the bill to contact.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source": {"name": "source", "description": "The source of the invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_id": {"name": "source_id", "description": "The identifier of the value in the source field.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_type": {"name": "source_type", "description": "The type of the invoice source.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of the invoice in the system. This status is not the status of the payment of the invoice, just the status of the invoice itself.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "target_date": {"name": "target_date", "description": "The date the invoice is generated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tax_amount": {"name": "tax_amount", "description": "The total amount of the taxes applied to the invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tax_status": {"name": "tax_status", "description": "The status of tax calculation related to the invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_currency": {"name": "transaction_currency", "description": "The currency in which the invoice is billed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transferred_to_accounting": {"name": "transferred_to_accounting", "description": "Indicates whether the invoice has been transferred to the accounting system.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_by_id": {"name": "updated_by_id", "description": "Identifier of the user who last updated the invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_date": {"name": "updated_date", "description": "Last updated date for the invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Is this the most recent record of the invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "zuora_source://models/stg_zuora.yml", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1682531376.063879, "relation_name": "\"postgres\".\"zuora_integration_tests\".\"stg_zuora__invoice\"", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_zuora__invoice_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_zuora__invoice_tmp')),\n                staging_columns=get_invoice_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        id as invoice_id,\n        account_id,\n        adjustment_amount,\n        amount, \n        amount_home_currency,\n        amount_without_tax, \n        amount_without_tax_home_currency,\n        auto_pay,\n        balance,\n        bill_to_contact_id,\n        comments,\n        created_by_id,\n        created_date,\n        credit_balance_adjustment_amount,\n        credit_memo_amount,\n        default_payment_method_id,\n        due_date,\n        exchange_rate,\n        exchange_rate_date,\n        home_currency,\n        includes_one_time,\n        includes_recurring,\n        includes_usage,\n        invoice_date,\n        invoice_number,\n        last_email_sent_date,\n        parent_account_id,\n        payment_amount,\n        payment_term,\n        posted_by,\n        posted_date, \n        refund_amount, \n        sold_to_contact_id,\n        source,\n        source_id,\n        source_type,\n        status,\n        target_date,\n        tax_amount,\n        tax_status, \n        transaction_currency,\n        transferred_to_accounting,\n        updated_by_id,\n        updated_date,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [["stg_zuora__invoice_tmp"], ["stg_zuora__invoice_tmp"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.zuora_source.get_invoice_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.zuora_source.stg_zuora__invoice_tmp", "model.zuora_source.stg_zuora__invoice_tmp"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora__invoice.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"zuora_integration_tests\".\"stg_zuora__invoice_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    adjustment_amount\n    \n as \n    \n    adjustment_amount\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    amount_home_currency\n    \n as \n    \n    amount_home_currency\n    \n, \n    \n    \n    amount_without_tax\n    \n as \n    \n    amount_without_tax\n    \n, \n    \n    \n    amount_without_tax_home_currency\n    \n as \n    \n    amount_without_tax_home_currency\n    \n, \n    \n    \n    auto_pay\n    \n as \n    \n    auto_pay\n    \n, \n    \n    \n    balance\n    \n as \n    \n    balance\n    \n, \n    \n    \n    bill_to_contact_id\n    \n as \n    \n    bill_to_contact_id\n    \n, \n    \n    \n    comments\n    \n as \n    \n    comments\n    \n, \n    \n    \n    created_by_id\n    \n as \n    \n    created_by_id\n    \n, \n    \n    \n    created_date\n    \n as \n    \n    created_date\n    \n, \n    \n    \n    credit_balance_adjustment_amount\n    \n as \n    \n    credit_balance_adjustment_amount\n    \n, \n    \n    \n    credit_memo_amount\n    \n as \n    \n    credit_memo_amount\n    \n, \n    \n    \n    default_payment_method_id\n    \n as \n    \n    default_payment_method_id\n    \n, \n    \n    \n    due_date\n    \n as \n    \n    due_date\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    exchange_rate_date\n    \n as \n    \n    exchange_rate_date\n    \n, \n    \n    \n    home_currency\n    \n as \n    \n    home_currency\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    includes_one_time\n    \n as \n    \n    includes_one_time\n    \n, \n    \n    \n    includes_recurring\n    \n as \n    \n    includes_recurring\n    \n, \n    \n    \n    includes_usage\n    \n as \n    \n    includes_usage\n    \n, \n    \n    \n    invoice_date\n    \n as \n    \n    invoice_date\n    \n, \n    \n    \n    invoice_number\n    \n as \n    \n    invoice_number\n    \n, \n    \n    \n    last_email_sent_date\n    \n as \n    \n    last_email_sent_date\n    \n, \n    \n    \n    parent_account_id\n    \n as \n    \n    parent_account_id\n    \n, \n    \n    \n    payment_amount\n    \n as \n    \n    payment_amount\n    \n, \n    \n    \n    payment_term\n    \n as \n    \n    payment_term\n    \n, \n    \n    \n    posted_by\n    \n as \n    \n    posted_by\n    \n, \n    \n    \n    posted_date\n    \n as \n    \n    posted_date\n    \n, \n    \n    \n    refund_amount\n    \n as \n    \n    refund_amount\n    \n, \n    \n    \n    sold_to_contact_id\n    \n as \n    \n    sold_to_contact_id\n    \n, \n    \n    \n    source\n    \n as \n    \n    source\n    \n, \n    \n    \n    source_id\n    \n as \n    \n    source_id\n    \n, \n    \n    \n    source_type\n    \n as \n    \n    source_type\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    target_date\n    \n as \n    \n    target_date\n    \n, \n    \n    \n    tax_amount\n    \n as \n    \n    tax_amount\n    \n, \n    \n    \n    tax_status\n    \n as \n    \n    tax_status\n    \n, \n    \n    \n    template_id\n    \n as \n    \n    template_id\n    \n, \n    \n    \n    transaction_currency\n    \n as \n    \n    transaction_currency\n    \n, \n    \n    \n    transferred_to_accounting\n    \n as \n    \n    transferred_to_accounting\n    \n, \n    \n    \n    updated_by_id\n    \n as \n    \n    updated_by_id\n    \n, \n    \n    \n    updated_date\n    \n as \n    \n    updated_date\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as invoice_id,\n        account_id,\n        adjustment_amount,\n        amount, \n        amount_home_currency,\n        amount_without_tax, \n        amount_without_tax_home_currency,\n        auto_pay,\n        balance,\n        bill_to_contact_id,\n        comments,\n        created_by_id,\n        created_date,\n        credit_balance_adjustment_amount,\n        credit_memo_amount,\n        default_payment_method_id,\n        due_date,\n        exchange_rate,\n        exchange_rate_date,\n        home_currency,\n        includes_one_time,\n        includes_recurring,\n        includes_usage,\n        invoice_date,\n        invoice_number,\n        last_email_sent_date,\n        parent_account_id,\n        payment_amount,\n        payment_term,\n        posted_by,\n        posted_date, \n        refund_amount, \n        sold_to_contact_id,\n        source,\n        source_id,\n        source_type,\n        status,\n        target_date,\n        tax_amount,\n        tax_status, \n        transaction_currency,\n        transferred_to_accounting,\n        updated_by_id,\n        updated_date,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": []}, "model.zuora_source.stg_zuora__amendment": {"database": "postgres", "schema": "zuora_integration_tests", "name": "stg_zuora__amendment", "resource_type": "model", "package_name": "zuora_source", "path": "stg_zuora__amendment.sql", "original_file_path": "models/stg_zuora__amendment.sql", "unique_id": "model.zuora_source.stg_zuora__amendment", "fqn": ["zuora_source", "stg_zuora__amendment"], "alias": "stg_zuora__amendment", "checksum": {"name": "sha256", "checksum": "e0d1309008854bc10cc858c94723fb352f44b5b0a8e9e68844d3f55ffb1a1316"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "When a customer needs to make a change to a subscription, you make that change through an amendment. Common subscription changes include 'Changing the terms and conditions of a contract; add a product or update an existing product to a subscription; renew, cancel, suspend or resume a subscription.'", "columns": {"amendment_id": {"name": "amendment_id", "description": "The unique identifier of the amendment table.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "auto_renew": {"name": "auto_renew", "description": "Determines whether the subscription is automatically renewed, or whether it expires at the end of the term and needs to be manually renewed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "booking_date": {"name": "booking_date", "description": "The date when the amendment is signed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "code": {"name": "code", "description": "A unique alphanumeric string that identifies the amendment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_effective_date": {"name": "contract_effective_date", "description": "The date when the amendment's changes become effective for billing purposes.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_by_id": {"name": "created_by_id", "description": "Identifier of the user who created the amendment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_date": {"name": "created_date", "description": "Creation date for the amendment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "current_term": {"name": "current_term", "description": "The length of the period for the current subscription term.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "current_term_period_type": {"name": "current_term_period_type", "description": "The period type for the current subscription term.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_acceptance_date": {"name": "customer_acceptance_date", "description": "The date when the customer accepts the amendment's changes to the subscription.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "A description of the amendment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "effective_date": {"name": "effective_date", "description": "The date when the amendment's changes take effective. This field validates that the amendment's changes are within valid ranges of products and product rate plans.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the amendment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "new_rate_plan_id": {"name": "new_rate_plan_id", "description": "The id of the rate plan that was added to the subscription by this amendment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "removed_rate_plan_id": {"name": "removed_rate_plan_id", "description": "The id of the rate plan that was removed from the subscription by this amendment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "renewal_setting": {"name": "renewal_setting", "description": "Specifies whether a termed subscription will remain termed or change to evergreen when it is renewed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "renewal_term": {"name": "renewal_term", "description": "The term of renewal for the amended subscription.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "renewal_term_period_type": {"name": "renewal_term_period_type", "description": "The period type for the subscription renewal term.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "resume_date": {"name": "resume_date", "description": "The date when the subscription resumption takes effect.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "service_activation_date": {"name": "service_activation_date", "description": "The date when service is activated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "specific_update_date": {"name": "specific_update_date", "description": "The date when the UpdateProduct amendment takes effect.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of the amendment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subscription_id": {"name": "subscription_id", "description": "The id of the subscription that the amendment changes.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "suspend_date": {"name": "suspend_date", "description": "The date when the subscription suspension takes effect.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "term_start_date": {"name": "term_start_date", "description": "The date when the new terms and conditions take effect.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "term_type": {"name": "term_type", "description": "Indicates if the subscription is TERMED (expiration date, must be manually renewed), EVERGREEN (doesn't have expiration date, must be manually ended).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "The type of amendment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_by_id": {"name": "updated_by_id", "description": "Identifier of the user who last updated the amendment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_date": {"name": "updated_date", "description": "Last updated date for the amendment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Is this the most recent record of the amendment.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "zuora_source://models/stg_zuora.yml", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1682531376.049561, "relation_name": "\"postgres\".\"zuora_integration_tests\".\"stg_zuora__amendment\"", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_zuora__amendment_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_zuora__amendment_tmp')),\n                staging_columns=get_amendment_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        id as amendment_id,\n        auto_renew,\n        booking_date,\n        code,\n        contract_effective_date,\n        created_by_id,\n        created_date,\n        current_term,\n        current_term_period_type,\n        customer_acceptance_date,\n        description,\n        effective_date,\n        name,\n        new_rate_plan_id,\n        removed_rate_plan_id,\n        renewal_setting,\n        renewal_term,\n        renewal_term_period_type,\n        resume_date,\n        service_activation_date,\n        specific_update_date,\n        status,\n        subscription_id,\n        suspend_date,\n        term_start_date,\n        term_type,\n        type,\n        updated_by_id,\n        updated_date,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [["stg_zuora__amendment_tmp"], ["stg_zuora__amendment_tmp"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.zuora_source.get_amendment_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.zuora_source.stg_zuora__amendment_tmp", "model.zuora_source.stg_zuora__amendment_tmp"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora__amendment.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"zuora_integration_tests\".\"stg_zuora__amendment_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    auto_renew\n    \n as \n    \n    auto_renew\n    \n, \n    \n    \n    booking_date\n    \n as \n    \n    booking_date\n    \n, \n    \n    \n    code\n    \n as \n    \n    code\n    \n, \n    \n    \n    contract_effective_date\n    \n as \n    \n    contract_effective_date\n    \n, \n    \n    \n    created_by_id\n    \n as \n    \n    created_by_id\n    \n, \n    \n    \n    created_date\n    \n as \n    \n    created_date\n    \n, \n    \n    \n    current_term\n    \n as \n    \n    current_term\n    \n, \n    \n    \n    current_term_period_type\n    \n as \n    \n    current_term_period_type\n    \n, \n    \n    \n    customer_acceptance_date\n    \n as \n    \n    customer_acceptance_date\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    effective_date\n    \n as \n    \n    effective_date\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    new_rate_plan_id\n    \n as \n    \n    new_rate_plan_id\n    \n, \n    \n    \n    removed_rate_plan_id\n    \n as \n    \n    removed_rate_plan_id\n    \n, \n    \n    \n    renewal_setting\n    \n as \n    \n    renewal_setting\n    \n, \n    \n    \n    renewal_term\n    \n as \n    \n    renewal_term\n    \n, \n    \n    \n    renewal_term_period_type\n    \n as \n    \n    renewal_term_period_type\n    \n, \n    \n    \n    resume_date\n    \n as \n    \n    resume_date\n    \n, \n    \n    \n    service_activation_date\n    \n as \n    \n    service_activation_date\n    \n, \n    \n    \n    specific_update_date\n    \n as \n    \n    specific_update_date\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    subscription_id\n    \n as \n    \n    subscription_id\n    \n, \n    \n    \n    suspend_date\n    \n as \n    \n    suspend_date\n    \n, \n    \n    \n    term_start_date\n    \n as \n    \n    term_start_date\n    \n, \n    \n    \n    term_type\n    \n as \n    \n    term_type\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    updated_by_id\n    \n as \n    \n    updated_by_id\n    \n, \n    \n    \n    updated_date\n    \n as \n    \n    updated_date\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as amendment_id,\n        auto_renew,\n        booking_date,\n        code,\n        contract_effective_date,\n        created_by_id,\n        created_date,\n        current_term,\n        current_term_period_type,\n        customer_acceptance_date,\n        description,\n        effective_date,\n        name,\n        new_rate_plan_id,\n        removed_rate_plan_id,\n        renewal_setting,\n        renewal_term,\n        renewal_term_period_type,\n        resume_date,\n        service_activation_date,\n        specific_update_date,\n        status,\n        subscription_id,\n        suspend_date,\n        term_start_date,\n        term_type,\n        type,\n        updated_by_id,\n        updated_date,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": []}, "model.zuora_source.stg_zuora__order": {"database": "postgres", "schema": "zuora_integration_tests", "name": "stg_zuora__order", "resource_type": "model", "package_name": "zuora_source", "path": "stg_zuora__order.sql", "original_file_path": "models/stg_zuora__order.sql", "unique_id": "model.zuora_source.stg_zuora__order", "fqn": ["zuora_source", "stg_zuora__order"], "alias": "stg_zuora__order", "checksum": {"name": "sha256", "checksum": "3742378ada32adf8810e677b189c7d05703b22190f72efe4c3f09ff12ca86303"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Orders are contractual agreements between merchants and customers. You can create multiple subscriptions and subscription amendments at once in a single order. All the operations on subscriptions in orders are done by order actions.", "columns": {"order_id": {"name": "order_id", "description": "The unique identifier of the order table.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The id of the account associated with this order.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bill_to_contact_id": {"name": "bill_to_contact_id", "description": "The id of the contact associated with the billing address for this order.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "category": {"name": "category", "description": "The category of the order, such as NewSubscription or Amendment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_by_id": {"name": "created_by_id", "description": "The id of the user who created this order.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_date": {"name": "created_date", "description": "The date and time when this order was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "default_payment_method_id": {"name": "default_payment_method_id", "description": "The id of the default payment method used for this order.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "A brief description of this order.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "error_code": {"name": "error_code", "description": "The error code associated with this order, if any.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "error_message": {"name": "error_message", "description": "The error message associated with this order, if any.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "order_date": {"name": "order_date", "description": "The date and time when this order was placed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "order_number": {"name": "order_number", "description": "The unique identifier for this order.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "response": {"name": "response", "description": "The response associated with this order, if any.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "scheduled_date": {"name": "scheduled_date", "description": "The date and time when this order is scheduled to be processed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sold_to_contact_id": {"name": "sold_to_contact_id", "description": "The id of the contact associated with the shipping address for this order.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "state": {"name": "state", "description": "The state of this order, such as Draft or Processing.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of this order, such as Pending or Completed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_by_id": {"name": "updated_by_id", "description": "The id of the user who last updated this order.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_date": {"name": "updated_date", "description": "The date and time when this order was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Is this the most recent record of the order.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "zuora_source://models/stg_zuora.yml", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1682531376.079424, "relation_name": "\"postgres\".\"zuora_integration_tests\".\"stg_zuora__order\"", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_zuora__order_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_zuora__order_tmp')),\n                staging_columns=get_order_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        id as order_id,\n        account_id,\n        bill_to_contact_id,\n        category,\n        created_by_id,\n        created_date,\n        default_payment_method_id,\n        description,\n        error_code,\n        error_message,\n        order_date,\n        order_number,\n        response,\n        scheduled_date, \n        sold_to_contact_id,\n        state,\n        status,\n        updated_by_id,\n        updated_date,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [["stg_zuora__order_tmp"], ["stg_zuora__order_tmp"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.zuora_source.get_order_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.zuora_source.stg_zuora__order_tmp", "model.zuora_source.stg_zuora__order_tmp"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora__order.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"zuora_integration_tests\".\"stg_zuora__order_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    bill_to_contact_id\n    \n as \n    \n    bill_to_contact_id\n    \n, \n    \n    \n    category\n    \n as \n    \n    category\n    \n, \n    \n    \n    created_by_id\n    \n as \n    \n    created_by_id\n    \n, \n    \n    \n    created_date\n    \n as \n    \n    created_date\n    \n, \n    \n    \n    default_payment_method_id\n    \n as \n    \n    default_payment_method_id\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    error_code\n    \n as \n    \n    error_code\n    \n, \n    \n    \n    error_message\n    \n as \n    \n    error_message\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    order_date\n    \n as \n    \n    order_date\n    \n, \n    \n    \n    order_number\n    \n as \n    \n    order_number\n    \n, \n    \n    \n    response\n    \n as \n    \n    response\n    \n, \n    \n    \n    scheduled_date\n    \n as \n    \n    scheduled_date\n    \n, \n    \n    \n    sold_to_contact_id\n    \n as \n    \n    sold_to_contact_id\n    \n, \n    \n    \n    state\n    \n as \n    \n    state\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    updated_by_id\n    \n as \n    \n    updated_by_id\n    \n, \n    \n    \n    updated_date\n    \n as \n    \n    updated_date\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as order_id,\n        account_id,\n        bill_to_contact_id,\n        category,\n        created_by_id,\n        created_date,\n        default_payment_method_id,\n        description,\n        error_code,\n        error_message,\n        order_date,\n        order_number,\n        response,\n        scheduled_date, \n        sold_to_contact_id,\n        state,\n        status,\n        updated_by_id,\n        updated_date,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": []}, "model.zuora_source.stg_zuora__subscription": {"database": "postgres", "schema": "zuora_integration_tests", "name": "stg_zuora__subscription", "resource_type": "model", "package_name": "zuora_source", "path": "stg_zuora__subscription.sql", "original_file_path": "models/stg_zuora__subscription.sql", "unique_id": "model.zuora_source.stg_zuora__subscription", "fqn": ["zuora_source", "stg_zuora__subscription"], "alias": "stg_zuora__subscription", "checksum": {"name": "sha256", "checksum": "3478fa514b796ab6cad03d198b3cb6486c5524eb9b6b9c039da0e22421c8b270"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "A subscription is a product or service that has recurring charges, such as a monthly flat fee or charges based on usage. Subscriptions can also include one-time charges, such as activation fees. Every subscription must be associated with an account. At least one active account must exist before any subscriptions can be created.", "columns": {"subscription_id": {"name": "subscription_id", "description": "The unique identifier for the subscription.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The unique identifier for the account associated with the subscription.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "auto_renew": {"name": "auto_renew", "description": "Indicates whether the subscription is set to automatically renew at the end of the term.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bill_to_contact_id": {"name": "bill_to_contact_id", "description": "The unique identifier for the contact that will be billed for the subscription.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cancel_reason": {"name": "cancel_reason", "description": "The reason for cancelling the subscription, if applicable.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cancelled_date": {"name": "cancelled_date", "description": "The date on which the subscription was cancelled, if applicable.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_acceptance_date": {"name": "contract_acceptance_date", "description": "The date on which the contract was accepted by the customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_effective_date": {"name": "contract_effective_date", "description": "The date on which the contract became effective.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_by_id": {"name": "created_by_id", "description": "The unique identifier for the user who created the subscription.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_date": {"name": "created_date", "description": "The date on which the subscription was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "current_term": {"name": "current_term", "description": "The length of the current subscription term.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "current_term_period_type": {"name": "current_term_period_type", "description": "The unit of time for the current subscription term (e.g. \"Month\", \"Year\").", "meta": {}, "data_type": null, "quote": null, "tags": []}, "default_payment_method_id": {"name": "default_payment_method_id", "description": "The unique identifier for the default payment method associated with the subscription.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "externally_managed_by": {"name": "externally_managed_by", "description": "Indicates whether the subscription is externally managed by another system or platform.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "initial_term": {"name": "initial_term", "description": "The length of the initial subscription term.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "initial_term_period_type": {"name": "initial_term_period_type", "description": "The unit of time for the initial subscription term (e.g. \"Month\", \"Year\").", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invoice_owner_id": {"name": "invoice_owner_id", "description": "The unique identifier for the user who will receive invoice notifications for the subscription.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_invoice_separate": {"name": "is_invoice_separate", "description": "Indicates whether the subscription is invoiced separately from other subscriptions on the same account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_latest_version": {"name": "is_latest_version", "description": "Indicates whether the subscription is the latest version of the subscription on the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_booking_date": {"name": "last_booking_date", "description": "The date on which the most recent booking was created for the subscription.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the subscription.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "notes": {"name": "notes", "description": "Additional notes or comments about the subscription.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "original_created_date": {"name": "original_created_date", "description": "The date on which the original subscription was created, if the current subscription is a renewal.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "original_id": {"name": "original_id", "description": "The unique identifier for the original subscription, if the current subscription is a renewal.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_account_id": {"name": "parent_account_id", "description": "The unique identifier for the parent account associated with the subscription.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payment_term": {"name": "payment_term", "description": "The payment term associated with the subscription.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "previous_subscription_id": {"name": "previous_subscription_id", "description": "The unique identifier for the previous subscription associated with the subscription.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "renewal_term": {"name": "renewal_term", "description": "The length of the renewal subscription term.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "renewal_term_period_type": {"name": "renewal_term_period_type", "description": "The type of the renewal term for the subscription.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "revision": {"name": "revision", "description": "The revision number for the subscription.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "service_activation_date": {"name": "service_activation_date", "description": "The date the subscription was activated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sold_to_contact_id": {"name": "sold_to_contact_id", "description": "The unique identifier for the sold-to contact associated with the subscription.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of the subscription.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subscription_end_date": {"name": "subscription_end_date", "description": "The end date of the subscription.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subscription_start_date": {"name": "subscription_start_date", "description": "The start date of the subscription.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "term_end_date": {"name": "term_end_date", "description": "The end date of the subscription term.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "term_start_date": {"name": "term_start_date", "description": "The start date of the subscription term.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "term_type": {"name": "term_type", "description": "The type of subscription term.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_by_id": {"name": "updated_by_id", "description": "The unique identifier of the user who last updated the subscription.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_date": {"name": "updated_date", "description": "The date the subscription was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "version": {"name": "version", "description": "The version number of the subscription.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Is this the most recent record of the subscription.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "zuora_source://models/stg_zuora.yml", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1682531376.121878, "relation_name": "\"postgres\".\"zuora_integration_tests\".\"stg_zuora__subscription\"", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_zuora__subscription_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_zuora__subscription_tmp')),\n                staging_columns=get_subscription_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select  \n        id as subscription_id,\n        account_id,\n        auto_renew,\n        bill_to_contact_id,\n        cancel_reason,\n        cancelled_date,\n        contract_acceptance_date,\n        contract_effective_date,\n        created_by_id,\n        created_date,\n        current_term,\n        current_term_period_type, \n        default_payment_method_id,\n        externally_managed_by,\n        initial_term,\n        initial_term_period_type,\n        invoice_owner_id,\n        is_invoice_separate,\n        is_latest_version,\n        last_booking_date,\n        name,\n        notes,\n        original_created_date,\n        original_id,\n        parent_account_id,\n        payment_term,\n        previous_subscription_id,\n        renewal_term,\n        renewal_term_period_type,\n        revision,\n        service_activation_date,\n        sold_to_contact_id,\n        status,\n        subscription_end_date,\n        subscription_start_date,\n        term_end_date,\n        term_start_date,\n        term_type, \n        updated_by_id,\n        updated_date,\n        version,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n\n        {{ fivetran_utils.fill_pass_through_columns('zuora_subscription_pass_through_columns') }}\n\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [["stg_zuora__subscription_tmp"], ["stg_zuora__subscription_tmp"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.zuora_source.get_subscription_columns", "macro.fivetran_utils.fill_staging_columns", "macro.fivetran_utils.fill_pass_through_columns"], "nodes": ["model.zuora_source.stg_zuora__subscription_tmp", "model.zuora_source.stg_zuora__subscription_tmp"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora__subscription.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"zuora_integration_tests\".\"stg_zuora__subscription_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    auto_renew\n    \n as \n    \n    auto_renew\n    \n, \n    \n    \n    bill_to_contact_id\n    \n as \n    \n    bill_to_contact_id\n    \n, \n    \n    \n    cancel_reason\n    \n as \n    \n    cancel_reason\n    \n, \n    \n    \n    cancelled_date\n    \n as \n    \n    cancelled_date\n    \n, \n    \n    \n    contract_acceptance_date\n    \n as \n    \n    contract_acceptance_date\n    \n, \n    \n    \n    contract_effective_date\n    \n as \n    \n    contract_effective_date\n    \n, \n    \n    \n    created_by_id\n    \n as \n    \n    created_by_id\n    \n, \n    \n    \n    created_date\n    \n as \n    \n    created_date\n    \n, \n    \n    \n    current_term\n    \n as \n    \n    current_term\n    \n, \n    \n    \n    current_term_period_type\n    \n as \n    \n    current_term_period_type\n    \n, \n    \n    \n    default_payment_method_id\n    \n as \n    \n    default_payment_method_id\n    \n, \n    \n    \n    externally_managed_by\n    \n as \n    \n    externally_managed_by\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    initial_term\n    \n as \n    \n    initial_term\n    \n, \n    \n    \n    initial_term_period_type\n    \n as \n    \n    initial_term_period_type\n    \n, \n    \n    \n    invoice_owner_id\n    \n as \n    \n    invoice_owner_id\n    \n, \n    \n    \n    is_invoice_separate\n    \n as \n    \n    is_invoice_separate\n    \n, \n    \n    \n    is_latest_version\n    \n as \n    \n    is_latest_version\n    \n, \n    \n    \n    last_booking_date\n    \n as \n    \n    last_booking_date\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    notes\n    \n as \n    \n    notes\n    \n, \n    \n    \n    original_created_date\n    \n as \n    \n    original_created_date\n    \n, \n    \n    \n    original_id\n    \n as \n    \n    original_id\n    \n, \n    \n    \n    parent_account_id\n    \n as \n    \n    parent_account_id\n    \n, \n    \n    \n    payment_term\n    \n as \n    \n    payment_term\n    \n, \n    \n    \n    previous_subscription_id\n    \n as \n    \n    previous_subscription_id\n    \n, \n    \n    \n    renewal_setting\n    \n as \n    \n    renewal_setting\n    \n, \n    \n    \n    renewal_term\n    \n as \n    \n    renewal_term\n    \n, \n    \n    \n    renewal_term_period_type\n    \n as \n    \n    renewal_term_period_type\n    \n, \n    \n    \n    revision\n    \n as \n    \n    revision\n    \n, \n    \n    \n    service_activation_date\n    \n as \n    \n    service_activation_date\n    \n, \n    \n    \n    sold_to_contact_id\n    \n as \n    \n    sold_to_contact_id\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    subscription_end_date\n    \n as \n    \n    subscription_end_date\n    \n, \n    \n    \n    subscription_start_date\n    \n as \n    \n    subscription_start_date\n    \n, \n    \n    \n    term_end_date\n    \n as \n    \n    term_end_date\n    \n, \n    \n    \n    term_start_date\n    \n as \n    \n    term_start_date\n    \n, \n    \n    \n    term_type\n    \n as \n    \n    term_type\n    \n, \n    \n    \n    updated_by_id\n    \n as \n    \n    updated_by_id\n    \n, \n    \n    \n    updated_date\n    \n as \n    \n    updated_date\n    \n, \n    \n    \n    version\n    \n as \n    \n    version\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select  \n        id as subscription_id,\n        account_id,\n        auto_renew,\n        bill_to_contact_id,\n        cancel_reason,\n        cancelled_date,\n        contract_acceptance_date,\n        contract_effective_date,\n        created_by_id,\n        created_date,\n        current_term,\n        current_term_period_type, \n        default_payment_method_id,\n        externally_managed_by,\n        initial_term,\n        initial_term_period_type,\n        invoice_owner_id,\n        is_invoice_separate,\n        is_latest_version,\n        last_booking_date,\n        name,\n        notes,\n        original_created_date,\n        original_id,\n        parent_account_id,\n        payment_term,\n        previous_subscription_id,\n        renewal_term,\n        renewal_term_period_type,\n        revision,\n        service_activation_date,\n        sold_to_contact_id,\n        status,\n        subscription_end_date,\n        subscription_start_date,\n        term_end_date,\n        term_start_date,\n        term_type, \n        updated_by_id,\n        updated_date,\n        version,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n\n        \n\n\n\n\n\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": []}, "model.zuora_source.stg_zuora__refund_invoice_payment": {"database": "postgres", "schema": "zuora_integration_tests", "name": "stg_zuora__refund_invoice_payment", "resource_type": "model", "package_name": "zuora_source", "path": "stg_zuora__refund_invoice_payment.sql", "original_file_path": "models/stg_zuora__refund_invoice_payment.sql", "unique_id": "model.zuora_source.stg_zuora__refund_invoice_payment", "fqn": ["zuora_source", "stg_zuora__refund_invoice_payment"], "alias": "stg_zuora__refund_invoice_payment", "checksum": {"name": "sha256", "checksum": "2a46e666f0bfec021ee6aed20c0df029304c5f88787c152a66a87cf7a485799b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "This table exports information on refunds attributed to invoice payments.", "columns": {"refund_invoice_payment_id": {"name": "refund_invoice_payment_id", "description": "The unique identifier of the refund invoice payment in Zuora.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_by_id": {"name": "created_by_id", "description": "The id of the user who created the refund invoice payment in Zuora.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_date": {"name": "created_date", "description": "The date and time when the refund invoice payment was created in Zuora.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "refund_amount": {"name": "refund_amount", "description": "The amount of the refund invoice payment in the currency of the invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_by_id": {"name": "updated_by_id", "description": "The id of the user who last updated the refund invoice payment in Zuora.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_date": {"name": "updated_date", "description": "The date and time when the refund invoice payment was last updated in Zuora.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Is this the most recent record of the refund invoice payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "zuora_source://models/stg_zuora.yml", "build_path": null, "deferred": false, "unrendered_config": {"enabled": true}, "created_at": 1682531376.111854, "relation_name": "\"postgres\".\"zuora_integration_tests\".\"stg_zuora__refund_invoice_payment\"", "raw_code": "{{ config(enabled=var('zuora__using_refund_invoice_payment', true)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_zuora__refund_invoice_payment_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_zuora__refund_invoice_payment_tmp')),\n                staging_columns=get_refund_invoice_payment_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        id as refund_invoice_payment_id, \n        created_by_id,\n        created_date,\n        refund_amount,\n        updated_by_id,\n        updated_date,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [["stg_zuora__refund_invoice_payment_tmp"], ["stg_zuora__refund_invoice_payment_tmp"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.zuora_source.get_refund_invoice_payment_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.zuora_source.stg_zuora__refund_invoice_payment_tmp", "model.zuora_source.stg_zuora__refund_invoice_payment_tmp"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora__refund_invoice_payment.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"zuora_integration_tests\".\"stg_zuora__refund_invoice_payment_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    created_by_id\n    \n as \n    \n    created_by_id\n    \n, \n    \n    \n    created_date\n    \n as \n    \n    created_date\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    refund_amount\n    \n as \n    \n    refund_amount\n    \n, \n    \n    \n    updated_by_id\n    \n as \n    \n    updated_by_id\n    \n, \n    \n    \n    updated_date\n    \n as \n    \n    updated_date\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as refund_invoice_payment_id, \n        created_by_id,\n        created_date,\n        refund_amount,\n        updated_by_id,\n        updated_date,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": []}, "model.zuora_source.stg_zuora__payment_method": {"database": "postgres", "schema": "zuora_integration_tests", "name": "stg_zuora__payment_method", "resource_type": "model", "package_name": "zuora_source", "path": "stg_zuora__payment_method.sql", "original_file_path": "models/stg_zuora__payment_method.sql", "unique_id": "model.zuora_source.stg_zuora__payment_method", "fqn": ["zuora_source", "stg_zuora__payment_method"], "alias": "stg_zuora__payment_method", "checksum": {"name": "sha256", "checksum": "27e43d4f351d9596bee5bbf9cfc9fc622e5c9b9dc5252f488d1efaa417cd8a1c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "Payment methods are the ways in which customers pay for their subscriptions. Your customers can choose a payment method from your company's list of preferred payment methods.", "columns": {"payment_method_id": {"name": "payment_method_id", "description": "The unique identifier of the payment method.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The unique identifier of the account associated with this payment method.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ach_account_type": {"name": "ach_account_type", "description": "The account type for ACH payment methods.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "active": {"name": "active", "description": "A Boolean value indicating whether this payment method is active.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bank_transfer_account_type": {"name": "bank_transfer_account_type", "description": "The account type for bank transfer payment methods.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_by_id": {"name": "created_by_id", "description": "The unique identifier of the user who created this payment method.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_date": {"name": "created_date", "description": "The date and time when this payment method was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "credit_card_type": {"name": "credit_card_type", "description": "The credit card type for credit card payment methods.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_failed_sale_transaction_date": {"name": "last_failed_sale_transaction_date", "description": "The date and time when the last sale transaction failed for this payment method.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_transaction_date_time": {"name": "last_transaction_date_time", "description": "The date and time of the last transaction for this payment method.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_transaction_status": {"name": "last_transaction_status", "description": "The status of the last transaction for this payment method.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "max_consecutive_payment_failures": {"name": "max_consecutive_payment_failures", "description": "The maximum number of consecutive payment failures allowed for this payment method.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the payment method.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "num_consecutive_failures": {"name": "num_consecutive_failures", "description": "The number of consecutive payment failures for this payment method.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payment_method_status": {"name": "payment_method_status", "description": "The status of the payment method.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "paypal_type": {"name": "paypal_type", "description": "The PayPal account type for PayPal payment methods.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sub_type": {"name": "sub_type", "description": "The sub-type of the payment method.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_number_of_error_payments": {"name": "total_number_of_error_payments", "description": "The total number of error payments for this payment method.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_number_of_processed_payments": {"name": "total_number_of_processed_payments", "description": "The total number of processed payments for this payment method.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "The type of the payment method.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_by_id": {"name": "updated_by_id", "description": "The unique identifier of the user who last updated this payment method.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_date": {"name": "updated_date", "description": "The date and time when this payment method was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Is this the most recent record of the payment method.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "zuora_source://models/stg_zuora.yml", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1682531376.088447, "relation_name": "\"postgres\".\"zuora_integration_tests\".\"stg_zuora__payment_method\"", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_zuora__payment_method_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_zuora__payment_method_tmp')),\n                staging_columns=get_payment_method_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        id as payment_method_id,\n        account_id,\n        ach_account_type,\n        active,\n        bank_transfer_account_type,\n        created_by_id,\n        created_date,\n        credit_card_type,\n        last_failed_sale_transaction_date,\n        last_transaction_date_time,\n        last_transaction_status,\n        max_consecutive_payment_failures,\n        name,\n        num_consecutive_failures,\n        payment_method_status,\n        paypal_type,\n        sub_type,\n        total_number_of_error_payments,\n        total_number_of_processed_payments,\n        type,\n        updated_by_id,\n        updated_date,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [["stg_zuora__payment_method_tmp"], ["stg_zuora__payment_method_tmp"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.zuora_source.get_payment_method_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.zuora_source.stg_zuora__payment_method_tmp", "model.zuora_source.stg_zuora__payment_method_tmp"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora__payment_method.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"zuora_integration_tests\".\"stg_zuora__payment_method_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    ach_account_type\n    \n as \n    \n    ach_account_type\n    \n, \n    \n    \n    active\n    \n as \n    \n    active\n    \n, \n    \n    \n    bank_transfer_account_type\n    \n as \n    \n    bank_transfer_account_type\n    \n, \n    \n    \n    created_by_id\n    \n as \n    \n    created_by_id\n    \n, \n    \n    \n    created_date\n    \n as \n    \n    created_date\n    \n, \n    \n    \n    credit_card_type\n    \n as \n    \n    credit_card_type\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    last_failed_sale_transaction_date\n    \n as \n    \n    last_failed_sale_transaction_date\n    \n, \n    \n    \n    last_transaction_date_time\n    \n as \n    \n    last_transaction_date_time\n    \n, \n    \n    \n    last_transaction_status\n    \n as \n    \n    last_transaction_status\n    \n, \n    \n    \n    max_consecutive_payment_failures\n    \n as \n    \n    max_consecutive_payment_failures\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    num_consecutive_failures\n    \n as \n    \n    num_consecutive_failures\n    \n, \n    \n    \n    payment_method_status\n    \n as \n    \n    payment_method_status\n    \n, \n    \n    \n    paypal_type\n    \n as \n    \n    paypal_type\n    \n, \n    \n    \n    sub_type\n    \n as \n    \n    sub_type\n    \n, \n    \n    \n    total_number_of_error_payments\n    \n as \n    \n    total_number_of_error_payments\n    \n, \n    \n    \n    total_number_of_processed_payments\n    \n as \n    \n    total_number_of_processed_payments\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    updated_by_id\n    \n as \n    \n    updated_by_id\n    \n, \n    \n    \n    updated_date\n    \n as \n    \n    updated_date\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as payment_method_id,\n        account_id,\n        ach_account_type,\n        active,\n        bank_transfer_account_type,\n        created_by_id,\n        created_date,\n        credit_card_type,\n        last_failed_sale_transaction_date,\n        last_transaction_date_time,\n        last_transaction_status,\n        max_consecutive_payment_failures,\n        name,\n        num_consecutive_failures,\n        payment_method_status,\n        paypal_type,\n        sub_type,\n        total_number_of_error_payments,\n        total_number_of_processed_payments,\n        type,\n        updated_by_id,\n        updated_date,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": []}, "model.zuora_source.stg_zuora__credit_balance_adjustment": {"database": "postgres", "schema": "zuora_integration_tests", "name": "stg_zuora__credit_balance_adjustment", "resource_type": "model", "package_name": "zuora_source", "path": "stg_zuora__credit_balance_adjustment.sql", "original_file_path": "models/stg_zuora__credit_balance_adjustment.sql", "unique_id": "model.zuora_source.stg_zuora__credit_balance_adjustment", "fqn": ["zuora_source", "stg_zuora__credit_balance_adjustment"], "alias": "stg_zuora__credit_balance_adjustment", "checksum": {"name": "sha256", "checksum": "b5475c1b8a23d70a4121daa667b2c6d21cfa77f8c3584a254e472ee4078b1c18"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "An adjustment to change a customer's credit balance.  Applies adjustments to credit balances on billing accounts. This includes applying credit balance to invoices and transferring an invoice to a credit balance.", "columns": {"credit_balance_adjustment_id": {"name": "credit_balance_adjustment_id", "description": "The unique identifier of the credit balance adjustment table.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The account id of the credit balance's account. Zuora generates this value from the source transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_receivable_accounting_code_id": {"name": "account_receivable_accounting_code_id", "description": "The accounting code ID for the account receivable account to which the adjustment was made.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accounting_code": {"name": "accounting_code", "description": "The accounting code for the credit balance adjustment, maps to a bank account in the accounting system.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "adjustment_date": {"name": "adjustment_date", "description": "The date when the credit balance adjustment is applied.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "The amount of the credit balance adjustment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount_home_currency": {"name": "amount_home_currency", "description": "The amount of the adjustment in the home currency of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bill_to_contact_id": {"name": "bill_to_contact_id", "description": "Person that you would like to bill or send the invoice to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cancelled_on": {"name": "cancelled_on", "description": "Date when the credit balance adjustment was canceled.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "comment": {"name": "comment", "description": "Comments about the credit balance adjustment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_by_id": {"name": "created_by_id", "description": "Identifier of the user who created the credit balance adjustment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_date": {"name": "created_date", "description": "Creation date for the credit balance adjustment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "default_payment_method_id": {"name": "default_payment_method_id", "description": "Identifier of the default payment method for the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "exchange_rate": {"name": "exchange_rate", "description": "The exchange rate used for the adjustment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "exchange_rate_date": {"name": "exchange_rate_date", "description": "The date of the exchange rate used for the adjustment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_currency": {"name": "home_currency", "description": "Home currency the customer is billed in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invoice_id": {"name": "invoice_id", "description": "The id of the invoice associated with the adjustment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "journal_entry_id": {"name": "journal_entry_id", "description": "The id of the journal entry associated with the adjustment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "number": {"name": "number", "description": "A unique identifier for the credit balance adjustment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_account_id": {"name": "parent_account_id", "description": "The id of the parent account associated with the adjustment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reason_code": {"name": "reason_code", "description": "The reason code for the adjustment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reference_id": {"name": "reference_id", "description": "The reference id for the adjustment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sold_to_contact_id": {"name": "sold_to_contact_id", "description": "Person that you have sold your product or services to; can be the same as the bill to contact.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_transaction_id": {"name": "source_transaction_id", "description": "The id of the object that the credit balance adjustment is applied to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_transaction_number": {"name": "source_transaction_number", "description": "The number of the object that the credit balance adjustment is applied to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_transaction_type": {"name": "source_transaction_type", "description": "The source of the credit balance adjustment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of the credit balance adjustment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_currency": {"name": "transaction_currency", "description": "Transaction currency the customer is billed in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transferred_to_accounting": {"name": "transferred_to_accounting", "description": "Indicates the status of the credit balance adjustment's transfer to an external accounting system, such as Netsuite.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "Specifies if the credit balance adjustment increases or decrease the amount of the credit balance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_by_id": {"name": "updated_by_id", "description": "Identifier of the user who last updated the credit balance adjustment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_date": {"name": "updated_date", "description": "Last updated date for the credit balance adjustment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Is this the most recent record of the credit balance adjustment.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "zuora_source://models/stg_zuora.yml", "build_path": null, "deferred": false, "unrendered_config": {"enabled": true}, "created_at": 1682531376.057297, "relation_name": "\"postgres\".\"zuora_integration_tests\".\"stg_zuora__credit_balance_adjustment\"", "raw_code": "{{ config(enabled=var('zuora__using_credit_balance_adjustment', true)) }}\n\nwith base as (\n\n    select * \n    from {{ ref('stg_zuora__credit_balance_adjustment_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_zuora__credit_balance_adjustment_tmp')),\n                staging_columns=get_credit_balance_adjustment_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        id as credit_balance_adjustment_id,\n        account_id,\n        account_receivable_accounting_code_id,\n        accounting_code,\n        adjustment_date,\n        amount, \n        amount_home_currency,\n        bill_to_contact_id,\n        cancelled_on,\n        comment,\n        created_by_id,\n        created_date,\n        default_payment_method_id,\n        exchange_rate,\n        exchange_rate_date,\n        home_currency,\n        invoice_id,\n        journal_entry_id, \n        number,\n        parent_account_id, \n        reason_code,\n        reference_id,\n        sold_to_contact_id,\n        source_transaction_id,\n        source_transaction_number,\n        source_transaction_type,\n        status,\n        transaction_currency,\n        transferred_to_accounting,\n        type,\n        updated_by_id,\n        updated_date,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [["stg_zuora__credit_balance_adjustment_tmp"], ["stg_zuora__credit_balance_adjustment_tmp"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.zuora_source.get_credit_balance_adjustment_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.zuora_source.stg_zuora__credit_balance_adjustment_tmp", "model.zuora_source.stg_zuora__credit_balance_adjustment_tmp"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora__credit_balance_adjustment.sql", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"zuora_integration_tests\".\"stg_zuora__credit_balance_adjustment_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    account_receivable_accounting_code_id\n    \n as \n    \n    account_receivable_accounting_code_id\n    \n, \n    \n    \n    accounting_code\n    \n as \n    \n    accounting_code\n    \n, \n    \n    \n    adjustment_date\n    \n as \n    \n    adjustment_date\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    amount_home_currency\n    \n as \n    \n    amount_home_currency\n    \n, \n    \n    \n    bill_to_contact_id\n    \n as \n    \n    bill_to_contact_id\n    \n, \n    \n    \n    cancelled_on\n    \n as \n    \n    cancelled_on\n    \n, \n    \n    \n    comment\n    \n as \n    \n    comment\n    \n, \n    \n    \n    created_by_id\n    \n as \n    \n    created_by_id\n    \n, \n    \n    \n    created_date\n    \n as \n    \n    created_date\n    \n, \n    \n    \n    customer_cash_on_account_accounting_code_id\n    \n as \n    \n    customer_cash_on_account_accounting_code_id\n    \n, \n    \n    \n    default_payment_method_id\n    \n as \n    \n    default_payment_method_id\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    exchange_rate_date\n    \n as \n    \n    exchange_rate_date\n    \n, \n    \n    \n    home_currency\n    \n as \n    \n    home_currency\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    invoice_id\n    \n as \n    \n    invoice_id\n    \n, \n    \n    \n    journal_entry_id\n    \n as \n    \n    journal_entry_id\n    \n, \n    \n    \n    number\n    \n as \n    \n    number\n    \n, \n    \n    \n    parent_account_id\n    \n as \n    \n    parent_account_id\n    \n, \n    \n    \n    reason_code\n    \n as \n    \n    reason_code\n    \n, \n    \n    \n    reference_id\n    \n as \n    \n    reference_id\n    \n, \n    \n    \n    sold_to_contact_id\n    \n as \n    \n    sold_to_contact_id\n    \n, \n    \n    \n    source_transaction_id\n    \n as \n    \n    source_transaction_id\n    \n, \n    \n    \n    source_transaction_number\n    \n as \n    \n    source_transaction_number\n    \n, \n    \n    \n    source_transaction_type\n    \n as \n    \n    source_transaction_type\n    \n, \n    \n    \n    status\n    \n as \n    \n    status\n    \n, \n    \n    \n    transaction_currency\n    \n as \n    \n    transaction_currency\n    \n, \n    \n    \n    transferred_to_accounting\n    \n as \n    \n    transferred_to_accounting\n    \n, \n    \n    \n    type\n    \n as \n    \n    type\n    \n, \n    \n    \n    updated_by_id\n    \n as \n    \n    updated_by_id\n    \n, \n    \n    \n    updated_date\n    \n as \n    \n    updated_date\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as credit_balance_adjustment_id,\n        account_id,\n        account_receivable_accounting_code_id,\n        accounting_code,\n        adjustment_date,\n        amount, \n        amount_home_currency,\n        bill_to_contact_id,\n        cancelled_on,\n        comment,\n        created_by_id,\n        created_date,\n        default_payment_method_id,\n        exchange_rate,\n        exchange_rate_date,\n        home_currency,\n        invoice_id,\n        journal_entry_id, \n        number,\n        parent_account_id, \n        reason_code,\n        reference_id,\n        sold_to_contact_id,\n        source_transaction_id,\n        source_transaction_number,\n        source_transaction_type,\n        status,\n        transaction_currency,\n        transferred_to_accounting,\n        type,\n        updated_by_id,\n        updated_date,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": []}, "model.zuora_source.stg_zuora__invoice_payment": {"database": "postgres", "schema": "zuora_integration_tests", "name": "stg_zuora__invoice_payment", "resource_type": "model", "package_name": "zuora_source", "path": "stg_zuora__invoice_payment.sql", "original_file_path": "models/stg_zuora__invoice_payment.sql", "unique_id": "model.zuora_source.stg_zuora__invoice_payment", "fqn": ["zuora_source", "stg_zuora__invoice_payment"], "alias": "stg_zuora__invoice_payment", "checksum": {"name": "sha256", "checksum": "d16c3ce9c46ee988e4005722953fc378ff87d6a9613d7102da0d967dd33412d7"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "invoice payment details", "columns": {"invoice_payment_id": {"name": "invoice_payment_id", "description": "The unique identifier of the invoice item table.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The id of the customer account that the invoice payment is associated with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_receivable_accounting_code_id": {"name": "account_receivable_accounting_code_id", "description": "The id of the accounting code for the account receivable account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accounting_period_id": {"name": "accounting_period_id", "description": "The id of the accounting period associated with the invoice payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "The amount of the invoice payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount_currency_rounding": {"name": "amount_currency_rounding", "description": "The amount of the invoice payment after rounding to the nearest currency unit.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount_home_currency": {"name": "amount_home_currency", "description": "The amount of the invoice payment in the home currency of the customer account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bill_to_contact_id": {"name": "bill_to_contact_id", "description": "The id of the contact associated with the billing address for the invoice payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cash_accounting_code_id": {"name": "cash_accounting_code_id", "description": "The id of the accounting code for the cash account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_by_id": {"name": "created_by_id", "description": "The id of the user who created the invoice payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_date": {"name": "created_date", "description": "The date and time when the invoice payment was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "default_payment_method_id": {"name": "default_payment_method_id", "description": "The id of the default payment method for the customer account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "exchange_rate": {"name": "exchange_rate", "description": "The exchange rate used to convert the transaction currency of the invoice payment to the home currency of the customer account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "exchange_rate_date": {"name": "exchange_rate_date", "description": "The date of the exchange rate used to convert the transaction currency of the invoice payment to the home currency of the customer account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_currency": {"name": "home_currency", "description": "The home currency of the customer account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invoice_id": {"name": "invoice_id", "description": "The id of the invoice associated with the invoice payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "journal_entry_id": {"name": "journal_entry_id", "description": "The id of the journal entry created for the invoice payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "journal_run_id": {"name": "journal_run_id", "description": "The id of the journal run associated with the invoice payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_account_id": {"name": "parent_account_id", "description": "The id of the parent account for the customer account associated with the invoice payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payment_id": {"name": "payment_id", "description": "The id of the payment associated with the invoice payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payment_method_id": {"name": "payment_method_id", "description": "The id of the payment method used for the invoice payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "provider_exchange_rate_date": {"name": "provider_exchange_rate_date", "description": "The date of the exchange rate used by the payment provider to convert the transaction currency of the invoice payment to the currency of the payment provider.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "refund_amount": {"name": "refund_amount", "description": "The amount of the refund applied to the invoice payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sold_to_contact_id": {"name": "sold_to_contact_id", "description": "The id of the contact associated with the shipping address for the invoice payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_currency": {"name": "transaction_currency", "description": "The currency of the invoice payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_by_id": {"name": "updated_by_id", "description": "The id of the user who last updated the invoice payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_date": {"name": "updated_date", "description": "The date and time when the invoice payment was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Is this the most recent record of the invoice payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "zuora_source://models/stg_zuora.yml", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1682531376.076304, "relation_name": "\"postgres\".\"zuora_integration_tests\".\"stg_zuora__invoice_payment\"", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_zuora__invoice_payment_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_zuora__invoice_payment_tmp')),\n                staging_columns=get_invoice_payment_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        id as invoice_payment_id,\n        account_id,\n        account_receivable_accounting_code_id,\n        accounting_period_id,\n        amount,\n        amount_currency_rounding,\n        amount_home_currency,\n        bill_to_contact_id,\n        cash_accounting_code_id,\n        created_by_id,\n        created_date,\n        default_payment_method_id,\n        exchange_rate,\n        exchange_rate_date,\n        home_currency, \n        invoice_id,\n        journal_entry_id,\n        journal_run_id,\n        parent_account_id,\n        payment_id,\n        payment_method_id,\n        provider_exchange_rate_date,\n        refund_amount,\n        sold_to_contact_id,\n        transaction_currency,\n        updated_by_id,\n        updated_date,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [["stg_zuora__invoice_payment_tmp"], ["stg_zuora__invoice_payment_tmp"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.zuora_source.get_invoice_payment_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.zuora_source.stg_zuora__invoice_payment_tmp", "model.zuora_source.stg_zuora__invoice_payment_tmp"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora__invoice_payment.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"zuora_integration_tests\".\"stg_zuora__invoice_payment_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    account_id\n    \n as \n    \n    account_id\n    \n, \n    \n    \n    account_receivable_accounting_code_id\n    \n as \n    \n    account_receivable_accounting_code_id\n    \n, \n    \n    \n    accounting_period_id\n    \n as \n    \n    accounting_period_id\n    \n, \n    \n    \n    amount\n    \n as \n    \n    amount\n    \n, \n    \n    \n    amount_currency_rounding\n    \n as \n    \n    amount_currency_rounding\n    \n, \n    \n    \n    amount_home_currency\n    \n as \n    \n    amount_home_currency\n    \n, \n    \n    \n    bill_to_contact_id\n    \n as \n    \n    bill_to_contact_id\n    \n, \n    \n    \n    cash_accounting_code_id\n    \n as \n    \n    cash_accounting_code_id\n    \n, \n    \n    \n    created_by_id\n    \n as \n    \n    created_by_id\n    \n, \n    \n    \n    created_date\n    \n as \n    \n    created_date\n    \n, \n    \n    \n    default_payment_method_id\n    \n as \n    \n    default_payment_method_id\n    \n, \n    \n    \n    exchange_rate\n    \n as \n    \n    exchange_rate\n    \n, \n    \n    \n    exchange_rate_date\n    \n as \n    \n    exchange_rate_date\n    \n, \n    \n    \n    home_currency\n    \n as \n    \n    home_currency\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    invoice_id\n    \n as \n    \n    invoice_id\n    \n, \n    \n    \n    journal_entry_id\n    \n as \n    \n    journal_entry_id\n    \n, \n    \n    \n    journal_run_id\n    \n as \n    \n    journal_run_id\n    \n, \n    \n    \n    parent_account_id\n    \n as \n    \n    parent_account_id\n    \n, \n    \n    \n    payment_id\n    \n as \n    \n    payment_id\n    \n, \n    \n    \n    payment_method_id\n    \n as \n    \n    payment_method_id\n    \n, \n    \n    \n    provider_exchange_rate_date\n    \n as \n    \n    provider_exchange_rate_date\n    \n, \n    \n    \n    refund_amount\n    \n as \n    \n    refund_amount\n    \n, \n    \n    \n    sold_to_contact_id\n    \n as \n    \n    sold_to_contact_id\n    \n, \n    \n    \n    transaction_currency\n    \n as \n    \n    transaction_currency\n    \n, \n    \n    \n    updated_by_id\n    \n as \n    \n    updated_by_id\n    \n, \n    \n    \n    updated_date\n    \n as \n    \n    updated_date\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as invoice_payment_id,\n        account_id,\n        account_receivable_accounting_code_id,\n        accounting_period_id,\n        amount,\n        amount_currency_rounding,\n        amount_home_currency,\n        bill_to_contact_id,\n        cash_accounting_code_id,\n        created_by_id,\n        created_date,\n        default_payment_method_id,\n        exchange_rate,\n        exchange_rate_date,\n        home_currency, \n        invoice_id,\n        journal_entry_id,\n        journal_run_id,\n        parent_account_id,\n        payment_id,\n        payment_method_id,\n        provider_exchange_rate_date,\n        refund_amount,\n        sold_to_contact_id,\n        transaction_currency,\n        updated_by_id,\n        updated_date,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": []}, "model.zuora_source.stg_zuora__product_rate_plan": {"database": "postgres", "schema": "zuora_integration_tests", "name": "stg_zuora__product_rate_plan", "resource_type": "model", "package_name": "zuora_source", "path": "stg_zuora__product_rate_plan.sql", "original_file_path": "models/stg_zuora__product_rate_plan.sql", "unique_id": "model.zuora_source.stg_zuora__product_rate_plan", "fqn": ["zuora_source", "stg_zuora__product_rate_plan"], "alias": "stg_zuora__product_rate_plan", "checksum": {"name": "sha256", "checksum": "5924e5c816f684272b3a00ce2526772db6a8970eca53bb5c725c44481b8dbe8c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "A product rate plan is the part of a product that your customers subscribe to. Each product can have multiple product rate plans, and each product rate plan can have multiple product rate plan charges, which are fees for products and their product rate plans.", "columns": {"product_rate_plan_id": {"name": "product_rate_plan_id", "description": "Unique identifier of the product rate plan.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_by_id": {"name": "created_by_id", "description": "The id of the Zuora user who created the product rate plan.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_date": {"name": "created_date", "description": "The date and time when the product rate plan was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "A brief description of the product rate plan.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "effective_end_date": {"name": "effective_end_date", "description": "The date when the product rate plan will no longer be effective.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "effective_start_date": {"name": "effective_start_date", "description": "The date when the product rate plan becomes effective.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the product rate plan.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "product_id": {"name": "product_id", "description": "The id of the product that this rate plan belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_by_id": {"name": "updated_by_id", "description": "The id of the Zuora user who last updated the product rate plan.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_date": {"name": "updated_date", "description": "The date and time when the product rate plan was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_most_recent_record": {"name": "is_most_recent_record", "description": "Is this the most recent record of the product rate plan.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": "zuora_source://models/stg_zuora.yml", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1682531376.092017, "relation_name": "\"postgres\".\"zuora_integration_tests\".\"stg_zuora__product_rate_plan\"", "raw_code": "with base as (\n\n    select * \n    from {{ ref('stg_zuora__product_rate_plan_tmp') }}\n),\n\nfields as (\n\n    select\n        {{\n            fivetran_utils.fill_staging_columns(\n                source_columns=adapter.get_columns_in_relation(ref('stg_zuora__product_rate_plan_tmp')),\n                staging_columns=get_product_rate_plan_columns()\n            )\n        }}\n    from base\n),\n\nfinal as (\n    \n    select \n        id as product_rate_plan_id,\n        created_by_id,\n        created_date,\n        description,\n        effective_end_date,\n        effective_start_date, \n        name,\n        product_id, \n        updated_by_id,\n        updated_date,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n    from fields\n)\n\nselect *\nfrom final", "language": "sql", "refs": [["stg_zuora__product_rate_plan_tmp"], ["stg_zuora__product_rate_plan_tmp"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.zuora_source.get_product_rate_plan_columns", "macro.fivetran_utils.fill_staging_columns"], "nodes": ["model.zuora_source.stg_zuora__product_rate_plan_tmp", "model.zuora_source.stg_zuora__product_rate_plan_tmp"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora__product_rate_plan.sql", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"zuora_integration_tests\".\"stg_zuora__product_rate_plan_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    created_by_id\n    \n as \n    \n    created_by_id\n    \n, \n    \n    \n    created_date\n    \n as \n    \n    created_date\n    \n, \n    \n    \n    description\n    \n as \n    \n    description\n    \n, \n    \n    \n    effective_end_date\n    \n as \n    \n    effective_end_date\n    \n, \n    \n    \n    effective_start_date\n    \n as \n    \n    effective_start_date\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    name\n    \n as \n    \n    name\n    \n, \n    \n    \n    product_id\n    \n as \n    \n    product_id\n    \n, \n    \n    \n    updated_by_id\n    \n as \n    \n    updated_by_id\n    \n, \n    \n    \n    updated_date\n    \n as \n    \n    updated_date\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as product_rate_plan_id,\n        created_by_id,\n        created_date,\n        description,\n        effective_end_date,\n        effective_start_date, \n        name,\n        product_id, \n        updated_by_id,\n        updated_date,\n        row_number() over (partition by id order by updated_date desc) = 1 as is_most_recent_record\n    from fields\n)\n\nselect *\nfrom final", "extra_ctes_injected": true, "extra_ctes": []}, "model.zuora_source.stg_zuora__payment_method_tmp": {"database": "postgres", "schema": "zuora_integration_tests", "name": "stg_zuora__payment_method_tmp", "resource_type": "model", "package_name": "zuora_source", "path": "tmp/stg_zuora__payment_method_tmp.sql", "original_file_path": "models/tmp/stg_zuora__payment_method_tmp.sql", "unique_id": "model.zuora_source.stg_zuora__payment_method_tmp", "fqn": ["zuora_source", "tmp", "stg_zuora__payment_method_tmp"], "alias": "stg_zuora__payment_method_tmp", "checksum": {"name": "sha256", "checksum": "68b288ed5f0f4637ec1d4f8ed98a281f9b89235bc43b0878d14e27abf51e1f64"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1682531375.933813, "relation_name": "\"postgres\".\"zuora_integration_tests\".\"stg_zuora__payment_method_tmp\"", "raw_code": "select * \nfrom {{ var('payment_method') }}", "language": "sql", "refs": [], "sources": [["zuora", "payment_method"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.zuora_source.zuora.payment_method"]}, "compiled_path": "target/compiled/zuora_source/models/tmp/stg_zuora__payment_method_tmp.sql", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"zuora_source_integration_tests\".\"zuora_payment_method_data\"", "extra_ctes_injected": true, "extra_ctes": []}, "model.zuora_source.stg_zuora__invoice_tmp": {"database": "postgres", "schema": "zuora_integration_tests", "name": "stg_zuora__invoice_tmp", "resource_type": "model", "package_name": "zuora_source", "path": "tmp/stg_zuora__invoice_tmp.sql", "original_file_path": "models/tmp/stg_zuora__invoice_tmp.sql", "unique_id": "model.zuora_source.stg_zuora__invoice_tmp", "fqn": ["zuora_source", "tmp", "stg_zuora__invoice_tmp"], "alias": "stg_zuora__invoice_tmp", "checksum": {"name": "sha256", "checksum": "5bddac8bcff7d7a1ce4f7a27cc298c63ceabd4e12e9ba9aa6134ead42688fa01"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1682531375.9668748, "relation_name": "\"postgres\".\"zuora_integration_tests\".\"stg_zuora__invoice_tmp\"", "raw_code": "select * \nfrom {{ var('invoice') }}", "language": "sql", "refs": [], "sources": [["zuora", "invoice"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.zuora_source.zuora.invoice"]}, "compiled_path": "target/compiled/zuora_source/models/tmp/stg_zuora__invoice_tmp.sql", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"zuora_source_integration_tests\".\"zuora_invoice_data\"", "extra_ctes_injected": true, "extra_ctes": []}, "model.zuora_source.stg_zuora__rate_plan_charge_tmp": {"database": "postgres", "schema": "zuora_integration_tests", "name": "stg_zuora__rate_plan_charge_tmp", "resource_type": "model", "package_name": "zuora_source", "path": "tmp/stg_zuora__rate_plan_charge_tmp.sql", "original_file_path": "models/tmp/stg_zuora__rate_plan_charge_tmp.sql", "unique_id": "model.zuora_source.stg_zuora__rate_plan_charge_tmp", "fqn": ["zuora_source", "tmp", "stg_zuora__rate_plan_charge_tmp"], "alias": "stg_zuora__rate_plan_charge_tmp", "checksum": {"name": "sha256", "checksum": "9603d93a7448e65dc0ca368abfbd7c27df6d64b2c63a91a02863ca7c351f84d7"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1682531375.970283, "relation_name": "\"postgres\".\"zuora_integration_tests\".\"stg_zuora__rate_plan_charge_tmp\"", "raw_code": "select * \nfrom {{ var('rate_plan_charge') }}", "language": "sql", "refs": [], "sources": [["zuora", "rate_plan_charge"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.zuora_source.zuora.rate_plan_charge"]}, "compiled_path": "target/compiled/zuora_source/models/tmp/stg_zuora__rate_plan_charge_tmp.sql", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"zuora_source_integration_tests\".\"zuora_rate_plan_charge_data\"", "extra_ctes_injected": true, "extra_ctes": []}, "model.zuora_source.stg_zuora__invoice_item_tmp": {"database": "postgres", "schema": "zuora_integration_tests", "name": "stg_zuora__invoice_item_tmp", "resource_type": "model", "package_name": "zuora_source", "path": "tmp/stg_zuora__invoice_item_tmp.sql", "original_file_path": "models/tmp/stg_zuora__invoice_item_tmp.sql", "unique_id": "model.zuora_source.stg_zuora__invoice_item_tmp", "fqn": ["zuora_source", "tmp", "stg_zuora__invoice_item_tmp"], "alias": "stg_zuora__invoice_item_tmp", "checksum": {"name": "sha256", "checksum": "ab22b8d57c8bcce72c522ec9bf48381061995eed58eb228055156073f2db6685"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1682531375.973759, "relation_name": "\"postgres\".\"zuora_integration_tests\".\"stg_zuora__invoice_item_tmp\"", "raw_code": "select * \nfrom {{ var('invoice_item') }}", "language": "sql", "refs": [], "sources": [["zuora", "invoice_item"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.zuora_source.zuora.invoice_item"]}, "compiled_path": "target/compiled/zuora_source/models/tmp/stg_zuora__invoice_item_tmp.sql", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"zuora_source_integration_tests\".\"zuora_invoice_item_data\"", "extra_ctes_injected": true, "extra_ctes": []}, "model.zuora_source.stg_zuora__contact_tmp": {"database": "postgres", "schema": "zuora_integration_tests", "name": "stg_zuora__contact_tmp", "resource_type": "model", "package_name": "zuora_source", "path": "tmp/stg_zuora__contact_tmp.sql", "original_file_path": "models/tmp/stg_zuora__contact_tmp.sql", "unique_id": "model.zuora_source.stg_zuora__contact_tmp", "fqn": ["zuora_source", "tmp", "stg_zuora__contact_tmp"], "alias": "stg_zuora__contact_tmp", "checksum": {"name": "sha256", "checksum": "1a28b8fecea9f5fdd5262aebfed0ac56b0d1ab5787181eafeed6141c08cdf154"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1682531375.976795, "relation_name": "\"postgres\".\"zuora_integration_tests\".\"stg_zuora__contact_tmp\"", "raw_code": "select * \nfrom {{ var('contact') }}", "language": "sql", "refs": [], "sources": [["zuora", "contact"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.zuora_source.zuora.contact"]}, "compiled_path": "target/compiled/zuora_source/models/tmp/stg_zuora__contact_tmp.sql", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"zuora_source_integration_tests\".\"zuora_contact_data\"", "extra_ctes_injected": true, "extra_ctes": []}, "model.zuora_source.stg_zuora__rate_plan_tmp": {"database": "postgres", "schema": "zuora_integration_tests", "name": "stg_zuora__rate_plan_tmp", "resource_type": "model", "package_name": "zuora_source", "path": "tmp/stg_zuora__rate_plan_tmp.sql", "original_file_path": "models/tmp/stg_zuora__rate_plan_tmp.sql", "unique_id": "model.zuora_source.stg_zuora__rate_plan_tmp", "fqn": ["zuora_source", "tmp", "stg_zuora__rate_plan_tmp"], "alias": "stg_zuora__rate_plan_tmp", "checksum": {"name": "sha256", "checksum": "c63bddaaf19928573f45bc26fe9798c73f8e318f3175b018fa723fc702ed1778"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1682531375.980057, "relation_name": "\"postgres\".\"zuora_integration_tests\".\"stg_zuora__rate_plan_tmp\"", "raw_code": "select * \nfrom {{ var('rate_plan') }}", "language": "sql", "refs": [], "sources": [["zuora", "rate_plan"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.zuora_source.zuora.rate_plan"]}, "compiled_path": "target/compiled/zuora_source/models/tmp/stg_zuora__rate_plan_tmp.sql", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"zuora_source_integration_tests\".\"zuora_rate_plan_data\"", "extra_ctes_injected": true, "extra_ctes": []}, "model.zuora_source.stg_zuora__refund_tmp": {"database": "postgres", "schema": "zuora_integration_tests", "name": "stg_zuora__refund_tmp", "resource_type": "model", "package_name": "zuora_source", "path": "tmp/stg_zuora__refund_tmp.sql", "original_file_path": "models/tmp/stg_zuora__refund_tmp.sql", "unique_id": "model.zuora_source.stg_zuora__refund_tmp", "fqn": ["zuora_source", "tmp", "stg_zuora__refund_tmp"], "alias": "stg_zuora__refund_tmp", "checksum": {"name": "sha256", "checksum": "d70890064c60dfb335f2d90042bb8dd47bc44e8e2b474ef57467d578aaebeca5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"enabled": true}, "created_at": 1682531375.983058, "relation_name": "\"postgres\".\"zuora_integration_tests\".\"stg_zuora__refund_tmp\"", "raw_code": "{{ config(enabled=var('zuora__using_refund', true)) }}\n\nselect * \nfrom {{ var('refund') }}", "language": "sql", "refs": [], "sources": [["zuora", "refund"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.zuora_source.zuora.refund"]}, "compiled_path": "target/compiled/zuora_source/models/tmp/stg_zuora__refund_tmp.sql", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"zuora_source_integration_tests\".\"zuora_refund_data\"", "extra_ctes_injected": true, "extra_ctes": []}, "model.zuora_source.stg_zuora__account_tmp": {"database": "postgres", "schema": "zuora_integration_tests", "name": "stg_zuora__account_tmp", "resource_type": "model", "package_name": "zuora_source", "path": "tmp/stg_zuora__account_tmp.sql", "original_file_path": "models/tmp/stg_zuora__account_tmp.sql", "unique_id": "model.zuora_source.stg_zuora__account_tmp", "fqn": ["zuora_source", "tmp", "stg_zuora__account_tmp"], "alias": "stg_zuora__account_tmp", "checksum": {"name": "sha256", "checksum": "65d91bea814a8fa9236262f541df37114ffb0b4bd26de5635630d10926bfd277"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1682531375.9876149, "relation_name": "\"postgres\".\"zuora_integration_tests\".\"stg_zuora__account_tmp\"", "raw_code": "select * \nfrom {{ var('account') }}", "language": "sql", "refs": [], "sources": [["zuora", "account"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.zuora_source.zuora.account"]}, "compiled_path": "target/compiled/zuora_source/models/tmp/stg_zuora__account_tmp.sql", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"zuora_source_integration_tests\".\"zuora_account_data\"", "extra_ctes_injected": true, "extra_ctes": []}, "model.zuora_source.stg_zuora__product_rate_plan_tmp": {"database": "postgres", "schema": "zuora_integration_tests", "name": "stg_zuora__product_rate_plan_tmp", "resource_type": "model", "package_name": "zuora_source", "path": "tmp/stg_zuora__product_rate_plan_tmp.sql", "original_file_path": "models/tmp/stg_zuora__product_rate_plan_tmp.sql", "unique_id": "model.zuora_source.stg_zuora__product_rate_plan_tmp", "fqn": ["zuora_source", "tmp", "stg_zuora__product_rate_plan_tmp"], "alias": "stg_zuora__product_rate_plan_tmp", "checksum": {"name": "sha256", "checksum": "0da70e7bd9e20e0923e5532bcafe3ee44897ed7ad4b17d2c8b300c0114d15e30"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1682531375.990557, "relation_name": "\"postgres\".\"zuora_integration_tests\".\"stg_zuora__product_rate_plan_tmp\"", "raw_code": "select * \nfrom {{ var('product_rate_plan') }}", "language": "sql", "refs": [], "sources": [["zuora", "product_rate_plan"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.zuora_source.zuora.product_rate_plan"]}, "compiled_path": "target/compiled/zuora_source/models/tmp/stg_zuora__product_rate_plan_tmp.sql", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"zuora_source_integration_tests\".\"zuora_product_rate_plan_data\"", "extra_ctes_injected": true, "extra_ctes": []}, "model.zuora_source.stg_zuora__credit_balance_adjustment_tmp": {"database": "postgres", "schema": "zuora_integration_tests", "name": "stg_zuora__credit_balance_adjustment_tmp", "resource_type": "model", "package_name": "zuora_source", "path": "tmp/stg_zuora__credit_balance_adjustment_tmp.sql", "original_file_path": "models/tmp/stg_zuora__credit_balance_adjustment_tmp.sql", "unique_id": "model.zuora_source.stg_zuora__credit_balance_adjustment_tmp", "fqn": ["zuora_source", "tmp", "stg_zuora__credit_balance_adjustment_tmp"], "alias": "stg_zuora__credit_balance_adjustment_tmp", "checksum": {"name": "sha256", "checksum": "5e0c407d6d46afdea6dcf7a2cd7124e27762b5442303f7f404a8962c144522a6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1682531375.993224, "relation_name": "\"postgres\".\"zuora_integration_tests\".\"stg_zuora__credit_balance_adjustment_tmp\"", "raw_code": "select * \nfrom {{ var('credit_balance_adjustment') }}", "language": "sql", "refs": [], "sources": [["zuora", "credit_balance_adjustment"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.zuora_source.zuora.credit_balance_adjustment"]}, "compiled_path": "target/compiled/zuora_source/models/tmp/stg_zuora__credit_balance_adjustment_tmp.sql", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"zuora_source_integration_tests\".\"zuora_credit_balance_adjustment_data\"", "extra_ctes_injected": true, "extra_ctes": []}, "model.zuora_source.stg_zuora__taxation_item_tmp": {"database": "postgres", "schema": "zuora_integration_tests", "name": "stg_zuora__taxation_item_tmp", "resource_type": "model", "package_name": "zuora_source", "path": "tmp/stg_zuora__taxation_item_tmp.sql", "original_file_path": "models/tmp/stg_zuora__taxation_item_tmp.sql", "unique_id": "model.zuora_source.stg_zuora__taxation_item_tmp", "fqn": ["zuora_source", "tmp", "stg_zuora__taxation_item_tmp"], "alias": "stg_zuora__taxation_item_tmp", "checksum": {"name": "sha256", "checksum": "0ef306a7370cd5ae73aa2d883b22679a6448710185f94985817f667b0b6a3346"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"enabled": true}, "created_at": 1682531375.996521, "relation_name": "\"postgres\".\"zuora_integration_tests\".\"stg_zuora__taxation_item_tmp\"", "raw_code": "{{ config(enabled=var('zuora__using_taxation_item', true)) }}\n\nselect * \nfrom {{ var('taxation_item') }}", "language": "sql", "refs": [], "sources": [["zuora", "taxation_item"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.zuora_source.zuora.taxation_item"]}, "compiled_path": "target/compiled/zuora_source/models/tmp/stg_zuora__taxation_item_tmp.sql", "compiled": true, "compiled_code": "\n\nselect * \nfrom \"postgres\".\"zuora_source_integration_tests\".\"zuora_taxation_item_data\"", "extra_ctes_injected": true, "extra_ctes": []}, "model.zuora_source.stg_zuora__subscription_tmp": {"database": "postgres", "schema": "zuora_integration_tests", "name": "stg_zuora__subscription_tmp", "resource_type": "model", "package_name": "zuora_source", "path": "tmp/stg_zuora__subscription_tmp.sql", "original_file_path": "models/tmp/stg_zuora__subscription_tmp.sql", "unique_id": "model.zuora_source.stg_zuora__subscription_tmp", "fqn": ["zuora_source", "tmp", "stg_zuora__subscription_tmp"], "alias": "stg_zuora__subscription_tmp", "checksum": {"name": "sha256", "checksum": "19d8418184c31d7396a4d6a0658e0611633be3ce981249e4691b401cfe992bd2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1682531375.9998322, "relation_name": "\"postgres\".\"zuora_integration_tests\".\"stg_zuora__subscription_tmp\"", "raw_code": "select * \nfrom {{ var('subscription') }}", "language": "sql", "refs": [], "sources": [["zuora", "subscription"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.zuora_source.zuora.subscription"]}, "compiled_path": "target/compiled/zuora_source/models/tmp/stg_zuora__subscription_tmp.sql", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"zuora_source_integration_tests\".\"zuora_subscription_data\"", "extra_ctes_injected": true, "extra_ctes": []}, "model.zuora_source.stg_zuora__product_tmp": {"database": "postgres", "schema": "zuora_integration_tests", "name": "stg_zuora__product_tmp", "resource_type": "model", "package_name": "zuora_source", "path": "tmp/stg_zuora__product_tmp.sql", "original_file_path": "models/tmp/stg_zuora__product_tmp.sql", "unique_id": "model.zuora_source.stg_zuora__product_tmp", "fqn": ["zuora_source", "tmp", "stg_zuora__product_tmp"], "alias": "stg_zuora__product_tmp", "checksum": {"name": "sha256", "checksum": "52e234769f980a0dde810968908f28560f8d3adb40e7796f41efa35914ea49d4"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1682531376.0025349, "relation_name": "\"postgres\".\"zuora_integration_tests\".\"stg_zuora__product_tmp\"", "raw_code": "select * \nfrom {{ var('product') }}", "language": "sql", "refs": [], "sources": [["zuora", "product"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.zuora_source.zuora.product"]}, "compiled_path": "target/compiled/zuora_source/models/tmp/stg_zuora__product_tmp.sql", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"zuora_source_integration_tests\".\"zuora_product_data\"", "extra_ctes_injected": true, "extra_ctes": []}, "model.zuora_source.stg_zuora__order_tmp": {"database": "postgres", "schema": "zuora_integration_tests", "name": "stg_zuora__order_tmp", "resource_type": "model", "package_name": "zuora_source", "path": "tmp/stg_zuora__order_tmp.sql", "original_file_path": "models/tmp/stg_zuora__order_tmp.sql", "unique_id": "model.zuora_source.stg_zuora__order_tmp", "fqn": ["zuora_source", "tmp", "stg_zuora__order_tmp"], "alias": "stg_zuora__order_tmp", "checksum": {"name": "sha256", "checksum": "c3dc49473ee81422658179b637393471f3a55b91b5cbfcf0efae148209086dec"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1682531376.007157, "relation_name": "\"postgres\".\"zuora_integration_tests\".\"stg_zuora__order_tmp\"", "raw_code": "select * \nfrom {{ var('order') }}", "language": "sql", "refs": [], "sources": [["zuora", "order"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.zuora_source.zuora.order"]}, "compiled_path": "target/compiled/zuora_source/models/tmp/stg_zuora__order_tmp.sql", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"zuora_source_integration_tests\".\"zuora_order_data\"", "extra_ctes_injected": true, "extra_ctes": []}, "model.zuora_source.stg_zuora__amendment_tmp": {"database": "postgres", "schema": "zuora_integration_tests", "name": "stg_zuora__amendment_tmp", "resource_type": "model", "package_name": "zuora_source", "path": "tmp/stg_zuora__amendment_tmp.sql", "original_file_path": "models/tmp/stg_zuora__amendment_tmp.sql", "unique_id": "model.zuora_source.stg_zuora__amendment_tmp", "fqn": ["zuora_source", "tmp", "stg_zuora__amendment_tmp"], "alias": "stg_zuora__amendment_tmp", "checksum": {"name": "sha256", "checksum": "175d6fe18ccea5a5215cd146262d9a9eeae99a941b2583ae6b0c307e975fc37b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1682531376.0100439, "relation_name": "\"postgres\".\"zuora_integration_tests\".\"stg_zuora__amendment_tmp\"", "raw_code": "select * \nfrom {{ var('amendment') }}", "language": "sql", "refs": [], "sources": [["zuora", "amendment"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.zuora_source.zuora.amendment"]}, "compiled_path": "target/compiled/zuora_source/models/tmp/stg_zuora__amendment_tmp.sql", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"zuora_source_integration_tests\".\"zuora_amendment_data\"", "extra_ctes_injected": true, "extra_ctes": []}, "model.zuora_source.stg_zuora__invoice_payment_tmp": {"database": "postgres", "schema": "zuora_integration_tests", "name": "stg_zuora__invoice_payment_tmp", "resource_type": "model", "package_name": "zuora_source", "path": "tmp/stg_zuora__invoice_payment_tmp.sql", "original_file_path": "models/tmp/stg_zuora__invoice_payment_tmp.sql", "unique_id": "model.zuora_source.stg_zuora__invoice_payment_tmp", "fqn": ["zuora_source", "tmp", "stg_zuora__invoice_payment_tmp"], "alias": "stg_zuora__invoice_payment_tmp", "checksum": {"name": "sha256", "checksum": "f866c32fc22d0b5fad070cf842f7b6751e939f4cf1e3a00c2db92a07a5b3ffe6"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1682531376.0129762, "relation_name": "\"postgres\".\"zuora_integration_tests\".\"stg_zuora__invoice_payment_tmp\"", "raw_code": "select * \nfrom {{ var('invoice_payment') }}", "language": "sql", "refs": [], "sources": [["zuora", "invoice_payment"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.zuora_source.zuora.invoice_payment"]}, "compiled_path": "target/compiled/zuora_source/models/tmp/stg_zuora__invoice_payment_tmp.sql", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"zuora_source_integration_tests\".\"zuora_invoice_payment_data\"", "extra_ctes_injected": true, "extra_ctes": []}, "model.zuora_source.stg_zuora__product_rate_plan_charge_tmp": {"database": "postgres", "schema": "zuora_integration_tests", "name": "stg_zuora__product_rate_plan_charge_tmp", "resource_type": "model", "package_name": "zuora_source", "path": "tmp/stg_zuora__product_rate_plan_charge_tmp.sql", "original_file_path": "models/tmp/stg_zuora__product_rate_plan_charge_tmp.sql", "unique_id": "model.zuora_source.stg_zuora__product_rate_plan_charge_tmp", "fqn": ["zuora_source", "tmp", "stg_zuora__product_rate_plan_charge_tmp"], "alias": "stg_zuora__product_rate_plan_charge_tmp", "checksum": {"name": "sha256", "checksum": "945236e66ab1123d241ef3ce53bfa83e87a4e3a0562975932ffbbac33d499748"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1682531376.0165188, "relation_name": "\"postgres\".\"zuora_integration_tests\".\"stg_zuora__product_rate_plan_charge_tmp\"", "raw_code": "select * \nfrom {{ var('product_rate_plan_charge') }}", "language": "sql", "refs": [], "sources": [["zuora", "product_rate_plan_charge"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.zuora_source.zuora.product_rate_plan_charge"]}, "compiled_path": "target/compiled/zuora_source/models/tmp/stg_zuora__product_rate_plan_charge_tmp.sql", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"zuora_source_integration_tests\".\"zuora_product_rate_plan_charge_data\"", "extra_ctes_injected": true, "extra_ctes": []}, "model.zuora_source.stg_zuora__refund_invoice_payment_tmp": {"database": "postgres", "schema": "zuora_integration_tests", "name": "stg_zuora__refund_invoice_payment_tmp", "resource_type": "model", "package_name": "zuora_source", "path": "tmp/stg_zuora__refund_invoice_payment_tmp.sql", "original_file_path": "models/tmp/stg_zuora__refund_invoice_payment_tmp.sql", "unique_id": "model.zuora_source.stg_zuora__refund_invoice_payment_tmp", "fqn": ["zuora_source", "tmp", "stg_zuora__refund_invoice_payment_tmp"], "alias": "stg_zuora__refund_invoice_payment_tmp", "checksum": {"name": "sha256", "checksum": "cb31821cb5c411c4284427453fcb5c081cf02ab6d59e6a14b4bd4ce2d681a6dc"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1682531376.0201678, "relation_name": "\"postgres\".\"zuora_integration_tests\".\"stg_zuora__refund_invoice_payment_tmp\"", "raw_code": "select * \nfrom {{ var('refund_invoice_payment') }}", "language": "sql", "refs": [], "sources": [["zuora", "refund_invoice_payment"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.zuora_source.zuora.refund_invoice_payment"]}, "compiled_path": "target/compiled/zuora_source/models/tmp/stg_zuora__refund_invoice_payment_tmp.sql", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"zuora_source_integration_tests\".\"zuora_refund_invoice_payment_data\"", "extra_ctes_injected": true, "extra_ctes": []}, "model.zuora_source.stg_zuora__payment_tmp": {"database": "postgres", "schema": "zuora_integration_tests", "name": "stg_zuora__payment_tmp", "resource_type": "model", "package_name": "zuora_source", "path": "tmp/stg_zuora__payment_tmp.sql", "original_file_path": "models/tmp/stg_zuora__payment_tmp.sql", "unique_id": "model.zuora_source.stg_zuora__payment_tmp", "fqn": ["zuora_source", "tmp", "stg_zuora__payment_tmp"], "alias": "stg_zuora__payment_tmp", "checksum": {"name": "sha256", "checksum": "3f37a858223024ac92008436da43abda3c528d0cbf8ef86b728100042dd9c6a3"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "post-hook": [], "pre-hook": []}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1682531376.023506, "relation_name": "\"postgres\".\"zuora_integration_tests\".\"stg_zuora__payment_tmp\"", "raw_code": "select * \nfrom {{ var('payment') }}", "language": "sql", "refs": [], "sources": [["zuora", "payment"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.zuora_source.zuora.payment"]}, "compiled_path": "target/compiled/zuora_source/models/tmp/stg_zuora__payment_tmp.sql", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"zuora_source_integration_tests\".\"zuora_payment_data\"", "extra_ctes_injected": true, "extra_ctes": []}, "test.zuora_source.unique_stg_zuora__account_account_id.48b1eab20d": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "account_id", "model": "{{ get_where_subquery(ref('stg_zuora__account')) }}"}, "namespace": null}, "database": "postgres", "schema": "zuora_integration_tests_dbt_test__audit", "name": "unique_stg_zuora__account_account_id", "resource_type": "test", "package_name": "zuora_source", "path": "unique_stg_zuora__account_account_id.sql", "original_file_path": "models/stg_zuora.yml", "unique_id": "test.zuora_source.unique_stg_zuora__account_account_id.48b1eab20d", "fqn": ["zuora_source", "unique_stg_zuora__account_account_id"], "alias": "unique_stg_zuora__account_account_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1682531376.132951, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_zuora__account"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.zuora_source.stg_zuora__account"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora.yml/unique_stg_zuora__account_account_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    account_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zuora_integration_tests\".\"stg_zuora__account\"\nwhere account_id is not null\ngroup by account_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "account_id", "file_key_name": "models.stg_zuora__account"}, "test.zuora_source.not_null_stg_zuora__account_account_id.fbbdb7cb1f": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "account_id", "model": "{{ get_where_subquery(ref('stg_zuora__account')) }}"}, "namespace": null}, "database": "postgres", "schema": "zuora_integration_tests_dbt_test__audit", "name": "not_null_stg_zuora__account_account_id", "resource_type": "test", "package_name": "zuora_source", "path": "not_null_stg_zuora__account_account_id.sql", "original_file_path": "models/stg_zuora.yml", "unique_id": "test.zuora_source.not_null_stg_zuora__account_account_id.fbbdb7cb1f", "fqn": ["zuora_source", "not_null_stg_zuora__account_account_id"], "alias": "not_null_stg_zuora__account_account_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1682531376.134033, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_zuora__account"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.zuora_source.stg_zuora__account"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora.yml/not_null_stg_zuora__account_account_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect account_id\nfrom \"postgres\".\"zuora_integration_tests\".\"stg_zuora__account\"\nwhere account_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "account_id", "file_key_name": "models.stg_zuora__account"}, "test.zuora_source.unique_stg_zuora__amendment_amendment_id.1adf35b9b3": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "amendment_id", "model": "{{ get_where_subquery(ref('stg_zuora__amendment')) }}"}, "namespace": null}, "database": "postgres", "schema": "zuora_integration_tests_dbt_test__audit", "name": "unique_stg_zuora__amendment_amendment_id", "resource_type": "test", "package_name": "zuora_source", "path": "unique_stg_zuora__amendment_amendment_id.sql", "original_file_path": "models/stg_zuora.yml", "unique_id": "test.zuora_source.unique_stg_zuora__amendment_amendment_id.1adf35b9b3", "fqn": ["zuora_source", "unique_stg_zuora__amendment_amendment_id"], "alias": "unique_stg_zuora__amendment_amendment_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1682531376.135234, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_zuora__amendment"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.zuora_source.stg_zuora__amendment"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora.yml/unique_stg_zuora__amendment_amendment_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    amendment_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zuora_integration_tests\".\"stg_zuora__amendment\"\nwhere amendment_id is not null\ngroup by amendment_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "amendment_id", "file_key_name": "models.stg_zuora__amendment"}, "test.zuora_source.not_null_stg_zuora__amendment_amendment_id.d5dfc9f72e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "amendment_id", "model": "{{ get_where_subquery(ref('stg_zuora__amendment')) }}"}, "namespace": null}, "database": "postgres", "schema": "zuora_integration_tests_dbt_test__audit", "name": "not_null_stg_zuora__amendment_amendment_id", "resource_type": "test", "package_name": "zuora_source", "path": "not_null_stg_zuora__amendment_amendment_id.sql", "original_file_path": "models/stg_zuora.yml", "unique_id": "test.zuora_source.not_null_stg_zuora__amendment_amendment_id.d5dfc9f72e", "fqn": ["zuora_source", "not_null_stg_zuora__amendment_amendment_id"], "alias": "not_null_stg_zuora__amendment_amendment_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1682531376.1361248, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_zuora__amendment"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.zuora_source.stg_zuora__amendment"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora.yml/not_null_stg_zuora__amendment_amendment_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect amendment_id\nfrom \"postgres\".\"zuora_integration_tests\".\"stg_zuora__amendment\"\nwhere amendment_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "amendment_id", "file_key_name": "models.stg_zuora__amendment"}, "test.zuora_source.unique_stg_zuora__contact_contact_id.55e4bbceda": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "contact_id", "model": "{{ get_where_subquery(ref('stg_zuora__contact')) }}"}, "namespace": null}, "database": "postgres", "schema": "zuora_integration_tests_dbt_test__audit", "name": "unique_stg_zuora__contact_contact_id", "resource_type": "test", "package_name": "zuora_source", "path": "unique_stg_zuora__contact_contact_id.sql", "original_file_path": "models/stg_zuora.yml", "unique_id": "test.zuora_source.unique_stg_zuora__contact_contact_id.55e4bbceda", "fqn": ["zuora_source", "unique_stg_zuora__contact_contact_id"], "alias": "unique_stg_zuora__contact_contact_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1682531376.137153, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_zuora__contact"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.zuora_source.stg_zuora__contact"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora.yml/unique_stg_zuora__contact_contact_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    contact_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zuora_integration_tests\".\"stg_zuora__contact\"\nwhere contact_id is not null\ngroup by contact_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "contact_id", "file_key_name": "models.stg_zuora__contact"}, "test.zuora_source.not_null_stg_zuora__contact_contact_id.825f7a5ab6": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "contact_id", "model": "{{ get_where_subquery(ref('stg_zuora__contact')) }}"}, "namespace": null}, "database": "postgres", "schema": "zuora_integration_tests_dbt_test__audit", "name": "not_null_stg_zuora__contact_contact_id", "resource_type": "test", "package_name": "zuora_source", "path": "not_null_stg_zuora__contact_contact_id.sql", "original_file_path": "models/stg_zuora.yml", "unique_id": "test.zuora_source.not_null_stg_zuora__contact_contact_id.825f7a5ab6", "fqn": ["zuora_source", "not_null_stg_zuora__contact_contact_id"], "alias": "not_null_stg_zuora__contact_contact_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1682531376.138001, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_zuora__contact"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.zuora_source.stg_zuora__contact"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora.yml/not_null_stg_zuora__contact_contact_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect contact_id\nfrom \"postgres\".\"zuora_integration_tests\".\"stg_zuora__contact\"\nwhere contact_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "contact_id", "file_key_name": "models.stg_zuora__contact"}, "test.zuora_source.unique_stg_zuora__credit_balance_adjustment_credit_balance_adjustment_id.48dcd90757": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "credit_balance_adjustment_id", "model": "{{ get_where_subquery(ref('stg_zuora__credit_balance_adjustment')) }}"}, "namespace": null}, "database": "postgres", "schema": "zuora_integration_tests_dbt_test__audit", "name": "unique_stg_zuora__credit_balance_adjustment_credit_balance_adjustment_id", "resource_type": "test", "package_name": "zuora_source", "path": "unique_stg_zuora__credit_balan_300f0e417893c7cb38f76d8c8a4c89a6.sql", "original_file_path": "models/stg_zuora.yml", "unique_id": "test.zuora_source.unique_stg_zuora__credit_balance_adjustment_credit_balance_adjustment_id.48dcd90757", "fqn": ["zuora_source", "unique_stg_zuora__credit_balance_adjustment_credit_balance_adjustment_id"], "alias": "unique_stg_zuora__credit_balan_300f0e417893c7cb38f76d8c8a4c89a6", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "unique_stg_zuora__credit_balan_300f0e417893c7cb38f76d8c8a4c89a6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "unique_stg_zuora__credit_balan_300f0e417893c7cb38f76d8c8a4c89a6"}, "created_at": 1682531376.138846, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_stg_zuora__credit_balan_300f0e417893c7cb38f76d8c8a4c89a6\") }}", "language": "sql", "refs": [["stg_zuora__credit_balance_adjustment"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.zuora_source.stg_zuora__credit_balance_adjustment"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora.yml/unique_stg_zuora__credit_balan_300f0e417893c7cb38f76d8c8a4c89a6.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    credit_balance_adjustment_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zuora_integration_tests\".\"stg_zuora__credit_balance_adjustment\"\nwhere credit_balance_adjustment_id is not null\ngroup by credit_balance_adjustment_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "credit_balance_adjustment_id", "file_key_name": "models.stg_zuora__credit_balance_adjustment"}, "test.zuora_source.not_null_stg_zuora__credit_balance_adjustment_credit_balance_adjustment_id.b7d154ddd5": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "credit_balance_adjustment_id", "model": "{{ get_where_subquery(ref('stg_zuora__credit_balance_adjustment')) }}"}, "namespace": null}, "database": "postgres", "schema": "zuora_integration_tests_dbt_test__audit", "name": "not_null_stg_zuora__credit_balance_adjustment_credit_balance_adjustment_id", "resource_type": "test", "package_name": "zuora_source", "path": "not_null_stg_zuora__credit_bal_d92ee4a3d9478d91301432c8d7d61856.sql", "original_file_path": "models/stg_zuora.yml", "unique_id": "test.zuora_source.not_null_stg_zuora__credit_balance_adjustment_credit_balance_adjustment_id.b7d154ddd5", "fqn": ["zuora_source", "not_null_stg_zuora__credit_balance_adjustment_credit_balance_adjustment_id"], "alias": "not_null_stg_zuora__credit_bal_d92ee4a3d9478d91301432c8d7d61856", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_stg_zuora__credit_bal_d92ee4a3d9478d91301432c8d7d61856", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_stg_zuora__credit_bal_d92ee4a3d9478d91301432c8d7d61856"}, "created_at": 1682531376.1397069, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_zuora__credit_bal_d92ee4a3d9478d91301432c8d7d61856\") }}", "language": "sql", "refs": [["stg_zuora__credit_balance_adjustment"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.zuora_source.stg_zuora__credit_balance_adjustment"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora.yml/not_null_stg_zuora__credit_bal_d92ee4a3d9478d91301432c8d7d61856.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect credit_balance_adjustment_id\nfrom \"postgres\".\"zuora_integration_tests\".\"stg_zuora__credit_balance_adjustment\"\nwhere credit_balance_adjustment_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "credit_balance_adjustment_id", "file_key_name": "models.stg_zuora__credit_balance_adjustment"}, "test.zuora_source.unique_stg_zuora__invoice_invoice_id.bce76b88e8": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "invoice_id", "model": "{{ get_where_subquery(ref('stg_zuora__invoice')) }}"}, "namespace": null}, "database": "postgres", "schema": "zuora_integration_tests_dbt_test__audit", "name": "unique_stg_zuora__invoice_invoice_id", "resource_type": "test", "package_name": "zuora_source", "path": "unique_stg_zuora__invoice_invoice_id.sql", "original_file_path": "models/stg_zuora.yml", "unique_id": "test.zuora_source.unique_stg_zuora__invoice_invoice_id.bce76b88e8", "fqn": ["zuora_source", "unique_stg_zuora__invoice_invoice_id"], "alias": "unique_stg_zuora__invoice_invoice_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1682531376.140664, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_zuora__invoice"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.zuora_source.stg_zuora__invoice"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora.yml/unique_stg_zuora__invoice_invoice_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    invoice_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zuora_integration_tests\".\"stg_zuora__invoice\"\nwhere invoice_id is not null\ngroup by invoice_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "invoice_id", "file_key_name": "models.stg_zuora__invoice"}, "test.zuora_source.not_null_stg_zuora__invoice_invoice_id.2461bd7df7": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "invoice_id", "model": "{{ get_where_subquery(ref('stg_zuora__invoice')) }}"}, "namespace": null}, "database": "postgres", "schema": "zuora_integration_tests_dbt_test__audit", "name": "not_null_stg_zuora__invoice_invoice_id", "resource_type": "test", "package_name": "zuora_source", "path": "not_null_stg_zuora__invoice_invoice_id.sql", "original_file_path": "models/stg_zuora.yml", "unique_id": "test.zuora_source.not_null_stg_zuora__invoice_invoice_id.2461bd7df7", "fqn": ["zuora_source", "not_null_stg_zuora__invoice_invoice_id"], "alias": "not_null_stg_zuora__invoice_invoice_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1682531376.141473, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_zuora__invoice"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.zuora_source.stg_zuora__invoice"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora.yml/not_null_stg_zuora__invoice_invoice_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect invoice_id\nfrom \"postgres\".\"zuora_integration_tests\".\"stg_zuora__invoice\"\nwhere invoice_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "invoice_id", "file_key_name": "models.stg_zuora__invoice"}, "test.zuora_source.unique_stg_zuora__invoice_item_invoice_item_id.c04fd09b46": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "invoice_item_id", "model": "{{ get_where_subquery(ref('stg_zuora__invoice_item')) }}"}, "namespace": null}, "database": "postgres", "schema": "zuora_integration_tests_dbt_test__audit", "name": "unique_stg_zuora__invoice_item_invoice_item_id", "resource_type": "test", "package_name": "zuora_source", "path": "unique_stg_zuora__invoice_item_invoice_item_id.sql", "original_file_path": "models/stg_zuora.yml", "unique_id": "test.zuora_source.unique_stg_zuora__invoice_item_invoice_item_id.c04fd09b46", "fqn": ["zuora_source", "unique_stg_zuora__invoice_item_invoice_item_id"], "alias": "unique_stg_zuora__invoice_item_invoice_item_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1682531376.142282, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_zuora__invoice_item"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.zuora_source.stg_zuora__invoice_item"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora.yml/unique_stg_zuora__invoice_item_invoice_item_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    invoice_item_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zuora_integration_tests\".\"stg_zuora__invoice_item\"\nwhere invoice_item_id is not null\ngroup by invoice_item_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "invoice_item_id", "file_key_name": "models.stg_zuora__invoice_item"}, "test.zuora_source.not_null_stg_zuora__invoice_item_invoice_item_id.c9ce75552a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "invoice_item_id", "model": "{{ get_where_subquery(ref('stg_zuora__invoice_item')) }}"}, "namespace": null}, "database": "postgres", "schema": "zuora_integration_tests_dbt_test__audit", "name": "not_null_stg_zuora__invoice_item_invoice_item_id", "resource_type": "test", "package_name": "zuora_source", "path": "not_null_stg_zuora__invoice_item_invoice_item_id.sql", "original_file_path": "models/stg_zuora.yml", "unique_id": "test.zuora_source.not_null_stg_zuora__invoice_item_invoice_item_id.c9ce75552a", "fqn": ["zuora_source", "not_null_stg_zuora__invoice_item_invoice_item_id"], "alias": "not_null_stg_zuora__invoice_item_invoice_item_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1682531376.143069, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_zuora__invoice_item"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.zuora_source.stg_zuora__invoice_item"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora.yml/not_null_stg_zuora__invoice_item_invoice_item_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect invoice_item_id\nfrom \"postgres\".\"zuora_integration_tests\".\"stg_zuora__invoice_item\"\nwhere invoice_item_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "invoice_item_id", "file_key_name": "models.stg_zuora__invoice_item"}, "test.zuora_source.unique_stg_zuora__order_order_id.2506b4224d": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "order_id", "model": "{{ get_where_subquery(ref('stg_zuora__order')) }}"}, "namespace": null}, "database": "postgres", "schema": "zuora_integration_tests_dbt_test__audit", "name": "unique_stg_zuora__order_order_id", "resource_type": "test", "package_name": "zuora_source", "path": "unique_stg_zuora__order_order_id.sql", "original_file_path": "models/stg_zuora.yml", "unique_id": "test.zuora_source.unique_stg_zuora__order_order_id.2506b4224d", "fqn": ["zuora_source", "unique_stg_zuora__order_order_id"], "alias": "unique_stg_zuora__order_order_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1682531376.144027, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_zuora__order"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.zuora_source.stg_zuora__order"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora.yml/unique_stg_zuora__order_order_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    order_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zuora_integration_tests\".\"stg_zuora__order\"\nwhere order_id is not null\ngroup by order_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "order_id", "file_key_name": "models.stg_zuora__order"}, "test.zuora_source.not_null_stg_zuora__order_order_id.3e57f63e6b": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "order_id", "model": "{{ get_where_subquery(ref('stg_zuora__order')) }}"}, "namespace": null}, "database": "postgres", "schema": "zuora_integration_tests_dbt_test__audit", "name": "not_null_stg_zuora__order_order_id", "resource_type": "test", "package_name": "zuora_source", "path": "not_null_stg_zuora__order_order_id.sql", "original_file_path": "models/stg_zuora.yml", "unique_id": "test.zuora_source.not_null_stg_zuora__order_order_id.3e57f63e6b", "fqn": ["zuora_source", "not_null_stg_zuora__order_order_id"], "alias": "not_null_stg_zuora__order_order_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1682531376.145376, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_zuora__order"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.zuora_source.stg_zuora__order"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora.yml/not_null_stg_zuora__order_order_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_id\nfrom \"postgres\".\"zuora_integration_tests\".\"stg_zuora__order\"\nwhere order_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "order_id", "file_key_name": "models.stg_zuora__order"}, "test.zuora_source.unique_stg_zuora__payment_payment_id.104a07cd8c": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "payment_id", "model": "{{ get_where_subquery(ref('stg_zuora__payment')) }}"}, "namespace": null}, "database": "postgres", "schema": "zuora_integration_tests_dbt_test__audit", "name": "unique_stg_zuora__payment_payment_id", "resource_type": "test", "package_name": "zuora_source", "path": "unique_stg_zuora__payment_payment_id.sql", "original_file_path": "models/stg_zuora.yml", "unique_id": "test.zuora_source.unique_stg_zuora__payment_payment_id.104a07cd8c", "fqn": ["zuora_source", "unique_stg_zuora__payment_payment_id"], "alias": "unique_stg_zuora__payment_payment_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1682531376.1465778, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_zuora__payment"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.zuora_source.stg_zuora__payment"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora.yml/unique_stg_zuora__payment_payment_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    payment_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zuora_integration_tests\".\"stg_zuora__payment\"\nwhere payment_id is not null\ngroup by payment_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "payment_id", "file_key_name": "models.stg_zuora__payment"}, "test.zuora_source.not_null_stg_zuora__payment_payment_id.21d5bbc205": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "payment_id", "model": "{{ get_where_subquery(ref('stg_zuora__payment')) }}"}, "namespace": null}, "database": "postgres", "schema": "zuora_integration_tests_dbt_test__audit", "name": "not_null_stg_zuora__payment_payment_id", "resource_type": "test", "package_name": "zuora_source", "path": "not_null_stg_zuora__payment_payment_id.sql", "original_file_path": "models/stg_zuora.yml", "unique_id": "test.zuora_source.not_null_stg_zuora__payment_payment_id.21d5bbc205", "fqn": ["zuora_source", "not_null_stg_zuora__payment_payment_id"], "alias": "not_null_stg_zuora__payment_payment_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1682531376.147448, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_zuora__payment"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.zuora_source.stg_zuora__payment"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora.yml/not_null_stg_zuora__payment_payment_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect payment_id\nfrom \"postgres\".\"zuora_integration_tests\".\"stg_zuora__payment\"\nwhere payment_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "payment_id", "file_key_name": "models.stg_zuora__payment"}, "test.zuora_source.unique_stg_zuora__payment_method_payment_method_id.f4d0192fe3": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "payment_method_id", "model": "{{ get_where_subquery(ref('stg_zuora__payment_method')) }}"}, "namespace": null}, "database": "postgres", "schema": "zuora_integration_tests_dbt_test__audit", "name": "unique_stg_zuora__payment_method_payment_method_id", "resource_type": "test", "package_name": "zuora_source", "path": "unique_stg_zuora__payment_method_payment_method_id.sql", "original_file_path": "models/stg_zuora.yml", "unique_id": "test.zuora_source.unique_stg_zuora__payment_method_payment_method_id.f4d0192fe3", "fqn": ["zuora_source", "unique_stg_zuora__payment_method_payment_method_id"], "alias": "unique_stg_zuora__payment_method_payment_method_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1682531376.148473, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_zuora__payment_method"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.zuora_source.stg_zuora__payment_method"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora.yml/unique_stg_zuora__payment_method_payment_method_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    payment_method_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zuora_integration_tests\".\"stg_zuora__payment_method\"\nwhere payment_method_id is not null\ngroup by payment_method_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "payment_method_id", "file_key_name": "models.stg_zuora__payment_method"}, "test.zuora_source.not_null_stg_zuora__payment_method_payment_method_id.757f1baba1": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "payment_method_id", "model": "{{ get_where_subquery(ref('stg_zuora__payment_method')) }}"}, "namespace": null}, "database": "postgres", "schema": "zuora_integration_tests_dbt_test__audit", "name": "not_null_stg_zuora__payment_method_payment_method_id", "resource_type": "test", "package_name": "zuora_source", "path": "not_null_stg_zuora__payment_method_payment_method_id.sql", "original_file_path": "models/stg_zuora.yml", "unique_id": "test.zuora_source.not_null_stg_zuora__payment_method_payment_method_id.757f1baba1", "fqn": ["zuora_source", "not_null_stg_zuora__payment_method_payment_method_id"], "alias": "not_null_stg_zuora__payment_method_payment_method_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1682531376.149285, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_zuora__payment_method"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.zuora_source.stg_zuora__payment_method"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora.yml/not_null_stg_zuora__payment_method_payment_method_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect payment_method_id\nfrom \"postgres\".\"zuora_integration_tests\".\"stg_zuora__payment_method\"\nwhere payment_method_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "payment_method_id", "file_key_name": "models.stg_zuora__payment_method"}, "test.zuora_source.unique_stg_zuora__product_product_id.aff0a8698c": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "product_id", "model": "{{ get_where_subquery(ref('stg_zuora__product')) }}"}, "namespace": null}, "database": "postgres", "schema": "zuora_integration_tests_dbt_test__audit", "name": "unique_stg_zuora__product_product_id", "resource_type": "test", "package_name": "zuora_source", "path": "unique_stg_zuora__product_product_id.sql", "original_file_path": "models/stg_zuora.yml", "unique_id": "test.zuora_source.unique_stg_zuora__product_product_id.aff0a8698c", "fqn": ["zuora_source", "unique_stg_zuora__product_product_id"], "alias": "unique_stg_zuora__product_product_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1682531376.1500921, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_zuora__product"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.zuora_source.stg_zuora__product"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora.yml/unique_stg_zuora__product_product_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    product_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zuora_integration_tests\".\"stg_zuora__product\"\nwhere product_id is not null\ngroup by product_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "product_id", "file_key_name": "models.stg_zuora__product"}, "test.zuora_source.not_null_stg_zuora__product_product_id.08d94a982a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_id", "model": "{{ get_where_subquery(ref('stg_zuora__product')) }}"}, "namespace": null}, "database": "postgres", "schema": "zuora_integration_tests_dbt_test__audit", "name": "not_null_stg_zuora__product_product_id", "resource_type": "test", "package_name": "zuora_source", "path": "not_null_stg_zuora__product_product_id.sql", "original_file_path": "models/stg_zuora.yml", "unique_id": "test.zuora_source.not_null_stg_zuora__product_product_id.08d94a982a", "fqn": ["zuora_source", "not_null_stg_zuora__product_product_id"], "alias": "not_null_stg_zuora__product_product_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1682531376.150909, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_zuora__product"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.zuora_source.stg_zuora__product"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora.yml/not_null_stg_zuora__product_product_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_id\nfrom \"postgres\".\"zuora_integration_tests\".\"stg_zuora__product\"\nwhere product_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "product_id", "file_key_name": "models.stg_zuora__product"}, "test.zuora_source.unique_stg_zuora__product_rate_plan_product_rate_plan_id.5172fe6de3": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "product_rate_plan_id", "model": "{{ get_where_subquery(ref('stg_zuora__product_rate_plan')) }}"}, "namespace": null}, "database": "postgres", "schema": "zuora_integration_tests_dbt_test__audit", "name": "unique_stg_zuora__product_rate_plan_product_rate_plan_id", "resource_type": "test", "package_name": "zuora_source", "path": "unique_stg_zuora__product_rate_plan_product_rate_plan_id.sql", "original_file_path": "models/stg_zuora.yml", "unique_id": "test.zuora_source.unique_stg_zuora__product_rate_plan_product_rate_plan_id.5172fe6de3", "fqn": ["zuora_source", "unique_stg_zuora__product_rate_plan_product_rate_plan_id"], "alias": "unique_stg_zuora__product_rate_plan_product_rate_plan_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1682531376.151835, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_zuora__product_rate_plan"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.zuora_source.stg_zuora__product_rate_plan"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora.yml/unique_stg_zuora__product_rate_plan_product_rate_plan_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    product_rate_plan_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zuora_integration_tests\".\"stg_zuora__product_rate_plan\"\nwhere product_rate_plan_id is not null\ngroup by product_rate_plan_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "product_rate_plan_id", "file_key_name": "models.stg_zuora__product_rate_plan"}, "test.zuora_source.not_null_stg_zuora__product_rate_plan_product_rate_plan_id.17b42ef97f": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_rate_plan_id", "model": "{{ get_where_subquery(ref('stg_zuora__product_rate_plan')) }}"}, "namespace": null}, "database": "postgres", "schema": "zuora_integration_tests_dbt_test__audit", "name": "not_null_stg_zuora__product_rate_plan_product_rate_plan_id", "resource_type": "test", "package_name": "zuora_source", "path": "not_null_stg_zuora__product_rate_plan_product_rate_plan_id.sql", "original_file_path": "models/stg_zuora.yml", "unique_id": "test.zuora_source.not_null_stg_zuora__product_rate_plan_product_rate_plan_id.17b42ef97f", "fqn": ["zuora_source", "not_null_stg_zuora__product_rate_plan_product_rate_plan_id"], "alias": "not_null_stg_zuora__product_rate_plan_product_rate_plan_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1682531376.152629, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_zuora__product_rate_plan"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.zuora_source.stg_zuora__product_rate_plan"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora.yml/not_null_stg_zuora__product_rate_plan_product_rate_plan_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_rate_plan_id\nfrom \"postgres\".\"zuora_integration_tests\".\"stg_zuora__product_rate_plan\"\nwhere product_rate_plan_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "product_rate_plan_id", "file_key_name": "models.stg_zuora__product_rate_plan"}, "test.zuora_source.unique_stg_zuora__product_rate_plan_charge_product_rate_plan_charge_id.3fba29feec": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "product_rate_plan_charge_id", "model": "{{ get_where_subquery(ref('stg_zuora__product_rate_plan_charge')) }}"}, "namespace": null}, "database": "postgres", "schema": "zuora_integration_tests_dbt_test__audit", "name": "unique_stg_zuora__product_rate_plan_charge_product_rate_plan_charge_id", "resource_type": "test", "package_name": "zuora_source", "path": "unique_stg_zuora__product_rate_08977e4ab9f51891d8da9997fadd65e5.sql", "original_file_path": "models/stg_zuora.yml", "unique_id": "test.zuora_source.unique_stg_zuora__product_rate_plan_charge_product_rate_plan_charge_id.3fba29feec", "fqn": ["zuora_source", "unique_stg_zuora__product_rate_plan_charge_product_rate_plan_charge_id"], "alias": "unique_stg_zuora__product_rate_08977e4ab9f51891d8da9997fadd65e5", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "unique_stg_zuora__product_rate_08977e4ab9f51891d8da9997fadd65e5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "unique_stg_zuora__product_rate_08977e4ab9f51891d8da9997fadd65e5"}, "created_at": 1682531376.153449, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_stg_zuora__product_rate_08977e4ab9f51891d8da9997fadd65e5\") }}", "language": "sql", "refs": [["stg_zuora__product_rate_plan_charge"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.zuora_source.stg_zuora__product_rate_plan_charge"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora.yml/unique_stg_zuora__product_rate_08977e4ab9f51891d8da9997fadd65e5.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    product_rate_plan_charge_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zuora_integration_tests\".\"stg_zuora__product_rate_plan_charge\"\nwhere product_rate_plan_charge_id is not null\ngroup by product_rate_plan_charge_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "product_rate_plan_charge_id", "file_key_name": "models.stg_zuora__product_rate_plan_charge"}, "test.zuora_source.not_null_stg_zuora__product_rate_plan_charge_product_rate_plan_charge_id.ee9a534d30": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "product_rate_plan_charge_id", "model": "{{ get_where_subquery(ref('stg_zuora__product_rate_plan_charge')) }}"}, "namespace": null}, "database": "postgres", "schema": "zuora_integration_tests_dbt_test__audit", "name": "not_null_stg_zuora__product_rate_plan_charge_product_rate_plan_charge_id", "resource_type": "test", "package_name": "zuora_source", "path": "not_null_stg_zuora__product_ra_1f899cc7faedf9a58a90dd9fe53fd0d8.sql", "original_file_path": "models/stg_zuora.yml", "unique_id": "test.zuora_source.not_null_stg_zuora__product_rate_plan_charge_product_rate_plan_charge_id.ee9a534d30", "fqn": ["zuora_source", "not_null_stg_zuora__product_rate_plan_charge_product_rate_plan_charge_id"], "alias": "not_null_stg_zuora__product_ra_1f899cc7faedf9a58a90dd9fe53fd0d8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_stg_zuora__product_ra_1f899cc7faedf9a58a90dd9fe53fd0d8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_stg_zuora__product_ra_1f899cc7faedf9a58a90dd9fe53fd0d8"}, "created_at": 1682531376.15454, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_stg_zuora__product_ra_1f899cc7faedf9a58a90dd9fe53fd0d8\") }}", "language": "sql", "refs": [["stg_zuora__product_rate_plan_charge"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.zuora_source.stg_zuora__product_rate_plan_charge"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora.yml/not_null_stg_zuora__product_ra_1f899cc7faedf9a58a90dd9fe53fd0d8.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_rate_plan_charge_id\nfrom \"postgres\".\"zuora_integration_tests\".\"stg_zuora__product_rate_plan_charge\"\nwhere product_rate_plan_charge_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "product_rate_plan_charge_id", "file_key_name": "models.stg_zuora__product_rate_plan_charge"}, "test.zuora_source.unique_stg_zuora__rate_plan_rate_plan_id.09741de08d": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "rate_plan_id", "model": "{{ get_where_subquery(ref('stg_zuora__rate_plan')) }}"}, "namespace": null}, "database": "postgres", "schema": "zuora_integration_tests_dbt_test__audit", "name": "unique_stg_zuora__rate_plan_rate_plan_id", "resource_type": "test", "package_name": "zuora_source", "path": "unique_stg_zuora__rate_plan_rate_plan_id.sql", "original_file_path": "models/stg_zuora.yml", "unique_id": "test.zuora_source.unique_stg_zuora__rate_plan_rate_plan_id.09741de08d", "fqn": ["zuora_source", "unique_stg_zuora__rate_plan_rate_plan_id"], "alias": "unique_stg_zuora__rate_plan_rate_plan_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1682531376.156042, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_zuora__rate_plan"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.zuora_source.stg_zuora__rate_plan"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora.yml/unique_stg_zuora__rate_plan_rate_plan_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    rate_plan_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zuora_integration_tests\".\"stg_zuora__rate_plan\"\nwhere rate_plan_id is not null\ngroup by rate_plan_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "rate_plan_id", "file_key_name": "models.stg_zuora__rate_plan"}, "test.zuora_source.not_null_stg_zuora__rate_plan_rate_plan_id.0a3262a4ac": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "rate_plan_id", "model": "{{ get_where_subquery(ref('stg_zuora__rate_plan')) }}"}, "namespace": null}, "database": "postgres", "schema": "zuora_integration_tests_dbt_test__audit", "name": "not_null_stg_zuora__rate_plan_rate_plan_id", "resource_type": "test", "package_name": "zuora_source", "path": "not_null_stg_zuora__rate_plan_rate_plan_id.sql", "original_file_path": "models/stg_zuora.yml", "unique_id": "test.zuora_source.not_null_stg_zuora__rate_plan_rate_plan_id.0a3262a4ac", "fqn": ["zuora_source", "not_null_stg_zuora__rate_plan_rate_plan_id"], "alias": "not_null_stg_zuora__rate_plan_rate_plan_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1682531376.156957, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_zuora__rate_plan"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.zuora_source.stg_zuora__rate_plan"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora.yml/not_null_stg_zuora__rate_plan_rate_plan_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect rate_plan_id\nfrom \"postgres\".\"zuora_integration_tests\".\"stg_zuora__rate_plan\"\nwhere rate_plan_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "rate_plan_id", "file_key_name": "models.stg_zuora__rate_plan"}, "test.zuora_source.unique_stg_zuora__rate_plan_charge_rate_plan_charge_id.968ebd8116": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "rate_plan_charge_id", "model": "{{ get_where_subquery(ref('stg_zuora__rate_plan_charge')) }}"}, "namespace": null}, "database": "postgres", "schema": "zuora_integration_tests_dbt_test__audit", "name": "unique_stg_zuora__rate_plan_charge_rate_plan_charge_id", "resource_type": "test", "package_name": "zuora_source", "path": "unique_stg_zuora__rate_plan_charge_rate_plan_charge_id.sql", "original_file_path": "models/stg_zuora.yml", "unique_id": "test.zuora_source.unique_stg_zuora__rate_plan_charge_rate_plan_charge_id.968ebd8116", "fqn": ["zuora_source", "unique_stg_zuora__rate_plan_charge_rate_plan_charge_id"], "alias": "unique_stg_zuora__rate_plan_charge_rate_plan_charge_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1682531376.1578, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_zuora__rate_plan_charge"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.zuora_source.stg_zuora__rate_plan_charge"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora.yml/unique_stg_zuora__rate_plan_charge_rate_plan_charge_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    rate_plan_charge_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zuora_integration_tests\".\"stg_zuora__rate_plan_charge\"\nwhere rate_plan_charge_id is not null\ngroup by rate_plan_charge_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "rate_plan_charge_id", "file_key_name": "models.stg_zuora__rate_plan_charge"}, "test.zuora_source.not_null_stg_zuora__rate_plan_charge_rate_plan_charge_id.4f37fe0feb": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "rate_plan_charge_id", "model": "{{ get_where_subquery(ref('stg_zuora__rate_plan_charge')) }}"}, "namespace": null}, "database": "postgres", "schema": "zuora_integration_tests_dbt_test__audit", "name": "not_null_stg_zuora__rate_plan_charge_rate_plan_charge_id", "resource_type": "test", "package_name": "zuora_source", "path": "not_null_stg_zuora__rate_plan_charge_rate_plan_charge_id.sql", "original_file_path": "models/stg_zuora.yml", "unique_id": "test.zuora_source.not_null_stg_zuora__rate_plan_charge_rate_plan_charge_id.4f37fe0feb", "fqn": ["zuora_source", "not_null_stg_zuora__rate_plan_charge_rate_plan_charge_id"], "alias": "not_null_stg_zuora__rate_plan_charge_rate_plan_charge_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1682531376.158617, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_zuora__rate_plan_charge"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.zuora_source.stg_zuora__rate_plan_charge"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora.yml/not_null_stg_zuora__rate_plan_charge_rate_plan_charge_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect rate_plan_charge_id\nfrom \"postgres\".\"zuora_integration_tests\".\"stg_zuora__rate_plan_charge\"\nwhere rate_plan_charge_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "rate_plan_charge_id", "file_key_name": "models.stg_zuora__rate_plan_charge"}, "test.zuora_source.unique_stg_zuora__refund_refund_id.01e977f065": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "refund_id", "model": "{{ get_where_subquery(ref('stg_zuora__refund')) }}"}, "namespace": null}, "database": "postgres", "schema": "zuora_integration_tests_dbt_test__audit", "name": "unique_stg_zuora__refund_refund_id", "resource_type": "test", "package_name": "zuora_source", "path": "unique_stg_zuora__refund_refund_id.sql", "original_file_path": "models/stg_zuora.yml", "unique_id": "test.zuora_source.unique_stg_zuora__refund_refund_id.01e977f065", "fqn": ["zuora_source", "unique_stg_zuora__refund_refund_id"], "alias": "unique_stg_zuora__refund_refund_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1682531376.159582, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_zuora__refund"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.zuora_source.stg_zuora__refund"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora.yml/unique_stg_zuora__refund_refund_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    refund_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zuora_integration_tests\".\"stg_zuora__refund\"\nwhere refund_id is not null\ngroup by refund_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "refund_id", "file_key_name": "models.stg_zuora__refund"}, "test.zuora_source.unique_stg_zuora__subscription_subscription_id.219bd2fe86": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "subscription_id", "model": "{{ get_where_subquery(ref('stg_zuora__subscription')) }}"}, "namespace": null}, "database": "postgres", "schema": "zuora_integration_tests_dbt_test__audit", "name": "unique_stg_zuora__subscription_subscription_id", "resource_type": "test", "package_name": "zuora_source", "path": "unique_stg_zuora__subscription_subscription_id.sql", "original_file_path": "models/stg_zuora.yml", "unique_id": "test.zuora_source.unique_stg_zuora__subscription_subscription_id.219bd2fe86", "fqn": ["zuora_source", "unique_stg_zuora__subscription_subscription_id"], "alias": "unique_stg_zuora__subscription_subscription_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1682531376.1604, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_zuora__subscription"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.zuora_source.stg_zuora__subscription"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora.yml/unique_stg_zuora__subscription_subscription_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    subscription_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zuora_integration_tests\".\"stg_zuora__subscription\"\nwhere subscription_id is not null\ngroup by subscription_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "subscription_id", "file_key_name": "models.stg_zuora__subscription"}, "test.zuora_source.not_null_stg_zuora__subscription_subscription_id.be7f23f7d2": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "subscription_id", "model": "{{ get_where_subquery(ref('stg_zuora__subscription')) }}"}, "namespace": null}, "database": "postgres", "schema": "zuora_integration_tests_dbt_test__audit", "name": "not_null_stg_zuora__subscription_subscription_id", "resource_type": "test", "package_name": "zuora_source", "path": "not_null_stg_zuora__subscription_subscription_id.sql", "original_file_path": "models/stg_zuora.yml", "unique_id": "test.zuora_source.not_null_stg_zuora__subscription_subscription_id.be7f23f7d2", "fqn": ["zuora_source", "not_null_stg_zuora__subscription_subscription_id"], "alias": "not_null_stg_zuora__subscription_subscription_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1682531376.161241, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_zuora__subscription"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.zuora_source.stg_zuora__subscription"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora.yml/not_null_stg_zuora__subscription_subscription_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect subscription_id\nfrom \"postgres\".\"zuora_integration_tests\".\"stg_zuora__subscription\"\nwhere subscription_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "subscription_id", "file_key_name": "models.stg_zuora__subscription"}, "test.zuora_source.unique_stg_zuora__taxation_item_taxation_item_id.2762673f7d": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "taxation_item_id", "model": "{{ get_where_subquery(ref('stg_zuora__taxation_item')) }}"}, "namespace": null}, "database": "postgres", "schema": "zuora_integration_tests_dbt_test__audit", "name": "unique_stg_zuora__taxation_item_taxation_item_id", "resource_type": "test", "package_name": "zuora_source", "path": "unique_stg_zuora__taxation_item_taxation_item_id.sql", "original_file_path": "models/stg_zuora.yml", "unique_id": "test.zuora_source.unique_stg_zuora__taxation_item_taxation_item_id.2762673f7d", "fqn": ["zuora_source", "unique_stg_zuora__taxation_item_taxation_item_id"], "alias": "unique_stg_zuora__taxation_item_taxation_item_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1682531376.162215, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_zuora__taxation_item"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.zuora_source.stg_zuora__taxation_item"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora.yml/unique_stg_zuora__taxation_item_taxation_item_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    taxation_item_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"zuora_integration_tests\".\"stg_zuora__taxation_item\"\nwhere taxation_item_id is not null\ngroup by taxation_item_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "taxation_item_id", "file_key_name": "models.stg_zuora__taxation_item"}, "test.zuora_source.not_null_stg_zuora__taxation_item_taxation_item_id.8f5f59eabf": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "taxation_item_id", "model": "{{ get_where_subquery(ref('stg_zuora__taxation_item')) }}"}, "namespace": null}, "database": "postgres", "schema": "zuora_integration_tests_dbt_test__audit", "name": "not_null_stg_zuora__taxation_item_taxation_item_id", "resource_type": "test", "package_name": "zuora_source", "path": "not_null_stg_zuora__taxation_item_taxation_item_id.sql", "original_file_path": "models/stg_zuora.yml", "unique_id": "test.zuora_source.not_null_stg_zuora__taxation_item_taxation_item_id.8f5f59eabf", "fqn": ["zuora_source", "not_null_stg_zuora__taxation_item_taxation_item_id"], "alias": "not_null_stg_zuora__taxation_item_taxation_item_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1682531376.1632261, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [["stg_zuora__taxation_item"]], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.zuora_source.stg_zuora__taxation_item"]}, "compiled_path": "target/compiled/zuora_source/models/stg_zuora.yml/not_null_stg_zuora__taxation_item_taxation_item_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect taxation_item_id\nfrom \"postgres\".\"zuora_integration_tests\".\"stg_zuora__taxation_item\"\nwhere taxation_item_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "column_name": "taxation_item_id", "file_key_name": "models.stg_zuora__taxation_item"}}, "sources": {"source.zuora_source.zuora.account": {"database": "postgres", "schema": "zuora_source_integration_tests", "name": "account", "resource_type": "source", "package_name": "zuora_source", "path": "models/src_zuora.yml", "original_file_path": "models/src_zuora.yml", "unique_id": "source.zuora_source.zuora.account", "fqn": ["zuora_source", "zuora", "account"], "source_name": "zuora", "source_description": "", "loader": "fivetran", "identifier": "zuora_account_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "An account is a customer account that collects all of the critical information about the customer, such as contact information, payment terms, and payment methods.", "columns": {"id": {"name": "id", "description": "The unique identifier of the account table.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_number": {"name": "account_number", "description": "Unique account number assigned to the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "auto_pay": {"name": "auto_pay", "description": "Indicates if future payments are automatically collected when they're due during a Payment Run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "balance": {"name": "balance", "description": "Current outstanding balance for the account. Can be calculated by (Total Invoice Balance - Total Credit Balance)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "batch": {"name": "batch", "description": "Organizes your customer accounts into groups to optimize your billing and payment operations.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bill_cycle_day": {"name": "bill_cycle_day", "description": "Day on which bill runs generate invoices for the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bill_to_contact_id": {"name": "bill_to_contact_id", "description": "Person that you would like to bill or send the invoice to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_date": {"name": "created_date", "description": "Creation date for the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_by_id": {"name": "created_by_id", "description": "Identifier of the user who created the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "credit_balance": {"name": "credit_balance", "description": "Total credit balance for the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "crm_id": {"name": "crm_id", "description": "CRM account id, used in Salesforce integration.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "Currency the customer is billed in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "default_payment_method_id": {"name": "default_payment_method_id", "description": "Identifier of the default payment method for the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_invoice_date": {"name": "last_invoice_date", "description": "The date when the previous invoice was generated for the account. The field value is null if no invoice has ever been generated for the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "mrr": {"name": "mrr", "description": "The amount of predictable revenue expected to be received on a monthly basis.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "Account name as displayed in Zuora.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "notes": {"name": "notes", "description": "Comments about the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_account_id": {"name": "parent_account_id", "description": "Identifier of the parent customer account for this account. Use this field if you have customer hierarchy enabled.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payment_term": {"name": "payment_term", "description": "Indicates when the customer pays for subscriptions.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sold_to_contact_id": {"name": "sold_to_contact_id", "description": "Person that you have sold your product or services to; can be the same as the bill to contact.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "Status of the account in the system.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tax_exempt_effective_date": {"name": "tax_exempt_effective_date", "description": "Date when the customer's tax exemption starts.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tax_exempt_expiration_date": {"name": "tax_exempt_expiration_date", "description": "Date when the customer's tax exemption certificate expires.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tax_exempt_status": {"name": "tax_exempt_status", "description": "Status of the account's tax exemption.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_debit_memo_balance": {"name": "total_debit_memo_balance", "description": "Total balance of the account's debit memos.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_invoice_balance": {"name": "total_invoice_balance", "description": "Total balance of the account's invoices.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "unapplied_balance": {"name": "unapplied_balance", "description": "Total of unapplied payments not applied to invoices or debit memos.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "unapplied_credit_memo_amount": {"name": "unapplied_credit_memo_amount", "description": "Total of credit memos created that has been created, but not used to settle or offset an invoice balance or a debit memo balance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_date": {"name": "updated_date", "description": "Last updated date for the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_by_id": {"name": "updated_by_id", "description": "Identifier of the user who last updated the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "vatid": {"name": "vatid", "description": "EU Value Added Tax id.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"zuora_source_integration_tests\".\"zuora_account_data\"", "created_at": 1682531376.2568262}, "source.zuora_source.zuora.amendment": {"database": "postgres", "schema": "zuora_source_integration_tests", "name": "amendment", "resource_type": "source", "package_name": "zuora_source", "path": "models/src_zuora.yml", "original_file_path": "models/src_zuora.yml", "unique_id": "source.zuora_source.zuora.amendment", "fqn": ["zuora_source", "zuora", "amendment"], "source_name": "zuora", "source_description": "", "loader": "fivetran", "identifier": "zuora_amendment_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "When a customer needs to make a change to a subscription, you make that change through an amendment. Common subscription changes include 'Changing the terms and conditions of a contract; add a product or update an existing product to a subscription; renew, cancel, suspend or resume a subscription.'", "columns": {"id": {"name": "id", "description": "The unique identifier of the amendment table.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "auto_renew": {"name": "auto_renew", "description": "Determines whether the subscription is automatically renewed, or whether it expires at the end of the term and needs to be manually renewed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "booking_date": {"name": "booking_date", "description": "The date when the amendment is signed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "code": {"name": "code", "description": "A unique alphanumeric string that identifies the amendment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_effective_date": {"name": "contract_effective_date", "description": "The date when the amendment's changes become effective for billing purposes.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_by_id": {"name": "created_by_id", "description": "Identifier of the user who created the amendment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_date": {"name": "created_date", "description": "Creation date for the amendment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "current_term": {"name": "current_term", "description": "The length of the period for the current subscription term.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "current_term_period_type": {"name": "current_term_period_type", "description": "The period type for the current subscription term.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "customer_acceptance_date": {"name": "customer_acceptance_date", "description": "The date when the customer accepts the amendment's changes to the subscription.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "A description of the amendment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "effective_date": {"name": "effective_date", "description": "The date when the amendment's changes take effective. This field validates that the amendment's changes are within valid ranges of products and product rate plans.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the amendment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "new_rate_plan_id": {"name": "new_rate_plan_id", "description": "The id of the rate plan that was added to the subscription by this amendment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "removed_rate_plan_id": {"name": "removed_rate_plan_id", "description": "The id of the rate plan that was removed from the subscription by this amendment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "renewal_setting": {"name": "renewal_setting", "description": "Specifies whether a termed subscription will remain termed or change to evergreen when it is renewed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "renewal_term": {"name": "renewal_term", "description": "The term of renewal for the amended subscription.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "renewal_term_period_type": {"name": "renewal_term_period_type", "description": "The period type for the subscription renewal term.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "resume_date": {"name": "resume_date", "description": "The date when the subscription resumption takes effect.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "service_activation_date": {"name": "service_activation_date", "description": "The date when service is activated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "specific_update_date": {"name": "specific_update_date", "description": "The date when the UpdateProduct amendment takes effect.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of the amendment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subscription_id": {"name": "subscription_id", "description": "The id of the subscription that the amendment changes.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "suspend_date": {"name": "suspend_date", "description": "The date when the subscription suspension takes effect.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "term_start_date": {"name": "term_start_date", "description": "The date when the new terms and conditions take effect.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "term_type": {"name": "term_type", "description": "Indicates if the subscription is TERMED (expiration date, must be manually renewed), EVERGREEN (doesn't have expiration date, must be manually ended).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "The type of amendment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_by_id": {"name": "updated_by_id", "description": "Identifier of the user who last updated the amendment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_date": {"name": "updated_date", "description": "Last updated date for the amendment.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"zuora_source_integration_tests\".\"zuora_amendment_data\"", "created_at": 1682531376.256978}, "source.zuora_source.zuora.contact": {"database": "postgres", "schema": "zuora_source_integration_tests", "name": "contact", "resource_type": "source", "package_name": "zuora_source", "path": "models/src_zuora.yml", "original_file_path": "models/src_zuora.yml", "unique_id": "source.zuora_source.zuora.contact", "fqn": ["zuora_source", "zuora", "contact"], "source_name": "zuora", "source_description": "", "loader": "fivetran", "identifier": "zuora_contact_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Customer who holds an account or who is otherwise a person to contact about an account.", "columns": {"id": {"name": "id", "description": "The unique identifier of the contact table.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The Zuora account id associated with this contact.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "address_1": {"name": "address_1", "description": "The first line of the contact's address, which is often a street address or business name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "address_2": {"name": "address_2", "description": "The second line of the contact's address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "city": {"name": "city", "description": "The city of the contact's address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "country": {"name": "country", "description": "The country of the contact's address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_by_id": {"name": "created_by_id", "description": "Identifier of the user who created the contact.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_date": {"name": "created_date", "description": "Creation date for the contact.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "A description for the contact.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_name": {"name": "first_name", "description": "The contact's first name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_name": {"name": "last_name", "description": "The contact's last name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "postal_code": {"name": "postal_code", "description": "The zip code for the contact's address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "state": {"name": "state", "description": "The state for the contact's address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_by_id": {"name": "updated_by_id", "description": "Identifier of the user who last updated the contact.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_date": {"name": "updated_date", "description": "Last updated date for the contact.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "work_email": {"name": "work_email", "description": "The contact's business email address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "work_phone": {"name": "work_phone", "description": "The contact's business phone number.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"zuora_source_integration_tests\".\"zuora_contact_data\"", "created_at": 1682531376.257086}, "source.zuora_source.zuora.credit_balance_adjustment": {"database": "postgres", "schema": "zuora_source_integration_tests", "name": "credit_balance_adjustment", "resource_type": "source", "package_name": "zuora_source", "path": "models/src_zuora.yml", "original_file_path": "models/src_zuora.yml", "unique_id": "source.zuora_source.zuora.credit_balance_adjustment", "fqn": ["zuora_source", "zuora", "credit_balance_adjustment"], "source_name": "zuora", "source_description": "", "loader": "fivetran", "identifier": "zuora_credit_balance_adjustment_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "An adjustment to change a customer's credit balance.  Applies adjustments to credit balances on billing accounts. This includes applying credit balance to invoices and transferring an invoice to a credit balance.", "columns": {"id": {"name": "id", "description": "The unique identifier of the credit balance adjustment table.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The account id of the credit balance's account. Zuora generates this value from the source transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_receivable_accounting_code_id": {"name": "account_receivable_accounting_code_id", "description": "The accounting code ID for the account receivable account to which the adjustment was made.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accounting_code": {"name": "accounting_code", "description": "The accounting code for the credit balance adjustment, maps to a bank account in the accounting system.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "adjustment_date": {"name": "adjustment_date", "description": "The date when the credit balance adjustment is applied.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "The amount of the credit balance adjustment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount_home_currency": {"name": "amount_home_currency", "description": "The amount of the adjustment in the home currency of the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bill_to_contact_id": {"name": "bill_to_contact_id", "description": "Person that you would like to bill or send the invoice to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cancelled_on": {"name": "cancelled_on", "description": "Date when the credit balance adjustment was canceled.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "comment": {"name": "comment", "description": "Comments about the credit balance adjustment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_by_id": {"name": "created_by_id", "description": "Identifier of the user who created the credit balance adjustment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_date": {"name": "created_date", "description": "Creation date for the credit balance adjustment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "default_payment_method_id": {"name": "default_payment_method_id", "description": "Identifier of the default payment method for the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "exchange_rate": {"name": "exchange_rate", "description": "The exchange rate used for the adjustment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "exchange_rate_date": {"name": "exchange_rate_date", "description": "The date of the exchange rate used for the adjustment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_currency": {"name": "home_currency", "description": "Home currency the customer is billed in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invoice_id": {"name": "invoice_id", "description": "The ID of the invoice associated with the adjustment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "journal_entry_id": {"name": "journal_entry_id", "description": "The ID of the journal entry associated with the adjustment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "number": {"name": "number", "description": "A unique identifier for the credit balance adjustment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_account_id": {"name": "parent_account_id", "description": "The ID of the parent account associated with the adjustment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reason_code": {"name": "reason_code", "description": "The reason code for the adjustment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "reference_id": {"name": "reference_id", "description": "The reference ID for the adjustment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sold_to_contact_id": {"name": "sold_to_contact_id", "description": "Person that you have sold your product or services to; can be the same as the bill to contact.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_transaction_id": {"name": "source_transaction_id", "description": "The id of the object that the credit balance adjustment is applied to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_transaction_number": {"name": "source_transaction_number", "description": "The number of the object that the credit balance adjustment is applied to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_transaction_type": {"name": "source_transaction_type", "description": "The source of the credit balance adjustment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of the credit balance adjustment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_currency": {"name": "transaction_currency", "description": "Transaction currency the customer is billed in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transferred_to_accounting": {"name": "transferred_to_accounting", "description": "Indicates the status of the credit balance adjustment's transfer to an external accounting system, such as Netsuite.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "Specifies if the credit balance adjustment increases or decrease the amount of the credit balance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_by_id": {"name": "updated_by_id", "description": "Identifier of the user who last updated the credit balance adjustment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_date": {"name": "updated_date", "description": "Last updated date for the credit balance adjustment.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"zuora_source_integration_tests\".\"zuora_credit_balance_adjustment_data\"", "created_at": 1682531376.257202}, "source.zuora_source.zuora.invoice": {"database": "postgres", "schema": "zuora_source_integration_tests", "name": "invoice", "resource_type": "source", "package_name": "zuora_source", "path": "models/src_zuora.yml", "original_file_path": "models/src_zuora.yml", "unique_id": "source.zuora_source.zuora.invoice", "fqn": ["zuora_source", "zuora", "invoice"], "source_name": "zuora", "source_description": "", "loader": "fivetran", "identifier": "zuora_invoice_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "An invoice represents a bill to a customer, providing information about customers' accounts for invoices, including dates, status, and amounts. It is created at the account level, and can include all of the charges for multiple subscriptions for an account.", "columns": {"id": {"name": "id", "description": "The unique identifier of the invoice table.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The account identifier associated with the invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "adjustment_amount": {"name": "adjustment_amount", "description": "The amount of the invoice adjustments associated with the invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "The sum of all charges and taxes associated with the invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount_home_currency": {"name": "amount_home_currency", "description": "The total amount of the invoice in the home currency of the customer's billing account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount_without_tax": {"name": "amount_without_tax", "description": "The sum of all charges associated with the invoice. Taxes are excluded from this value.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount_without_tax_home_currency": {"name": "amount_without_tax_home_currency", "description": "The amount of the invoice that is not subject to tax, in the home currency of the customer's billing account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "auto_pay": {"name": "auto_pay", "description": "Whether invoices are automatically picked up for processing in the corresponding payment run.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "balance": {"name": "balance", "description": "The remaining balance of the invoice after all payments, adjustments, and refunds are applied.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bill_to_contact_id": {"name": "bill_to_contact_id", "description": "Person that you would like to bill or send the invoice to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "comments": {"name": "comments", "description": "Additional comments about the invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_by_id": {"name": "created_by_id", "description": "Identifier of the user who created the invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_date": {"name": "created_date", "description": "Creation date for the invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "credit_balance_adjustment_amount": {"name": "credit_balance_adjustment_amount", "description": "The total amount of credit balance adjustments applied to the invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "credit_memo_amount": {"name": "credit_memo_amount", "description": "The total amount of credit memos applied to the invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "default_payment_method_id": {"name": "default_payment_method_id", "description": "Identifier of the default payment method for the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "due_date": {"name": "due_date", "description": "The due date of the invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "exchange_rate": {"name": "exchange_rate", "description": "The exchange rate used to convert the invoice amount into the customer's billing account currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "exchange_rate_date": {"name": "exchange_rate_date", "description": "The date the exchange rate was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_currency": {"name": "home_currency", "description": "Home currency the customer is billed in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "includes_one_time": {"name": "includes_one_time", "description": "Specifies whether the invoice includes one-time charges.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "includes_recurring": {"name": "includes_recurring", "description": "Specifies whether the invoice includes recurring charges.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "includes_usage": {"name": "includes_usage", "description": "Specifies whether the invoice includes usage charges.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invoice_date": {"name": "invoice_date", "description": "Specifies the date on which to generate the invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invoice_number": {"name": "invoice_number", "description": "The unique identification number for the invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_email_sent_date": {"name": "last_email_sent_date", "description": "The date when the invoice was last emailed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_account_id": {"name": "parent_account_id", "description": "The id of the parent account, if the invoice is associated with a parent-child account relationship.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payment_amount": {"name": "payment_amount", "description": "The amount of payments applied to the invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payment_term": {"name": "payment_term", "description": "The name of the payment term associated with the invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "posted_by": {"name": "posted_by", "description": "The user id of the person who moved the invoice to Posted status.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "posted_date": {"name": "posted_date", "description": "The date when the invoice was posted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "refund_amount": {"name": "refund_amount", "description": "Specifies the amount of a refund that was applied against an earlier payment on the invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sold_to_contact_id": {"name": "sold_to_contact_id", "description": "Person that you have sold your product or services to; can be the same as the bill to contact.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source": {"name": "source", "description": "The source of the invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_id": {"name": "source_id", "description": "The identifier of the value in the source field.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_type": {"name": "source_type", "description": "The type of the invoice source.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of the invoice in the system. This status is not the status of the payment of the invoice, just the status of the invoice itself.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "target_date": {"name": "target_date", "description": "The date the invoice is generated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tax_amount": {"name": "tax_amount", "description": "The total amount of the taxes applied to the invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tax_status": {"name": "tax_status", "description": "The status of tax calculation related to the invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_currency": {"name": "transaction_currency", "description": "The currency in which the invoice is billed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transferred_to_accounting": {"name": "transferred_to_accounting", "description": "Indicates whether the invoice has been transferred to the accounting system.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_by_id": {"name": "updated_by_id", "description": "Identifier of the user who last updated the invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_date": {"name": "updated_date", "description": "Last updated date for the invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"zuora_source_integration_tests\".\"zuora_invoice_data\"", "created_at": 1682531376.257329}, "source.zuora_source.zuora.invoice_item": {"database": "postgres", "schema": "zuora_source_integration_tests", "name": "invoice_item", "resource_type": "source", "package_name": "zuora_source", "path": "models/src_zuora.yml", "original_file_path": "models/src_zuora.yml", "unique_id": "source.zuora_source.zuora.invoice_item", "fqn": ["zuora_source", "zuora", "invoice_item"], "source_name": "zuora", "source_description": "", "loader": "fivetran", "identifier": "zuora_invoice_item_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "An invoice item is an individual line item in an invoice. Invoice items are charges, such as a monthly recurring charge.", "columns": {"id": {"name": "id", "description": "The unique identifier of the invoice item table.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "id of the account associated with this invoice item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_receivable_accounting_code_id": {"name": "account_receivable_accounting_code_id", "description": "id of the accounting code for the account receivable account for this invoice item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accounting_code": {"name": "accounting_code", "description": "Accounting code for the invoice item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amendment_id": {"name": "amendment_id", "description": "id of the amendment associated with this invoice item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "applied_to_invoice_item_id": {"name": "applied_to_invoice_item_id", "description": "id of the invoice item that this invoice item is applied to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "balance": {"name": "balance", "description": "Balance of the invoice item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bill_to_contact_id": {"name": "bill_to_contact_id", "description": "id of the contact to whom the invoice item is billed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "charge_amount": {"name": "charge_amount", "description": "Amount charged for the invoice item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "charge_amount_home_currency": {"name": "charge_amount_home_currency", "description": "Amount charged for the invoice item in the home currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "charge_date": {"name": "charge_date", "description": "Date on which the charge for the invoice item was made.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "charge_name": {"name": "charge_name", "description": "Name of the charge associated with this invoice item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_by_id": {"name": "created_by_id", "description": "id of the user who created this invoice item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_date": {"name": "created_date", "description": "Date on which the invoice item was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deferred_revenue_accounting_code_id": {"name": "deferred_revenue_accounting_code_id", "description": "id of the accounting code for the deferred revenue account for this invoice item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "exchange_rate": {"name": "exchange_rate", "description": "Exchange rate for the invoice item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "exchange_rate_date": {"name": "exchange_rate_date", "description": "Date of the exchange rate for the invoice item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_currency": {"name": "home_currency", "description": "Currency used for the invoice item in the home currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invoice_id": {"name": "invoice_id", "description": "id of the invoice associated with this invoice item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "journal_entry_id": {"name": "journal_entry_id", "description": "id of the journal entry associated with this invoice item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_account_id": {"name": "parent_account_id", "description": "id of the parent account associated with this invoice item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "processing_type": {"name": "processing_type", "description": "Type of processing for the invoice item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "product_id": {"name": "product_id", "description": "id of the product associated with this invoice item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "product_rate_plan_charge_id": {"name": "product_rate_plan_charge_id", "description": "id of the product rate plan charge associated with this invoice item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "product_rate_plan_id": {"name": "product_rate_plan_id", "description": "id of the product rate plan associated with this invoice item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "quantity": {"name": "quantity", "description": "Quantity associated with the invoice item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rate_plan_charge_id": {"name": "rate_plan_charge_id", "description": "id of the rate plan charge associated with this invoice item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rate_plan_id": {"name": "rate_plan_id", "description": "id of the rate plan associated with this invoice item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "recognized_revenue_accounting_code_id": {"name": "recognized_revenue_accounting_code_id", "description": "id of the accounting code for the recognized revenue account for this invoice item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rev_rec_start_date": {"name": "rev_rec_start_date", "description": "Date on which revenue recognition starts for the invoice item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "service_end_date": {"name": "service_end_date", "description": "End date of the service associated with the invoice item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "service_start_date": {"name": "service_start_date", "description": "Start date of the service associated with the invoice item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sku": {"name": "sku", "description": "SKU of the invoice item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sold_to_contact_id": {"name": "sold_to_contact_id", "description": "The id of the contact to whom the product or service was sold.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_item_type": {"name": "source_item_type", "description": "The type of the source item that created the invoice item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subscription_id": {"name": "subscription_id", "description": "The id of the subscription associated with the invoice item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tax_amount": {"name": "tax_amount", "description": "The tax amount for the invoice item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tax_mode": {"name": "tax_mode", "description": "The tax mode for the invoice item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_currency": {"name": "transaction_currency", "description": "The transaction currency for the invoice item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "unit_price": {"name": "unit_price", "description": "The unit price for the invoice item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "uom": {"name": "uom", "description": "The unit of measure for the invoice item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_by_id": {"name": "updated_by_id", "description": "The id of the user who last updated the invoice item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_date": {"name": "updated_date", "description": "The date and time when the invoice item was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"zuora_source_integration_tests\".\"zuora_invoice_item_data\"", "created_at": 1682531376.257496}, "source.zuora_source.zuora.invoice_payment": {"database": "postgres", "schema": "zuora_source_integration_tests", "name": "invoice_payment", "resource_type": "source", "package_name": "zuora_source", "path": "models/src_zuora.yml", "original_file_path": "models/src_zuora.yml", "unique_id": "source.zuora_source.zuora.invoice_payment", "fqn": ["zuora_source", "zuora", "invoice_payment"], "source_name": "zuora", "source_description": "", "loader": "fivetran", "identifier": "zuora_invoice_payment_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "invoice payment details", "columns": {"id": {"name": "id", "description": "The unique identifier of the invoice item table.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The id of the customer account that the invoice payment is associated with.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_receivable_accounting_code_id": {"name": "account_receivable_accounting_code_id", "description": "The id of the accounting code for the account receivable account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accounting_period_id": {"name": "accounting_period_id", "description": "The id of the accounting period associated with the invoice payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "The amount of the invoice payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount_currency_rounding": {"name": "amount_currency_rounding", "description": "The amount of the invoice payment after rounding to the nearest currency unit.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount_home_currency": {"name": "amount_home_currency", "description": "The amount of the invoice payment in the home currency of the customer account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bill_to_contact_id": {"name": "bill_to_contact_id", "description": "The id of the contact associated with the billing address for the invoice payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cash_accounting_code_id": {"name": "cash_accounting_code_id", "description": "The id of the accounting code for the cash account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_by_id": {"name": "created_by_id", "description": "The id of the user who created the invoice payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_date": {"name": "created_date", "description": "The date and time when the invoice payment was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "default_payment_method_id": {"name": "default_payment_method_id", "description": "The id of the default payment method for the customer account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "exchange_rate": {"name": "exchange_rate", "description": "The exchange rate used to convert the transaction currency of the invoice payment to the home currency of the customer account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "exchange_rate_date": {"name": "exchange_rate_date", "description": "The date of the exchange rate used to convert the transaction currency of the invoice payment to the home currency of the customer account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_currency": {"name": "home_currency", "description": "The home currency of the customer account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invoice_id": {"name": "invoice_id", "description": "The id of the invoice associated with the invoice payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "journal_entry_id": {"name": "journal_entry_id", "description": "The id of the journal entry created for the invoice payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "journal_run_id": {"name": "journal_run_id", "description": "The id of the journal run associated with the invoice payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_account_id": {"name": "parent_account_id", "description": "The id of the parent account for the customer account associated with the invoice payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payment_id": {"name": "payment_id", "description": "The id of the payment associated with the invoice payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payment_method_id": {"name": "payment_method_id", "description": "The id of the payment method used for the invoice payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "provider_exchange_rate_date": {"name": "provider_exchange_rate_date", "description": "The date of the exchange rate used by the payment provider to convert the transaction currency of the invoice payment to the currency of the payment provider.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "refund_amount": {"name": "refund_amount", "description": "The amount of the refund applied to the invoice payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sold_to_contact_id": {"name": "sold_to_contact_id", "description": "The id of the contact associated with the shipping address for the invoice payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_currency": {"name": "transaction_currency", "description": "The currency of the invoice payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_by_id": {"name": "updated_by_id", "description": "The id of the user who last updated the invoice payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_date": {"name": "updated_date", "description": "The date and time when the invoice payment was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"zuora_source_integration_tests\".\"zuora_invoice_payment_data\"", "created_at": 1682531376.2576041}, "source.zuora_source.zuora.order": {"database": "postgres", "schema": "zuora_source_integration_tests", "name": "order", "resource_type": "source", "package_name": "zuora_source", "path": "models/src_zuora.yml", "original_file_path": "models/src_zuora.yml", "unique_id": "source.zuora_source.zuora.order", "fqn": ["zuora_source", "zuora", "order"], "source_name": "zuora", "source_description": "", "loader": "fivetran", "identifier": "zuora_order_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Orders are contractual agreements between merchants and customers. You can create multiple subscriptions and subscription amendments at once in a single order. All the operations on subscriptions in orders are done by order actions.", "columns": {"id": {"name": "id", "description": "The unique identifier of the order table.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The id of the account associated with this order.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bill_to_contact_id": {"name": "bill_to_contact_id", "description": "The id of the contact associated with the billing address for this order.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "category": {"name": "category", "description": "The category of the order, such as NewSubscription or Amendment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_by_id": {"name": "created_by_id", "description": "The id of the user who created this order.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_date": {"name": "created_date", "description": "The date and time when this order was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "default_payment_method_id": {"name": "default_payment_method_id", "description": "The id of the default payment method used for this order.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "A brief description of this order.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "error_code": {"name": "error_code", "description": "The error code associated with this order, if any.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "error_message": {"name": "error_message", "description": "The error message associated with this order, if any.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "order_date": {"name": "order_date", "description": "The date and time when this order was placed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "order_number": {"name": "order_number", "description": "The unique identifier for this order.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "response": {"name": "response", "description": "The response associated with this order, if any.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "scheduled_date": {"name": "scheduled_date", "description": "The date and time when this order is scheduled to be processed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sold_to_contact_id": {"name": "sold_to_contact_id", "description": "The id of the contact associated with the shipping address for this order.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "state": {"name": "state", "description": "The state of this order, such as Draft or Processing.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of this order, such as Pending or Completed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_by_id": {"name": "updated_by_id", "description": "The id of the user who last updated this order.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_date": {"name": "updated_date", "description": "The date and time when this order was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"zuora_source_integration_tests\".\"zuora_order_data\"", "created_at": 1682531376.257706}, "source.zuora_source.zuora.payment": {"database": "postgres", "schema": "zuora_source_integration_tests", "name": "payment", "resource_type": "source", "package_name": "zuora_source", "path": "models/src_zuora.yml", "original_file_path": "models/src_zuora.yml", "unique_id": "source.zuora_source.zuora.payment", "fqn": ["zuora_source", "zuora", "payment"], "source_name": "zuora", "source_description": "", "loader": "fivetran", "identifier": "zuora_payment_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A payment is the money that customers send to pay for invoices related to their subscriptions", "columns": {"id": {"name": "id", "description": "The unique identifier of the payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The id of the Zuora account associated with the payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accounting_code": {"name": "accounting_code", "description": "The accounting code associated with the payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "The amount of the payment in the transaction currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount_home_currency": {"name": "amount_home_currency", "description": "The amount of the payment in the home currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "applied_amount": {"name": "applied_amount", "description": "The amount of the payment that has been applied to one or more invoices.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "applied_credit_balance_amount": {"name": "applied_credit_balance_amount", "description": "The amount of the payment that has been applied to a credit balance.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bill_to_contact_id": {"name": "bill_to_contact_id", "description": "The id of the contact to which the payment should be billed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cancelled_on": {"name": "cancelled_on", "description": "The date the payment was cancelled.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "comment": {"name": "comment", "description": "A comment associated with the payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_by_id": {"name": "created_by_id", "description": "The id of the user who created the payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_date": {"name": "created_date", "description": "The date the payment was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "currency": {"name": "currency", "description": "The currency of the payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "effective_date": {"name": "effective_date", "description": "The date the payment will be effective.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "exchange_rate": {"name": "exchange_rate", "description": "The exchange rate used to convert the payment amount from the transaction currency to the home currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "exchange_rate_date": {"name": "exchange_rate_date", "description": "The date the exchange rate was set.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_currency": {"name": "home_currency", "description": "The home currency of the payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_account_id": {"name": "parent_account_id", "description": "The id of the parent account associated with the payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payment_method_id": {"name": "payment_method_id", "description": "The id of the payment method used for the payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payment_number": {"name": "payment_number", "description": "The payment number assigned by Zuora.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "refund_amount": {"name": "refund_amount", "description": "The amount of the payment that has been refunded.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "settled_on": {"name": "settled_on", "description": "The date the payment was settled.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sold_to_contact_id": {"name": "sold_to_contact_id", "description": "The id of the contact who made the payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of the payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "submitted_on": {"name": "submitted_on", "description": "The date the payment was submitted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_currency": {"name": "transaction_currency", "description": "The transaction currency of the payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transferred_to_accounting": {"name": "transferred_to_accounting", "description": "Whether the payment has been transferred to the accounting system.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "The type of the payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "unapplied_amount": {"name": "unapplied_amount", "description": "The amount of the payment that has not yet been applied.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_by_id": {"name": "updated_by_id", "description": "The id of the user who last updated the payment.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_date": {"name": "updated_date", "description": "The date the payment was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"zuora_source_integration_tests\".\"zuora_payment_data\"", "created_at": 1682531376.2578418}, "source.zuora_source.zuora.payment_method": {"database": "postgres", "schema": "zuora_source_integration_tests", "name": "payment_method", "resource_type": "source", "package_name": "zuora_source", "path": "models/src_zuora.yml", "original_file_path": "models/src_zuora.yml", "unique_id": "source.zuora_source.zuora.payment_method", "fqn": ["zuora_source", "zuora", "payment_method"], "source_name": "zuora", "source_description": "", "loader": "fivetran", "identifier": "zuora_payment_method_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Payment methods are the ways in which customers pay for their subscriptions. Your customers can choose a payment method from your company's list of preferred payment methods.", "columns": {"id": {"name": "id", "description": "The unique identifier of the payment method.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The unique identifier of the account associated with this payment method.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ach_account_type": {"name": "ach_account_type", "description": "The account type for ACH payment methods.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "active": {"name": "active", "description": "A Boolean value indicating whether this payment method is active.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bank_transfer_account_type": {"name": "bank_transfer_account_type", "description": "The account type for bank transfer payment methods.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_by_id": {"name": "created_by_id", "description": "The unique identifier of the user who created this payment method.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_date": {"name": "created_date", "description": "The date and time when this payment method was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "credit_card_type": {"name": "credit_card_type", "description": "The credit card type for credit card payment methods.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_failed_sale_transaction_date": {"name": "last_failed_sale_transaction_date", "description": "The date and time when the last sale transaction failed for this payment method.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_transaction_date_time": {"name": "last_transaction_date_time", "description": "The date and time of the last transaction for this payment method.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_transaction_status": {"name": "last_transaction_status", "description": "The status of the last transaction for this payment method.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "max_consecutive_payment_failures": {"name": "max_consecutive_payment_failures", "description": "The maximum number of consecutive payment failures allowed for this payment method.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the payment method.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "num_consecutive_failures": {"name": "num_consecutive_failures", "description": "The number of consecutive payment failures for this payment method.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payment_method_status": {"name": "payment_method_status", "description": "The status of the payment method.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "paypal_type": {"name": "paypal_type", "description": "The PayPal account type for PayPal payment methods.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sub_type": {"name": "sub_type", "description": "The sub-type of the payment method.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_number_of_error_payments": {"name": "total_number_of_error_payments", "description": "The total number of error payments for this payment method.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_number_of_processed_payments": {"name": "total_number_of_processed_payments", "description": "The total number of processed payments for this payment method.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "The type of the payment method.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_by_id": {"name": "updated_by_id", "description": "The unique identifier of the user who last updated this payment method.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_date": {"name": "updated_date", "description": "The date and time when this payment method was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"zuora_source_integration_tests\".\"zuora_payment_method_data\"", "created_at": 1682531376.257945}, "source.zuora_source.zuora.product": {"database": "postgres", "schema": "zuora_source_integration_tests", "name": "product", "resource_type": "source", "package_name": "zuora_source", "path": "models/src_zuora.yml", "original_file_path": "models/src_zuora.yml", "unique_id": "source.zuora_source.zuora.product", "fqn": ["zuora_source", "zuora", "product"], "source_name": "zuora", "source_description": "", "loader": "fivetran", "identifier": "zuora_product_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A product is an item or service that your company sells. In the subscription economy, a product is generally a service that your customers subscribe to rather than a physical item that they purchase one time.", "columns": {"id": {"name": "id", "description": "The unique identifier for the product.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "category": {"name": "category", "description": "The category of the product.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_by_id": {"name": "created_by_id", "description": "The id of the user who created the product.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_date": {"name": "created_date", "description": "The date and time when the product was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "A description of the product.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "effective_end_date": {"name": "effective_end_date", "description": "The date when the product is no longer available for purchase.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "effective_start_date": {"name": "effective_start_date", "description": "The date when the product becomes available for purchase.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the product.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sku": {"name": "sku", "description": "The SKU (stock keeping unit) of the product.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_by_id": {"name": "updated_by_id", "description": "The id of the user who last updated the product.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_date": {"name": "updated_date", "description": "The date and time when the product was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"zuora_source_integration_tests\".\"zuora_product_data\"", "created_at": 1682531376.258036}, "source.zuora_source.zuora.product_rate_plan": {"database": "postgres", "schema": "zuora_source_integration_tests", "name": "product_rate_plan", "resource_type": "source", "package_name": "zuora_source", "path": "models/src_zuora.yml", "original_file_path": "models/src_zuora.yml", "unique_id": "source.zuora_source.zuora.product_rate_plan", "fqn": ["zuora_source", "zuora", "product_rate_plan"], "source_name": "zuora", "source_description": "", "loader": "fivetran", "identifier": "zuora_product_rate_plan_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A product rate plan is the part of a product that your customers subscribe to. Each product can have multiple product rate plans, and each product rate plan can have multiple product rate plan charges, which are fees for products and their product rate plans.", "columns": {"id": {"name": "id", "description": "Unique identifier of the product rate plan.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_by_id": {"name": "created_by_id", "description": "The id of the Zuora user who created the product rate plan.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_date": {"name": "created_date", "description": "The date and time when the product rate plan was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "A brief description of the product rate plan.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "effective_end_date": {"name": "effective_end_date", "description": "The date when the product rate plan will no longer be effective.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "effective_start_date": {"name": "effective_start_date", "description": "The date when the product rate plan becomes effective.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the product rate plan.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "product_id": {"name": "product_id", "description": "The id of the product that this rate plan belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_by_id": {"name": "updated_by_id", "description": "The id of the Zuora user who last updated the product rate plan.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_date": {"name": "updated_date", "description": "The date and time when the product rate plan was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"zuora_source_integration_tests\".\"zuora_product_rate_plan_data\"", "created_at": 1682531376.2581272}, "source.zuora_source.zuora.product_rate_plan_charge": {"database": "postgres", "schema": "zuora_source_integration_tests", "name": "product_rate_plan_charge", "resource_type": "source", "package_name": "zuora_source", "path": "models/src_zuora.yml", "original_file_path": "models/src_zuora.yml", "unique_id": "source.zuora_source.zuora.product_rate_plan_charge", "fqn": ["zuora_source", "zuora", "product_rate_plan_charge"], "source_name": "zuora", "source_description": "", "loader": "fivetran", "identifier": "zuora_product_rate_plan_charge_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A product rate plan charge represents a charge model or a set of fees associated with a product rate plan, which is the part of a product that your customers subscribe to. Each product rate plan can have multiple product rate plan charges.", "columns": {"id": {"name": "id", "description": "Unique identifier of the product rate plan charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_receivable_accounting_code_id": {"name": "account_receivable_accounting_code_id", "description": "The id of the accounting code for the accounts receivable account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accounting_code": {"name": "accounting_code", "description": "The accounting code for the charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "apply_discount_to": {"name": "apply_discount_to", "description": "The type of charge to which discounts apply.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bill_cycle_day": {"name": "bill_cycle_day", "description": "The day of the bill cycle on which the charge should be billed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bill_cycle_type": {"name": "bill_cycle_type", "description": "The type of bill cycle for the charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_period": {"name": "billing_period", "description": "The billing period for the charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "charge_model": {"name": "charge_model", "description": "The charge model for the charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "charge_type": {"name": "charge_type", "description": "The type of charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_by_id": {"name": "created_by_id", "description": "The id of the user who created the charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_date": {"name": "created_date", "description": "The date on which the charge was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "default_quantity": {"name": "default_quantity", "description": "The default quantity for the charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deferred_revenue_accounting_code_id": {"name": "deferred_revenue_accounting_code_id", "description": "The id of the accounting code for deferred revenue.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "A description of the charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "discount_class_id": {"name": "discount_class_id", "description": "The id of the discount class for the charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "discount_level": {"name": "discount_level", "description": "The level at which the discount is applied.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "end_date_condition": {"name": "end_date_condition", "description": "The condition that determines when the charge ends.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "exclude_item_billing_from_revenue_accounting": {"name": "exclude_item_billing_from_revenue_accounting", "description": "Indicates whether the charge should be excluded from revenue accounting.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "exclude_item_booking_from_revenue_accounting": {"name": "exclude_item_booking_from_revenue_accounting", "description": "Indicates whether the charge should be excluded from booking revenue accounting.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "included_units": {"name": "included_units", "description": "The number of units included in the charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_stacked_discount": {"name": "is_stacked_discount", "description": "Indicates whether the discount is a stacked discount. Values are true or false.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "list_price_base": {"name": "list_price_base", "description": "The price used to calculate the charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "max_quantity": {"name": "max_quantity", "description": "The maximum number of units allowed for this charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "min_quantity": {"name": "min_quantity", "description": "The minimum number of units required for this charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the product rate plan charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "product_id": {"name": "product_id", "description": "The unique identifier of the product associated with the product rate plan charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "product_rate_plan_id": {"name": "product_rate_plan_id", "description": "The unique identifier of the product rate plan associated with the product rate plan charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "specific_billing_period": {"name": "specific_billing_period", "description": "The billing period for this product rate plan charge. Values are DAY, WEEK, MONTH, and YEAR.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tax_mode": {"name": "tax_mode", "description": "Indicates how the charge is taxed. Values are TAXABLE, NON-TAXABLE, and TAXED_INCLUSIVE.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "taxable": {"name": "taxable", "description": "Indicates whether the charge is taxable. Values are true or false.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "trigger_event": {"name": "trigger_event", "description": "The event that triggers the charge. Values are SERVICE_ACTIVATION, CONTRACT_EFFECTIVE, CUSTOMER_ACCEPTANCE, or SERVICE_USAGE.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "uom": {"name": "uom", "description": "The unit of measure for the charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "up_to_periods": {"name": "up_to_periods", "description": "The maximum number of billing periods allowed for this charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "up_to_periods_type": {"name": "up_to_periods_type", "description": "The billing period type for the up to periods setting. Values are DAY, WEEK, MONTH, and YEAR.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_by_id": {"name": "updated_by_id", "description": "The unique identifier of the user who last updated the product rate plan charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_date": {"name": "updated_date", "description": "The date and time when the product rate plan charge was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "use_discount_specific_accounting_code": {"name": "use_discount_specific_accounting_code", "description": "Indicates whether the discount uses a specific accounting code. Values are true or false.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "weekly_bill_cycle_day": {"name": "weekly_bill_cycle_day", "description": "The day of the week when the bill cycle starts for a weekly billing period. Values are MON, TUE, WED, THU, FRI, SAT, and SUN.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"zuora_source_integration_tests\".\"zuora_product_rate_plan_charge_data\"", "created_at": 1682531376.258275}, "source.zuora_source.zuora.rate_plan": {"database": "postgres", "schema": "zuora_source_integration_tests", "name": "rate_plan", "resource_type": "source", "package_name": "zuora_source", "path": "models/src_zuora.yml", "original_file_path": "models/src_zuora.yml", "unique_id": "source.zuora_source.zuora.rate_plan", "fqn": ["zuora_source", "zuora", "rate_plan"], "source_name": "zuora", "source_description": "", "loader": "fivetran", "identifier": "zuora_rate_plan_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A rate plan is part of a subscription or an amendment to a subscription, and it comes from a product rate plan.  Rate plans represent a price or a collection of prices for a service you sell. An individual rate plan contains all charges specific to a particular subscription.", "columns": {"id": {"name": "id", "description": "The unique identifier of the rate plan.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The unique identifier of the account that the rate plan belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amendment_id": {"name": "amendment_id", "description": "The unique identifier of the amendment that the rate plan belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bill_to_contact_id": {"name": "bill_to_contact_id", "description": "The unique identifier of the contact that the rate plan is billed to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_by_id": {"name": "created_by_id", "description": "The unique identifier of the user who created the rate plan.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_date": {"name": "created_date", "description": "The date and time when the rate plan was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "default_payment_method_id": {"name": "default_payment_method_id", "description": "The unique identifier of the default payment method for the rate plan.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the rate plan.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "original_rate_plan_id": {"name": "original_rate_plan_id", "description": "The unique identifier of the original rate plan that was used to create the rate plan.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "product_id": {"name": "product_id", "description": "The unique identifier of the product that the rate plan belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "product_rate_plan_id": {"name": "product_rate_plan_id", "description": "The unique identifier of the product rate plan that the rate plan belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sold_to_contact_id": {"name": "sold_to_contact_id", "description": "The unique identifier of the contact that the rate plan is sold to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subscription_id": {"name": "subscription_id", "description": "The unique identifier of the subscription that the rate plan belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_by_id": {"name": "updated_by_id", "description": "The unique identifier of the user who last updated the rate plan.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_date": {"name": "updated_date", "description": "The date and time when the rate plan was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"zuora_source_integration_tests\".\"zuora_rate_plan_data\"", "created_at": 1682531376.258371}, "source.zuora_source.zuora.rate_plan_charge": {"database": "postgres", "schema": "zuora_source_integration_tests", "name": "rate_plan_charge", "resource_type": "source", "package_name": "zuora_source", "path": "models/src_zuora.yml", "original_file_path": "models/src_zuora.yml", "unique_id": "source.zuora_source.zuora.rate_plan_charge", "fqn": ["zuora_source", "zuora", "rate_plan_charge"], "source_name": "zuora", "source_description": "", "loader": "fivetran", "identifier": "zuora_rate_plan_charge_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A rate plan charge is part of a subscription or an amendment to a subscription, and it comes from a product rate plan charge. Rate plan charges represent the actual charges for the rate plans or services that you sell.", "columns": {"id": {"name": "id", "description": "The unique identifier for the rate plan charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The unique identifier of the account associated with the rate plan charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_receivable_accounting_code_id": {"name": "account_receivable_accounting_code_id", "description": "The unique identifier for the accounting code that represents the account receivable for this charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accounting_code": {"name": "accounting_code", "description": "The accounting code associated with this charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amended_by_order_on": {"name": "amended_by_order_on", "description": "The date when the amendment order was created or processed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amendment_id": {"name": "amendment_id", "description": "The unique identifier for the amendment associated with this rate plan charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "apply_discount_to": {"name": "apply_discount_to", "description": "The type of discount that is applied to the charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bill_cycle_day": {"name": "bill_cycle_day", "description": "The day of the month when the billing cycle for the charge ends.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bill_cycle_type": {"name": "bill_cycle_type", "description": "The type of billing cycle that the charge uses.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bill_to_contact_id": {"name": "bill_to_contact_id", "description": "The unique identifier of the contact associated with the account's billing information.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bill_to_contact_snapshot_id": {"name": "bill_to_contact_snapshot_id", "description": "The unique identifier for the snapshot of the bill-to contact information that was used when the charge was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_period": {"name": "billing_period", "description": "The billing period for the charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_timing": {"name": "billing_timing", "description": "The timing of the charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "booking_exchange_rate": {"name": "booking_exchange_rate", "description": "The exchange rate for the charge when it was booked.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "booking_exchange_rate_date": {"name": "booking_exchange_rate_date", "description": "The date on which the exchange rate for the charge when it was booked was determined.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "charge_model": {"name": "charge_model", "description": "The model used to calculate the charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "charge_number": {"name": "charge_number", "description": "The number of the charge within the subscription.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "charge_type": {"name": "charge_type", "description": "The type of charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "charged_through_date": {"name": "charged_through_date", "description": "The date through which the charge has been charged.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_by_id": {"name": "created_by_id", "description": "The unique identifier of the user who created the rate plan charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_date": {"name": "created_date", "description": "The date and time when the rate plan charge was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "credit_option": {"name": "credit_option", "description": "The option used to calculate the credit for the charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "default_payment_method_id": {"name": "default_payment_method_id", "description": "The unique identifier of the default payment method for the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "deferred_revenue_accounting_code_id": {"name": "deferred_revenue_accounting_code_id", "description": "The unique identifier for the accounting code that represents the deferred revenue for this charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "The description of the rate plan charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "discount_level": {"name": "discount_level", "description": "The level of the discount applied to the charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dmrc": {"name": "dmrc", "description": "The amount of the charge in the charge currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dmrchome_currency": {"name": "dmrchome_currency", "description": "The amount of the charge in the home currency of the company.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dtcv": {"name": "dtcv", "description": "The deferred tax calculated value of the rate plan charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dtcvhome_currency": {"name": "dtcvhome_currency", "description": "The deferred tax calculated value of the rate plan charge in the home currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "effective_end_date": {"name": "effective_end_date", "description": "The date on which the rate plan charge is no longer in effect.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "effective_start_date": {"name": "effective_start_date", "description": "The date on which the rate plan charge goes into effect.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "end_date_condition": {"name": "end_date_condition", "description": "The condition that triggers the end date of the rate plan charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "exchange_rate": {"name": "exchange_rate", "description": "The exchange rate used for the rate plan charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "exchange_rate_date": {"name": "exchange_rate_date", "description": "The date on which the exchange rate was determined.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_currency": {"name": "home_currency", "description": "Home currency the customer is billed in.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_prepaid": {"name": "is_prepaid", "description": "A boolean value indicating whether the rate plan charge is prepaid.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_processed": {"name": "is_processed", "description": "A boolean value indicating whether the rate plan charge has been processed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "mrr": {"name": "mrr", "description": "The monthly recurring revenue of the rate plan charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "mrrhome_currency": {"name": "mrrhome_currency", "description": "The monthly recurring revenue of the rate plan charge in the home currency.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the rate plan charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "number_of_periods": {"name": "number_of_periods", "description": "The number of billing periods for the rate plan charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "original_id": {"name": "original_id", "description": "The original id of the rate plan charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "original_order_date": {"name": "original_order_date", "description": "The date on which the original order was placed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "price_change_option": {"name": "price_change_option", "description": "The option selected for handling price changes for the rate plan charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "price_increase_percentage": {"name": "price_increase_percentage", "description": "The percentage increase applied to the rate plan charge price.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "processed_through_date": {"name": "processed_through_date", "description": "The date through which the rate plan charge has been processed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "product_id": {"name": "product_id", "description": "The unique identifier of the product associated with the rate plan charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "product_rate_plan_charge_id": {"name": "product_rate_plan_charge_id", "description": "The unique identifier of the product rate plan charge associated with the rate plan charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "product_rate_plan_id": {"name": "product_rate_plan_id", "description": "The unique identifier of the product rate plan associated with the rate plan charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "quantity": {"name": "quantity", "description": "The quantity associated with the rate plan charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rate_plan_id": {"name": "rate_plan_id", "description": "The unique identifier of the rate plan associated with the rate plan charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "recognized_revenue_accounting_code_id": {"name": "recognized_revenue_accounting_code_id", "description": "The unique identifier of the accounting code associated with recognized revenue for the rate plan charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "segment": {"name": "segment", "description": "The segment associated with the rate plan charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sold_to_contact_id": {"name": "sold_to_contact_id", "description": "The unique identifier of the contact associated with the sold-to account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "specific_billing_period": {"name": "specific_billing_period", "description": "The specific billing period associated with the rate plan charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "specific_end_date": {"name": "specific_end_date", "description": "The specific end date associated with the rate plan charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "specific_list_price_base": {"name": "specific_list_price_base", "description": "The list price base for the rate plan charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subscription_id": {"name": "subscription_id", "description": "The id of the subscription associated with the rate plan charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tcv": {"name": "tcv", "description": "The total contract value for the rate plan charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tcvhome_currency": {"name": "tcvhome_currency", "description": "The home currency value of the Total Contract Value.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_currency": {"name": "transaction_currency", "description": "The currency in which the transaction occurs.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "trigger_date": {"name": "trigger_date", "description": "The date on which the trigger event occurs.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "trigger_event": {"name": "trigger_event", "description": "The type of trigger event that is associated with the rate plan charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "uom": {"name": "uom", "description": "The unit of measure for the quantity of the rate plan charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "up_to_periods": {"name": "up_to_periods", "description": "The maximum number of billing periods for which the charge is applicable.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "up_to_periods_type": {"name": "up_to_periods_type", "description": "The time unit that is used to calculate the maximum number of billing periods for which the charge is applicable.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_by_id": {"name": "updated_by_id", "description": "The id of the user who last updated the rate plan charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_date": {"name": "updated_date", "description": "The date and time when the rate plan charge was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "version": {"name": "version", "description": "The version number of the rate plan charge.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "weekly_bill_cycle_day": {"name": "weekly_bill_cycle_day", "description": "The day of the week on which the bill cycle starts.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"zuora_source_integration_tests\".\"zuora_rate_plan_charge_data\"", "created_at": 1682531376.258507}, "source.zuora_source.zuora.refund": {"database": "postgres", "schema": "zuora_source_integration_tests", "name": "refund", "resource_type": "source", "package_name": "zuora_source", "path": "models/src_zuora.yml", "original_file_path": "models/src_zuora.yml", "unique_id": "source.zuora_source.zuora.refund", "fqn": ["zuora_source", "zuora", "refund"], "source_name": "zuora", "source_description": "", "loader": "fivetran", "identifier": "zuora_refund_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A refund returns money to a customer - as opposed to a credit, which creates a customer credit balance that may be applied to reduce the amount owed to you. Electronic refunds are processed by Zuora via a payment gateway.\nExternal refunds indicate that the refund was processed outside of Zuora, say by a check, and the transaction must be recorded.", "columns": {"id": {"name": "id", "description": "The unique identifier of the refund object.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accounting_code": {"name": "accounting_code", "description": "The accounting code associated with the refund.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amount": {"name": "amount", "description": "The amount of the refund.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cancelled_on": {"name": "cancelled_on", "description": "The date and time when the refund was cancelled.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "comment": {"name": "comment", "description": "A comment about the refund.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_by_id": {"name": "created_by_id", "description": "The id of the user who created the refund.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_date": {"name": "created_date", "description": "The date and time when the refund was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "method_type": {"name": "method_type", "description": "The type of the refund method.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payment_method_id": {"name": "payment_method_id", "description": "The id of the payment method used for the refund.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "refund_date": {"name": "refund_date", "description": "The date when the refund was processed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "refund_number": {"name": "refund_number", "description": "The refund number associated with the refund.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "refund_transaction_time": {"name": "refund_transaction_time", "description": "The date and time when the refund transaction was processed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "settled_on": {"name": "settled_on", "description": "The date and time when the refund was settled.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_type": {"name": "source_type", "description": "The type of the refund source.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of the refund.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "submitted_on": {"name": "submitted_on", "description": "The date and time when the refund was submitted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transferred_to_accounting": {"name": "transferred_to_accounting", "description": "A flag that indicates whether the refund was transferred to the accounting system.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "The type of the refund.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_by_id": {"name": "updated_by_id", "description": "The id of the user who last updated the refund.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_date": {"name": "updated_date", "description": "The date and time when the refund was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"zuora_source_integration_tests\".\"zuora_refund_data\"", "created_at": 1682531376.25861}, "source.zuora_source.zuora.refund_invoice_payment": {"database": "postgres", "schema": "zuora_source_integration_tests", "name": "refund_invoice_payment", "resource_type": "source", "package_name": "zuora_source", "path": "models/src_zuora.yml", "original_file_path": "models/src_zuora.yml", "unique_id": "source.zuora_source.zuora.refund_invoice_payment", "fqn": ["zuora_source", "zuora", "refund_invoice_payment"], "source_name": "zuora", "source_description": "", "loader": "fivetran", "identifier": "zuora_refund_invoice_payment_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "refund invoice payment details", "columns": {"id": {"name": "id", "description": "The id of the refund invoice payment in Zuora.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_by_id": {"name": "created_by_id", "description": "The id of the user who created the refund invoice payment in Zuora.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_date": {"name": "created_date", "description": "The date and time when the refund invoice payment was created in Zuora.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "refund_amount": {"name": "refund_amount", "description": "The amount of the refund invoice payment in the currency of the invoice.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_by_id": {"name": "updated_by_id", "description": "The id of the user who last updated the refund invoice payment in Zuora.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_date": {"name": "updated_date", "description": "The date and time when the refund invoice payment was last updated in Zuora.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"zuora_source_integration_tests\".\"zuora_refund_invoice_payment_data\"", "created_at": 1682531376.258698}, "source.zuora_source.zuora.subscription": {"database": "postgres", "schema": "zuora_source_integration_tests", "name": "subscription", "resource_type": "source", "package_name": "zuora_source", "path": "models/src_zuora.yml", "original_file_path": "models/src_zuora.yml", "unique_id": "source.zuora_source.zuora.subscription", "fqn": ["zuora_source", "zuora", "subscription"], "source_name": "zuora", "source_description": "", "loader": "fivetran", "identifier": "zuora_subscription_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "A subscription is a product or service that has recurring charges, such as a monthly flat fee or charges based on usage. Subscriptions can also include one-time charges, such as activation fees. Every subscription must be associated with an account. At least one active account must exist before any subscriptions can be created.", "columns": {"id": {"name": "id", "description": "The unique identifier for the subscription.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The unique identifier for the account associated with the subscription.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "auto_renew": {"name": "auto_renew", "description": "Indicates whether the subscription is set to automatically renew at the end of the term.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bill_to_contact_id": {"name": "bill_to_contact_id", "description": "The unique identifier for the contact that will be billed for the subscription.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cancel_reason": {"name": "cancel_reason", "description": "The reason for cancelling the subscription, if applicable.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cancelled_date": {"name": "cancelled_date", "description": "The date on which the subscription was cancelled, if applicable.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_acceptance_date": {"name": "contract_acceptance_date", "description": "The date on which the contract was accepted by the customer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_effective_date": {"name": "contract_effective_date", "description": "The date on which the contract became effective.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_by_id": {"name": "created_by_id", "description": "The unique identifier for the user who created the subscription.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_date": {"name": "created_date", "description": "The date on which the subscription was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "current_term": {"name": "current_term", "description": "The length of the current subscription term.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "current_term_period_type": {"name": "current_term_period_type", "description": "The unit of time for the current subscription term (e.g. \"Month\", \"Year\").", "meta": {}, "data_type": null, "quote": null, "tags": []}, "default_payment_method_id": {"name": "default_payment_method_id", "description": "The unique identifier for the default payment method associated with the subscription.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "externally_managed_by": {"name": "externally_managed_by", "description": "Indicates whether the subscription is externally managed by another system or platform.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "initial_term": {"name": "initial_term", "description": "The length of the initial subscription term.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "initial_term_period_type": {"name": "initial_term_period_type", "description": "The unit of time for the initial subscription term (e.g. \"Month\", \"Year\").", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invoice_owner_id": {"name": "invoice_owner_id", "description": "The unique identifier for the user who will receive invoice notifications for the subscription.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_invoice_separate": {"name": "is_invoice_separate", "description": "Indicates whether the subscription is invoiced separately from other subscriptions on the same account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "is_latest_version": {"name": "is_latest_version", "description": "Indicates whether the subscription is the latest version of the subscription on the account.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_booking_date": {"name": "last_booking_date", "description": "The date on which the most recent booking was created for the subscription.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the subscription.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "notes": {"name": "notes", "description": "Additional notes or comments about the subscription.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "original_created_date": {"name": "original_created_date", "description": "The date on which the original subscription was created, if the current subscription is a renewal.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "original_id": {"name": "original_id", "description": "The unique identifier for the original subscription, if the current subscription is a renewal.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parent_account_id": {"name": "parent_account_id", "description": "The unique identifier for the parent account associated with the subscription.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payment_term": {"name": "payment_term", "description": "The payment term associated with the subscription.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "previous_subscription_id": {"name": "previous_subscription_id", "description": "The unique identifier for the previous subscription associated with the subscription.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "renewal_term": {"name": "renewal_term", "description": "The length of the renewal subscription term.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "renewal_term_period_type": {"name": "renewal_term_period_type", "description": "The type of the renewal term for the subscription.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "revision": {"name": "revision", "description": "The revision number for the subscription.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "service_activation_date": {"name": "service_activation_date", "description": "The date the subscription was activated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sold_to_contact_id": {"name": "sold_to_contact_id", "description": "The unique identifier for the sold-to contact associated with the subscription.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "The status of the subscription.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subscription_end_date": {"name": "subscription_end_date", "description": "The end date of the subscription.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subscription_start_date": {"name": "subscription_start_date", "description": "The start date of the subscription.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "term_end_date": {"name": "term_end_date", "description": "The end date of the subscription term.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "term_start_date": {"name": "term_start_date", "description": "The start date of the subscription term.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "term_type": {"name": "term_type", "description": "The type of subscription term.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_by_id": {"name": "updated_by_id", "description": "The unique identifier of the user who last updated the subscription.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_date": {"name": "updated_date", "description": "The date the subscription was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "version": {"name": "version", "description": "The version number of the subscription.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"zuora_source_integration_tests\".\"zuora_subscription_data\"", "created_at": 1682531376.258815}, "source.zuora_source.zuora.taxation_item": {"database": "postgres", "schema": "zuora_source_integration_tests", "name": "taxation_item", "resource_type": "source", "package_name": "zuora_source", "path": "models/src_zuora.yml", "original_file_path": "models/src_zuora.yml", "unique_id": "source.zuora_source.zuora.taxation_item", "fqn": ["zuora_source", "zuora", "taxation_item"], "source_name": "zuora", "source_description": "", "loader": "fivetran", "identifier": "zuora_taxation_item_data", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": "_fivetran_synced", "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Used to add a tax amount to an invoice item. Changes that you make with this object affect the product charges in your product catalog, but not the charges in existing subscriptions. To change taxes in existing subscriptions, you need to amend the subscription - remove the existing charge and replace it with the modified charge.", "columns": {"id": {"name": "id", "description": "The unique identifier of the taxation item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_fivetran_synced": {"name": "_fivetran_synced", "description": "Timestamp of when a record was last synced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_id": {"name": "account_id", "description": "The id of the account associated with the taxation item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "account_receivable_accounting_code_id": {"name": "account_receivable_accounting_code_id", "description": "The id of the accounting code for the account receivable.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "accounting_code": {"name": "accounting_code", "description": "The accounting code associated with the taxation item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "amendment_id": {"name": "amendment_id", "description": "The id of the amendment associated with the taxation item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "balance": {"name": "balance", "description": "The balance of the taxation item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bill_to_contact_id": {"name": "bill_to_contact_id", "description": "The id of the contact associated with the billing of the taxation item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_by_id": {"name": "created_by_id", "description": "The id of the user who created the taxation item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "created_date": {"name": "created_date", "description": "The date when the taxation item was created.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "credit_amount": {"name": "credit_amount", "description": "The credit amount of the taxation item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "exchange_rate": {"name": "exchange_rate", "description": "The exchange rate of the taxation item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "exchange_rate_date": {"name": "exchange_rate_date", "description": "The date of the exchange rate of the taxation item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "exempt_amount": {"name": "exempt_amount", "description": "The exempt amount of the taxation item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "exempt_amount_home_currency": {"name": "exempt_amount_home_currency", "description": "The exempt amount in home currency of the taxation item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "home_currency": {"name": "home_currency", "description": "The home currency of the taxation item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invoice_id": {"name": "invoice_id", "description": "The id of the invoice associated with the taxation item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invoice_item_id": {"name": "invoice_item_id", "description": "The id of the invoice item associated with the taxation item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "journal_entry_id": {"name": "journal_entry_id", "description": "The id of the journal entry associated with the taxation item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "The name of the taxation item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payment_amount": {"name": "payment_amount", "description": "The payment amount of the taxation item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "product_id": {"name": "product_id", "description": "The id of the product associated with the taxation item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "product_rate_plan_charge_id": {"name": "product_rate_plan_charge_id", "description": "The id of the product rate plan charge associated with the taxation item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "product_rate_plan_id": {"name": "product_rate_plan_id", "description": "The id of the product rate plan associated with the taxation item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rate_plan_charge_id": {"name": "rate_plan_charge_id", "description": "The id of the rate plan charge associated with the taxation item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rate_plan_id": {"name": "rate_plan_id", "description": "The id of the rate plan associated with the taxation item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sales_tax_payable_accounting_code_id": {"name": "sales_tax_payable_accounting_code_id", "description": "The id of the accounting code for the sales tax payable.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sold_to_contact_id": {"name": "sold_to_contact_id", "description": "The id of the contact associated with the sale of the taxation item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "subscription_id": {"name": "subscription_id", "description": "The id of the subscription associated with the taxation item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tax_amount": {"name": "tax_amount", "description": "The tax amount of the taxation item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tax_amount_home_currency": {"name": "tax_amount_home_currency", "description": "The tax amount in home currency of the taxation item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tax_date": {"name": "tax_date", "description": "The date of the tax of the taxation item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tax_description": {"name": "tax_description", "description": "The description of the tax of the taxation item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tax_mode": {"name": "tax_mode", "description": "The tax mode of the taxation item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tax_rate": {"name": "tax_rate", "description": "The tax rate of the taxation item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tax_rate_type": {"name": "tax_rate_type", "description": "The type of tax rate that applies to the taxation item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "transaction_currency": {"name": "transaction_currency", "description": "The currency in which the transaction was processed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_by_id": {"name": "updated_by_id", "description": "The id of the user who last updated the taxation item.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "updated_date": {"name": "updated_date", "description": "The date and time the taxation item was last updated.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"postgres\".\"zuora_source_integration_tests\".\"zuora_taxation_item_data\"", "created_at": 1682531376.2589529}}, "macros": {"macro.dbt_postgres.postgres__current_timestamp": {"name": "postgres__current_timestamp", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__current_timestamp", "macro_sql": "{% macro postgres__current_timestamp() -%}\n    now()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531374.973778, "supported_languages": null}, "macro.dbt_postgres.postgres__snapshot_string_as_time": {"name": "postgres__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__snapshot_string_as_time", "macro_sql": "{% macro postgres__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"'\" ~ timestamp ~ \"'::timestamp without time zone\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531374.974014, "supported_languages": null}, "macro.dbt_postgres.postgres__snapshot_get_time": {"name": "postgres__snapshot_get_time", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__snapshot_get_time", "macro_sql": "{% macro postgres__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp without time zone\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531374.974122, "supported_languages": null}, "macro.dbt_postgres.postgres__current_timestamp_backcompat": {"name": "postgres__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__current_timestamp_backcompat", "macro_sql": "{% macro postgres__current_timestamp_backcompat() %}\n    current_timestamp::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531374.974226, "supported_languages": null}, "macro.dbt_postgres.postgres__current_timestamp_in_utc_backcompat": {"name": "postgres__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/timestamps.sql", "original_file_path": "macros/timestamps.sql", "unique_id": "macro.dbt_postgres.postgres__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro postgres__current_timestamp_in_utc_backcompat() %}\n    (current_timestamp at time zone 'utc')::{{ type_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531374.9743192, "supported_languages": null}, "macro.dbt_postgres.postgres__get_catalog": {"name": "postgres__get_catalog", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_postgres.postgres__get_catalog", "macro_sql": "{% macro postgres__get_catalog(information_schema, schemas) -%}\n\n  {%- call statement('catalog', fetch_result=True) -%}\n    {#\n      If the user has multiple databases set and the first one is wrong, this will fail.\n      But we won't fail in the case where there are multiple quoting-difference-only dbs, which is better.\n    #}\n    {% set database = information_schema.database %}\n    {{ adapter.verify_database(database) }}\n\n    select\n        '{{ database }}' as table_database,\n        sch.nspname as table_schema,\n        tbl.relname as table_name,\n        case tbl.relkind\n            when 'v' then 'VIEW'\n            else 'BASE TABLE'\n        end as table_type,\n        tbl_desc.description as table_comment,\n        col.attname as column_name,\n        col.attnum as column_index,\n        pg_catalog.format_type(col.atttypid, col.atttypmod) as column_type,\n        col_desc.description as column_comment,\n        pg_get_userbyid(tbl.relowner) as table_owner\n\n    from pg_catalog.pg_namespace sch\n    join pg_catalog.pg_class tbl on tbl.relnamespace = sch.oid\n    join pg_catalog.pg_attribute col on col.attrelid = tbl.oid\n    left outer join pg_catalog.pg_description tbl_desc on (tbl_desc.objoid = tbl.oid and tbl_desc.objsubid = 0)\n    left outer join pg_catalog.pg_description col_desc on (col_desc.objoid = tbl.oid and col_desc.objsubid = col.attnum)\n\n    where (\n        {%- for schema in schemas -%}\n          upper(sch.nspname) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      and not pg_is_other_temp_schema(sch.oid) -- not a temporary schema belonging to another session\n      and tbl.relpersistence in ('p', 'u') -- [p]ermanent table or [u]nlogged table. Exclude [t]emporary tables\n      and tbl.relkind in ('r', 'v', 'f', 'p') -- o[r]dinary table, [v]iew, [f]oreign table, [p]artitioned table. Other values are [i]ndex, [S]equence, [c]omposite type, [t]OAST table, [m]aterialized view\n      and col.attnum > 0 -- negative numbers are used for system columns such as oid\n      and not col.attisdropped -- column as not been dropped\n\n    order by\n        sch.nspname,\n        tbl.relname,\n        col.attnum\n\n  {%- endcall -%}\n\n  {{ return(load_result('catalog').table) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531374.975374, "supported_languages": null}, "macro.dbt_postgres.postgres_get_relations": {"name": "postgres_get_relations", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/relations.sql", "original_file_path": "macros/relations.sql", "unique_id": "macro.dbt_postgres.postgres_get_relations", "macro_sql": "{% macro postgres_get_relations () -%}\n\n  {#\n      -- in pg_depend, objid is the dependent, refobjid is the referenced object\n      --  > a pg_depend entry indicates that the referenced object cannot be\n      --  > dropped without also dropping the dependent object.\n  #}\n\n  {%- call statement('relations', fetch_result=True) -%}\n    with relation as (\n        select\n            pg_rewrite.ev_class as class,\n            pg_rewrite.oid as id\n        from pg_rewrite\n    ),\n    class as (\n        select\n            oid as id,\n            relname as name,\n            relnamespace as schema,\n            relkind as kind\n        from pg_class\n    ),\n    dependency as (\n        select distinct\n            pg_depend.objid as id,\n            pg_depend.refobjid as ref\n        from pg_depend\n    ),\n    schema as (\n        select\n            pg_namespace.oid as id,\n            pg_namespace.nspname as name\n        from pg_namespace\n        where nspname != 'information_schema' and nspname not like 'pg\\_%'\n    ),\n    referenced as (\n        select\n            relation.id AS id,\n            referenced_class.name ,\n            referenced_class.schema ,\n            referenced_class.kind\n        from relation\n        join class as referenced_class on relation.class=referenced_class.id\n        where referenced_class.kind in ('r', 'v')\n    ),\n    relationships as (\n        select\n            referenced.name as referenced_name,\n            referenced.schema as referenced_schema_id,\n            dependent_class.name as dependent_name,\n            dependent_class.schema as dependent_schema_id,\n            referenced.kind as kind\n        from referenced\n        join dependency on referenced.id=dependency.id\n        join class as dependent_class on dependency.ref=dependent_class.id\n        where\n            (referenced.name != dependent_class.name or\n             referenced.schema != dependent_class.schema)\n    )\n\n    select\n        referenced_schema.name as referenced_schema,\n        relationships.referenced_name as referenced_name,\n        dependent_schema.name as dependent_schema,\n        relationships.dependent_name as dependent_name\n    from relationships\n    join schema as dependent_schema on relationships.dependent_schema_id=dependent_schema.id\n    join schema as referenced_schema on relationships.referenced_schema_id=referenced_schema.id\n    group by referenced_schema, referenced_name, dependent_schema, dependent_name\n    order by referenced_schema, referenced_name, dependent_schema, dependent_name;\n\n  {%- endcall -%}\n\n  {{ return(load_result('relations').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531374.975947, "supported_languages": null}, "macro.dbt_postgres.postgres__create_table_as": {"name": "postgres__create_table_as", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__create_table_as", "macro_sql": "{% macro postgres__create_table_as(temporary, relation, sql) -%}\n  {%- set unlogged = config.get('unlogged', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary -%}\n    temporary\n  {%- elif unlogged -%}\n    unlogged\n  {%- endif %} table {{ relation }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531374.981334, "supported_languages": null}, "macro.dbt_postgres.postgres__get_create_index_sql": {"name": "postgres__get_create_index_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_create_index_sql", "macro_sql": "{% macro postgres__get_create_index_sql(relation, index_dict) -%}\n  {%- set index_config = adapter.parse_index(index_dict) -%}\n  {%- set comma_separated_columns = \", \".join(index_config.columns) -%}\n  {%- set index_name = index_config.render(relation) -%}\n\n  create {% if index_config.unique -%}\n    unique\n  {%- endif %} index if not exists\n  \"{{ index_name }}\"\n  on {{ relation }} {% if index_config.type -%}\n    using {{ index_config.type }}\n  {%- endif %}\n  ({{ comma_separated_columns }});\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531374.981772, "supported_languages": null}, "macro.dbt_postgres.postgres__create_schema": {"name": "postgres__create_schema", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__create_schema", "macro_sql": "{% macro postgres__create_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier().include(database=False) }}\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531374.982075, "supported_languages": null}, "macro.dbt_postgres.postgres__drop_schema": {"name": "postgres__drop_schema", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__drop_schema", "macro_sql": "{% macro postgres__drop_schema(relation) -%}\n  {% if relation.database -%}\n    {{ adapter.verify_database(relation.database) }}\n  {%- endif -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier().include(database=False) }} cascade\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531374.982351, "supported_languages": null}, "macro.dbt_postgres.postgres__get_columns_in_relation": {"name": "postgres__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_columns_in_relation", "macro_sql": "{% macro postgres__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from {{ relation.information_schema('columns') }}\n      where table_name = '{{ relation.identifier }}'\n        {% if relation.schema %}\n        and table_schema = '{{ relation.schema }}'\n        {% endif %}\n      order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.sql_convert_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531374.982812, "supported_languages": null}, "macro.dbt_postgres.postgres__list_relations_without_caching": {"name": "postgres__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__list_relations_without_caching", "macro_sql": "{% macro postgres__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      '{{ schema_relation.database }}' as database,\n      tablename as name,\n      schemaname as schema,\n      'table' as type\n    from pg_tables\n    where schemaname ilike '{{ schema_relation.schema }}'\n    union all\n    select\n      '{{ schema_relation.database }}' as database,\n      viewname as name,\n      schemaname as schema,\n      'view' as type\n    from pg_views\n    where schemaname ilike '{{ schema_relation.schema }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531374.98317, "supported_languages": null}, "macro.dbt_postgres.postgres__information_schema_name": {"name": "postgres__information_schema_name", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__information_schema_name", "macro_sql": "{% macro postgres__information_schema_name(database) -%}\n  {% if database_name -%}\n    {{ adapter.verify_database(database_name) }}\n  {%- endif -%}\n  information_schema\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531374.983335, "supported_languages": null}, "macro.dbt_postgres.postgres__list_schemas": {"name": "postgres__list_schemas", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__list_schemas", "macro_sql": "{% macro postgres__list_schemas(database) %}\n  {% if database -%}\n    {{ adapter.verify_database(database) }}\n  {%- endif -%}\n  {% call statement('list_schemas', fetch_result=True, auto_begin=False) %}\n    select distinct nspname from pg_namespace\n  {% endcall %}\n  {{ return(load_result('list_schemas').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531374.983642, "supported_languages": null}, "macro.dbt_postgres.postgres__check_schema_exists": {"name": "postgres__check_schema_exists", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__check_schema_exists", "macro_sql": "{% macro postgres__check_schema_exists(information_schema, schema) -%}\n  {% if information_schema.database -%}\n    {{ adapter.verify_database(information_schema.database) }}\n  {%- endif -%}\n  {% call statement('check_schema_exists', fetch_result=True, auto_begin=False) %}\n    select count(*) from pg_namespace where nspname = '{{ schema }}'\n  {% endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531374.9839869, "supported_languages": null}, "macro.dbt_postgres.postgres__make_relation_with_suffix": {"name": "postgres__make_relation_with_suffix", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_relation_with_suffix", "macro_sql": "{% macro postgres__make_relation_with_suffix(base_relation, suffix, dstring) %}\n    {% if dstring %}\n      {% set dt = modules.datetime.datetime.now() %}\n      {% set dtstring = dt.strftime(\"%H%M%S%f\") %}\n      {% set suffix = suffix ~ dtstring %}\n    {% endif %}\n    {% set suffix_length = suffix|length %}\n    {% set relation_max_name_length = base_relation.relation_max_name_length() %}\n    {% if suffix_length > relation_max_name_length %}\n        {% do exceptions.raise_compiler_error('Relation suffix is too long (' ~ suffix_length ~ ' characters). Maximum length is ' ~ relation_max_name_length ~ ' characters.') %}\n    {% endif %}\n    {% set identifier = base_relation.identifier[:relation_max_name_length - suffix_length] ~ suffix %}\n\n    {{ return(base_relation.incorporate(path={\"identifier\": identifier })) }}\n\n  {% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531374.984843, "supported_languages": null}, "macro.dbt_postgres.postgres__make_intermediate_relation": {"name": "postgres__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_intermediate_relation", "macro_sql": "{% macro postgres__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(postgres__make_relation_with_suffix(base_relation, suffix, dstring=False)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531374.985031, "supported_languages": null}, "macro.dbt_postgres.postgres__make_temp_relation": {"name": "postgres__make_temp_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_temp_relation", "macro_sql": "{% macro postgres__make_temp_relation(base_relation, suffix) %}\n    {% set temp_relation = postgres__make_relation_with_suffix(base_relation, suffix, dstring=True) %}\n    {{ return(temp_relation.incorporate(path={\"schema\": none,\n                                              \"database\": none})) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531374.985311, "supported_languages": null}, "macro.dbt_postgres.postgres__make_backup_relation": {"name": "postgres__make_backup_relation", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__make_backup_relation", "macro_sql": "{% macro postgres__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {% set backup_relation = postgres__make_relation_with_suffix(base_relation, suffix, dstring=False) %}\n    {{ return(backup_relation.incorporate(type=backup_relation_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_relation_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531374.985558, "supported_languages": null}, "macro.dbt_postgres.postgres_escape_comment": {"name": "postgres_escape_comment", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres_escape_comment", "macro_sql": "{% macro postgres_escape_comment(comment) -%}\n  {% if comment is not string %}\n    {% do exceptions.raise_compiler_error('cannot escape a non-string: ' ~ comment) %}\n  {% endif %}\n  {%- set magic = '$dbt_comment_literal_block$' -%}\n  {%- if magic in comment -%}\n    {%- do exceptions.raise_compiler_error('The string ' ~ magic ~ ' is not allowed in comments.') -%}\n  {%- endif -%}\n  {{ magic }}{{ comment }}{{ magic }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531374.985939, "supported_languages": null}, "macro.dbt_postgres.postgres__alter_relation_comment": {"name": "postgres__alter_relation_comment", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__alter_relation_comment", "macro_sql": "{% macro postgres__alter_relation_comment(relation, comment) %}\n  {% set escaped_comment = postgres_escape_comment(comment) %}\n  comment on {{ relation.type }} {{ relation }} is {{ escaped_comment }};\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531374.9861372, "supported_languages": null}, "macro.dbt_postgres.postgres__alter_column_comment": {"name": "postgres__alter_column_comment", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__alter_column_comment", "macro_sql": "{% macro postgres__alter_column_comment(relation, column_dict) %}\n  {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n  {% for column_name in column_dict if (column_name in existing_columns) %}\n    {% set comment = column_dict[column_name]['description'] %}\n    {% set escaped_comment = postgres_escape_comment(comment) %}\n    comment on column {{ relation }}.{{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }} is {{ escaped_comment }};\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres_escape_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531374.9867032, "supported_languages": null}, "macro.dbt_postgres.postgres__get_show_grant_sql": {"name": "postgres__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__get_show_grant_sql", "macro_sql": "\n\n{%- macro postgres__get_show_grant_sql(relation) -%}\n  select grantee, privilege_type\n  from {{ relation.information_schema('role_table_grants') }}\n      where grantor = current_role\n        and grantee != current_role\n        and table_schema = '{{ relation.schema }}'\n        and table_name = '{{ relation.identifier }}'\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531374.986927, "supported_languages": null}, "macro.dbt_postgres.postgres__copy_grants": {"name": "postgres__copy_grants", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_postgres.postgres__copy_grants", "macro_sql": "{% macro postgres__copy_grants() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531374.9871302, "supported_languages": null}, "macro.dbt_postgres.postgres__get_incremental_default_sql": {"name": "postgres__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/materializations/incremental_strategies.sql", "original_file_path": "macros/materializations/incremental_strategies.sql", "unique_id": "macro.dbt_postgres.postgres__get_incremental_default_sql", "macro_sql": "{% macro postgres__get_incremental_default_sql(arg_dict) %}\n\n  {% if arg_dict[\"unique_key\"] %}\n    {% do return(get_incremental_delete_insert_sql(arg_dict)) %}\n  {% else %}\n    {% do return(get_incremental_append_sql(arg_dict)) %}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_delete_insert_sql", "macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531374.98755, "supported_languages": null}, "macro.dbt_postgres.postgres__snapshot_merge_sql": {"name": "postgres__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/materializations/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshot_merge.sql", "unique_id": "macro.dbt_postgres.postgres__snapshot_merge_sql", "macro_sql": "{% macro postgres__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    update {{ target }}\n    set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_scd_id::text = {{ target }}.dbt_scd_id::text\n      and DBT_INTERNAL_SOURCE.dbt_change_type::text in ('update'::text, 'delete'::text)\n      and {{ target }}.dbt_valid_to is null;\n\n    insert into {{ target }} ({{ insert_cols_csv }})\n    select {% for column in insert_cols -%}\n        DBT_INTERNAL_SOURCE.{{ column }} {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_change_type::text = 'insert'::text;\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531374.98831, "supported_languages": null}, "macro.dbt_postgres.postgres__dateadd": {"name": "postgres__dateadd", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt_postgres.postgres__dateadd", "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531374.9885418, "supported_languages": null}, "macro.dbt_postgres.postgres__listagg": {"name": "postgres__listagg", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt_postgres.postgres__listagg", "macro_sql": "{% macro postgres__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        (array_agg(\n            {{ measure }}\n            {% if order_by_clause -%}\n            {{ order_by_clause }}\n            {%- endif %}\n        ))[1:{{ limit_num }}],\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        )\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531374.989093, "supported_languages": null}, "macro.dbt_postgres.postgres__datediff": {"name": "postgres__datediff", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt_postgres.postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) -%}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531374.992021, "supported_languages": null}, "macro.dbt_postgres.postgres__any_value": {"name": "postgres__any_value", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt_postgres.postgres__any_value", "macro_sql": "{% macro postgres__any_value(expression) -%}\n\n    min({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531374.9921658, "supported_languages": null}, "macro.dbt_postgres.postgres__last_day": {"name": "postgres__last_day", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt_postgres.postgres__last_day", "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- postgres dateadd does not support quarter interval.\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd('month', '3', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc", "macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531374.992624, "supported_languages": null}, "macro.dbt_postgres.postgres__split_part": {"name": "postgres__split_part", "resource_type": "macro", "package_name": "dbt_postgres", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt_postgres.postgres__split_part", "macro_sql": "{% macro postgres__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__split_part", "macro.dbt._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531374.992991, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531374.99398, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531374.994168, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531374.994303, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531374.994431, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531374.994567, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531374.995029, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531374.99552, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531374.995829, "supported_languages": null}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531374.9962392, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531374.996486, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531374.999778, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531374.9999418, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.0001438, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.000819, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.0009642, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.001121, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n          select {{ check_cols_config | join(', ') }} from ({{ node['compiled_code'] }}) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.002414, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.003752, "supported_languages": null}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.007183, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.007466, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.007638, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.007715, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.0078459, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.007956, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.008151, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.0089478, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.009114, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.0093389, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.009723, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.015178, "supported_languages": ["sql"]}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.017013, "supported_languages": ["sql"]}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.0174148, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.017687, "supported_languages": null}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.0180311, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.018369, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.0199199, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.020455, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.0210829, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.0213, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.021954, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.027255, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.0289578, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.029243, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.030143, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.0303879, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.030964, "supported_languages": null}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.0316339, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.032417, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.032762, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.033, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.033291, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.03347, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.033756, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.0339358, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.034176, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.0343418, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.034475, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.0347269, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.039524, "supported_languages": ["sql"]}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.044246, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.0454159, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.04651, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.0472891, "supported_languages": null}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.049742, "supported_languages": ["sql"]}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.05022, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.050386, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.050776, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.0511491, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.053455, "supported_languages": ["sql"]}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.053816, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.054044, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=True) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.0554419, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.0558, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.055959, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.0561228, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.056349, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparision later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.059414, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.063967, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.0649312, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.065154, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.06559, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.065759, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.065876, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.066004, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.0661068, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.06625, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.066358, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.066797, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.066976, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.068157, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.0685382, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.068744, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.069244, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.069488, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.0697532, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.070102, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.070324, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.070633, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.070894, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.071112, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.071608, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.07305, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.073605, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.0738702, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.0754519, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.076593, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.0772932, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.077523, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.07775, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.077821, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.078262, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.078423, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.078672, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.0787961, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.079026, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.0791402, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.079446, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.0795898, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.07979, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.0798552, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.080087, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.08023, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.080496, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.080619, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.081172, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.081621, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.081912, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.082059, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.08231, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.082433, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.082659, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.0828001, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.083016, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.083155, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.083371, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.08346, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.083711, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.083831, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.084055, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.0841448, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.0849679, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.085103, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.085252, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.085382, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.085589, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.085727, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.085873, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.086029, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.086171, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.086307, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.086451, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.086578, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.086716, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.086841, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.087086, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.087204, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.0874398, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.087529, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.087869, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.0882611, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.0883992, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.088896, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.0890481, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.089254, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.0895061, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.089619, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.090065, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.090292, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.09056, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.0906858, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.091018, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.091187, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.0913322, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.091496, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_postgres.postgres__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.0919318, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.0920682, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_postgres.postgres__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.092192, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.092284, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.092431, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.092494, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.092639, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_postgres.postgres__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.0927901, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.093194, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.093323, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.093462, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.093838, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.096809, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.097096, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.09729, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.0975628, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.097792, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.098263, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.098482, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.0987039, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.098891, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.099058, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.0992682, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.0995488, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.09978, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.1003032, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.100514, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.100637, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.100811, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.101218, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.101595, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.103196, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.103358, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.1035268, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.103724, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.104028, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.104203, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.10429, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.1044989, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.1046689, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.104892, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.105066, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.105271, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.105897, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.1060631, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.106289, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.1065018, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.107525, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.108331, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.10851, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.108715, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.108881, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.109132, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.1096928, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.1110358, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.111299, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.1114829, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.111638, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.1118279, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.112054, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.11224, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.112517, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.1126962, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.112843, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_postgres.postgres__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.11434, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.114481, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.114764, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.11493, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.1152442, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.1154518, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.1160362, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.11626, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.116964, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.118175, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.118314, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {%- set resolved = ref(*_ref) -%}\n        {%- do ref_dict.update({_ref | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args,dbt_load_df_function):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.1186821, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.11906, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.119628, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args: ref(*args, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.1201532, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.1202261, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.1207, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.1209059, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.1211588, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.121403, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"name": "get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.121713, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"name": "default__get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.122157, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"name": "get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.122567, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"name": "default__get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.12315, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"name": "get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.123435, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"name": "default__get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.1237178, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"name": "test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.124667, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"name": "default__test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.1256971, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"name": "test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.126459, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"name": "default__test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.127421, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"name": "test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.128038, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"name": "default__test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.128344, "supported_languages": null}, "macro.dbt_utils.test_recency": {"name": "test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.1289768, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"name": "default__test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.129793, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"name": "test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.130346, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"name": "default__test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.130806, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"name": "test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.1313531, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"name": "default__test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.131802, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"name": "test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.132297, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"name": "default__test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.1326458, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"name": "test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.133058, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"name": "default__test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.133491, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"name": "test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.134036, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"name": "default__test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.134618, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"name": "test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.135127, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"name": "default__test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.1354392, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.135811, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"name": "default__test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.1362638, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"name": "test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.136894, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"name": "default__test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.137674, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"name": "test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.138495, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"name": "default__test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt.type_timestamp", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.139317, "supported_languages": null}, "macro.dbt_utils.test_equality": {"name": "test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.1400042, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"name": "default__test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.1408372, "supported_languages": null}, "macro.dbt_utils.test_not_empty_string": {"name": "test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.141278, "supported_languages": null}, "macro.dbt_utils.default__test_not_empty_string": {"name": "default__test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.141543, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"name": "test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.144553, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"name": "default__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.146393, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"name": "pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.146679, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"name": "default__pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.14683, "supported_languages": null}, "macro.dbt_utils._is_relation": {"name": "_is_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_relation.sql", "original_file_path": "macros/jinja_helpers/_is_relation.sql", "unique_id": "macro.dbt_utils._is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.147247, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"name": "pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.147504, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"name": "default__pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.147679, "supported_languages": null}, "macro.dbt_utils.log_info": {"name": "log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.147902, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"name": "default__log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.1480541, "supported_languages": null}, "macro.dbt_utils.slugify": {"name": "slugify", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "unique_id": "macro.dbt_utils.slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.1486132, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"name": "_is_ephemeral", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_ephemeral.sql", "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql", "unique_id": "macro.dbt_utils._is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.149358, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.1499782, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.150511, "supported_languages": null}, "macro.dbt_utils.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.150723, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.1510458, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"name": "nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.1513312, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"name": "default__nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.151646, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"name": "get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.15224, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"name": "default__get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.1530921, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.153911, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.1543329, "supported_languages": null}, "macro.dbt_utils.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.154516, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.155, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"name": "get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.155606, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"name": "default__get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.1563818, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"name": "get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.15675, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"name": "default__get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.157013, "supported_languages": null}, "macro.dbt_utils.star": {"name": "star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.1580758, "supported_languages": null}, "macro.dbt_utils.default__star": {"name": "default__star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.159329, "supported_languages": null}, "macro.dbt_utils.unpivot": {"name": "unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.160481, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"name": "default__unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.1621618, "supported_languages": null}, "macro.dbt_utils.safe_divide": {"name": "safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.safe_divide", "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_divide"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.162477, "supported_languages": null}, "macro.dbt_utils.default__safe_divide": {"name": "default__safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.default__safe_divide", "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.162601, "supported_languages": null}, "macro.dbt_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.1652339, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"name": "default__union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.1683462, "supported_languages": null}, "macro.dbt_utils.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.168622, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.168841, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"name": "deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.postgres__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.169533, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"name": "default__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.169729, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"name": "redshift__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.169909, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"name": "postgres__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.170083, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"name": "snowflake__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.170228, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"name": "bigquery__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.1703758, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.170719, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.170932, "supported_languages": null}, "macro.dbt_utils.safe_add": {"name": "safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.171359, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"name": "default__safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.1719391, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"name": "nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.172287, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"name": "default__nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.172605, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.1740632, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"name": "default__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.1744058, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"name": "bigquery__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.175159, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"name": "_bigquery__get_matching_schemata", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.1756291, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.1766121, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.1781042, "supported_languages": null}, "macro.dbt_utils.pivot": {"name": "pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.1790872, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"name": "default__pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.179847, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"name": "get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.180286, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"name": "default__get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.180968, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"name": "width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.182441, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"name": "default__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.182884, "supported_languages": null}, "macro.dbt_utils.redshift__width_bucket": {"name": "redshift__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt.safe_cast(expr, dbt.type_numeric() ) }} %\n                {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.183294, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"name": "snowflake__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.1834629, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.1838322, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.184407, "supported_languages": null}, "macro.dbt_utils.generate_surrogate_key": {"name": "generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.1848168, "supported_languages": null}, "macro.dbt_utils.default__generate_surrogate_key": {"name": "default__generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{% if var('surrogate_key_treat_nulls_as_empty_strings', False) %}\n    {% set default_null_value = \"\" %}\n{% else %}\n    {% set default_null_value = '_dbt_utils_surrogate_key_null_'%}\n{% endif %}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.185428, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"name": "get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.postgres__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.185793, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"name": "default__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.185929, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"name": "postgres__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.1860638, "supported_languages": null}, "macro.dbt_utils.get_single_value": {"name": "get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.get_single_value", "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_single_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.1865878, "supported_languages": null}, "macro.dbt_utils.default__get_single_value": {"name": "default__get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.default__get_single_value", "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.187382, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"name": "degrees_to_radians", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.188353, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"name": "haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.188616, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"name": "default__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.1900969, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"name": "bigquery__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.190846, "supported_languages": null}, "macro.spark_utils.get_tables": {"name": "get_tables", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "unique_id": "macro.spark_utils.get_tables", "macro_sql": "{% macro get_tables(table_regex_pattern='.*') %}\n\n  {% set tables = [] %}\n  {% for database in spark__list_schemas('not_used') %}\n    {% for table in spark__list_relations_without_caching(database[0]) %}\n      {% set db_tablename = database[0] ~ \".\" ~ table[1] %}\n      {% set is_match = modules.re.match(table_regex_pattern, db_tablename) %}\n      {% if is_match %}\n        {% call statement('table_detail', fetch_result=True) -%}\n          describe extended {{ db_tablename }}\n        {% endcall %}\n\n        {% set table_type = load_result('table_detail').table|reverse|selectattr(0, 'in', ('type', 'TYPE', 'Type'))|first %}\n        {% if table_type[1]|lower != 'view' %}\n          {{ tables.append(db_tablename) }}\n        {% endif %}\n      {% endif %}\n    {% endfor %}\n  {% endfor %}\n  {{ return(tables) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.195544, "supported_languages": null}, "macro.spark_utils.get_delta_tables": {"name": "get_delta_tables", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "unique_id": "macro.spark_utils.get_delta_tables", "macro_sql": "{% macro get_delta_tables(table_regex_pattern='.*') %}\n\n  {% set delta_tables = [] %}\n  {% for db_tablename in get_tables(table_regex_pattern) %}\n    {% call statement('table_detail', fetch_result=True) -%}\n      describe extended {{ db_tablename }}\n    {% endcall %}\n\n    {% set table_type = load_result('table_detail').table|reverse|selectattr(0, 'in', ('provider', 'PROVIDER', 'Provider'))|first %}\n    {% if table_type[1]|lower == 'delta' %}\n      {{ delta_tables.append(db_tablename) }}\n    {% endif %}\n  {% endfor %}\n  {{ return(delta_tables) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.get_tables", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.196189, "supported_languages": null}, "macro.spark_utils.get_statistic_columns": {"name": "get_statistic_columns", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "unique_id": "macro.spark_utils.get_statistic_columns", "macro_sql": "{% macro get_statistic_columns(table) %}\n\n  {% call statement('input_columns', fetch_result=True) %}\n    SHOW COLUMNS IN {{ table }}\n  {% endcall %}\n  {% set input_columns = load_result('input_columns').table %}\n\n  {% set output_columns = [] %}\n  {% for column in input_columns %}\n    {% call statement('column_information', fetch_result=True) %}\n      DESCRIBE TABLE {{ table }} `{{ column[0] }}`\n    {% endcall %}\n    {% if not load_result('column_information').table[1][1].startswith('struct') and not load_result('column_information').table[1][1].startswith('array')  %}\n      {{ output_columns.append('`' ~ column[0] ~ '`') }}\n    {% endif %}\n  {% endfor %}\n  {{ return(output_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.196979, "supported_languages": null}, "macro.spark_utils.spark_optimize_delta_tables": {"name": "spark_optimize_delta_tables", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "unique_id": "macro.spark_utils.spark_optimize_delta_tables", "macro_sql": "{% macro spark_optimize_delta_tables(table_regex_pattern='.*') %}\n\n  {% for table in get_delta_tables(table_regex_pattern) %}\n    {% set start=modules.datetime.datetime.now() %}\n    {% set message_prefix=loop.index ~ \" of \" ~ loop.length %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Optimizing \" ~ table) }}\n    {% do run_query(\"optimize \" ~ table) %}\n    {% set end=modules.datetime.datetime.now() %}\n    {% set total_seconds = (end - start).total_seconds() | round(2)  %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Finished \" ~ table ~ \" in \" ~ total_seconds ~ \"s\") }}\n  {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.get_delta_tables", "macro.dbt_utils.log_info", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.1976562, "supported_languages": null}, "macro.spark_utils.spark_vacuum_delta_tables": {"name": "spark_vacuum_delta_tables", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "unique_id": "macro.spark_utils.spark_vacuum_delta_tables", "macro_sql": "{% macro spark_vacuum_delta_tables(table_regex_pattern='.*') %}\n\n  {% for table in get_delta_tables(table_regex_pattern) %}\n    {% set start=modules.datetime.datetime.now() %}\n    {% set message_prefix=loop.index ~ \" of \" ~ loop.length %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Vacuuming \" ~ table) }}\n    {% do run_query(\"vacuum \" ~ table) %}\n    {% set end=modules.datetime.datetime.now() %}\n    {% set total_seconds = (end - start).total_seconds() | round(2)  %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Finished \" ~ table ~ \" in \" ~ total_seconds ~ \"s\") }}\n  {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.get_delta_tables", "macro.dbt_utils.log_info", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.1983092, "supported_languages": null}, "macro.spark_utils.spark_analyze_tables": {"name": "spark_analyze_tables", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/maintenance_operation.sql", "original_file_path": "macros/maintenance_operation.sql", "unique_id": "macro.spark_utils.spark_analyze_tables", "macro_sql": "{% macro spark_analyze_tables(table_regex_pattern='.*') %}\n\n  {% for table in get_tables(table_regex_pattern) %}\n    {% set start=modules.datetime.datetime.now() %}\n    {% set columns = get_statistic_columns(table) | join(',') %}\n    {% set message_prefix=loop.index ~ \" of \" ~ loop.length %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Analyzing \" ~ table) }}\n    {% if columns != '' %}\n      {% do run_query(\"analyze table \" ~ table ~ \" compute statistics for columns \" ~ columns) %}\n    {% endif %}\n    {% set end=modules.datetime.datetime.now() %}\n    {% set total_seconds = (end - start).total_seconds() | round(2)  %}\n    {{ dbt_utils.log_info(message_prefix ~ \" Finished \" ~ table ~ \" in \" ~ total_seconds ~ \"s\") }}\n  {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.get_tables", "macro.spark_utils.get_statistic_columns", "macro.dbt_utils.log_info", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.1991801, "supported_languages": null}, "macro.spark_utils.spark__concat": {"name": "spark__concat", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/concat.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/concat.sql", "unique_id": "macro.spark_utils.spark__concat", "macro_sql": "{% macro spark__concat(fields) -%}\n    concat({{ fields|join(', ') }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.1993558, "supported_languages": null}, "macro.spark_utils.spark__type_numeric": {"name": "spark__type_numeric", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/datatypes.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/datatypes.sql", "unique_id": "macro.spark_utils.spark__type_numeric", "macro_sql": "{% macro spark__type_numeric() %}\n    decimal(28, 6)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.199452, "supported_languages": null}, "macro.spark_utils.spark__dateadd": {"name": "spark__dateadd", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/dateadd.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/dateadd.sql", "unique_id": "macro.spark_utils.spark__dateadd", "macro_sql": "{% macro spark__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {%- set clock_component -%}\n        {# make sure the dates + timestamps are real, otherwise raise an error asap #}\n        to_unix_timestamp({{ spark_utils.assert_not_null('to_timestamp', from_date_or_timestamp) }})\n        - to_unix_timestamp({{ spark_utils.assert_not_null('date', from_date_or_timestamp) }})\n    {%- endset -%}\n\n    {%- if datepart in ['day', 'week'] -%}\n        \n        {%- set multiplier = 7 if datepart == 'week' else 1 -%}\n\n        to_timestamp(\n            to_unix_timestamp(\n                date_add(\n                    {{ spark_utils.assert_not_null('date', from_date_or_timestamp) }},\n                    cast({{interval}} * {{multiplier}} as int)\n                )\n            ) + {{clock_component}}\n        )\n\n    {%- elif datepart in ['month', 'quarter', 'year'] -%}\n    \n        {%- set multiplier -%} \n            {%- if datepart == 'month' -%} 1\n            {%- elif datepart == 'quarter' -%} 3\n            {%- elif datepart == 'year' -%} 12\n            {%- endif -%}\n        {%- endset -%}\n\n        to_timestamp(\n            to_unix_timestamp(\n                add_months(\n                    {{ spark_utils.assert_not_null('date', from_date_or_timestamp) }},\n                    cast({{interval}} * {{multiplier}} as int)\n                )\n            ) + {{clock_component}}\n        )\n\n    {%- elif datepart in ('hour', 'minute', 'second', 'millisecond', 'microsecond') -%}\n    \n        {%- set multiplier -%} \n            {%- if datepart == 'hour' -%} 3600\n            {%- elif datepart == 'minute' -%} 60\n            {%- elif datepart == 'second' -%} 1\n            {%- elif datepart == 'millisecond' -%} (1/1000000)\n            {%- elif datepart == 'microsecond' -%} (1/1000000)\n            {%- endif -%}\n        {%- endset -%}\n\n        to_timestamp(\n            {{ spark_utils.assert_not_null('to_unix_timestamp', from_date_or_timestamp) }}\n            + cast({{interval}} * {{multiplier}} as int)\n        )\n\n    {%- else -%}\n\n        {{ exceptions.raise_compiler_error(\"macro dateadd not implemented for datepart ~ '\" ~ datepart ~ \"' ~ on Spark\") }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.assert_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.202121, "supported_languages": null}, "macro.spark_utils.spark__datediff": {"name": "spark__datediff", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/datediff.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/datediff.sql", "unique_id": "macro.spark_utils.spark__datediff", "macro_sql": "{% macro spark__datediff(first_date, second_date, datepart) %}\n\n    {%- if datepart in ['day', 'week', 'month', 'quarter', 'year'] -%}\n    \n        {# make sure the dates are real, otherwise raise an error asap #}\n        {% set first_date = spark_utils.assert_not_null('date', first_date) %}\n        {% set second_date = spark_utils.assert_not_null('date', second_date) %}\n    \n    {%- endif -%}\n    \n    {%- if datepart == 'day' -%}\n    \n        datediff({{second_date}}, {{first_date}})\n    \n    {%- elif datepart == 'week' -%}\n    \n        case when {{first_date}} < {{second_date}}\n            then floor(datediff({{second_date}}, {{first_date}})/7)\n            else ceil(datediff({{second_date}}, {{first_date}})/7)\n            end\n        \n        -- did we cross a week boundary (Sunday)?\n        + case\n            when {{first_date}} < {{second_date}} and dayofweek({{second_date}}) < dayofweek({{first_date}}) then 1\n            when {{first_date}} > {{second_date}} and dayofweek({{second_date}}) > dayofweek({{first_date}}) then -1\n            else 0 end\n\n    {%- elif datepart == 'month' -%}\n\n        case when {{first_date}} < {{second_date}}\n            then floor(months_between(date({{second_date}}), date({{first_date}})))\n            else ceil(months_between(date({{second_date}}), date({{first_date}})))\n            end\n        \n        -- did we cross a month boundary?\n        + case\n            when {{first_date}} < {{second_date}} and dayofmonth({{second_date}}) < dayofmonth({{first_date}}) then 1\n            when {{first_date}} > {{second_date}} and dayofmonth({{second_date}}) > dayofmonth({{first_date}}) then -1\n            else 0 end\n        \n    {%- elif datepart == 'quarter' -%}\n    \n        case when {{first_date}} < {{second_date}}\n            then floor(months_between(date({{second_date}}), date({{first_date}}))/3)\n            else ceil(months_between(date({{second_date}}), date({{first_date}}))/3)\n            end\n        \n        -- did we cross a quarter boundary?\n        + case\n            when {{first_date}} < {{second_date}} and (\n                (dayofyear({{second_date}}) - (quarter({{second_date}}) * 365/4))\n                < (dayofyear({{first_date}}) - (quarter({{first_date}}) * 365/4))\n            ) then 1\n            when {{first_date}} > {{second_date}} and (\n                (dayofyear({{second_date}}) - (quarter({{second_date}}) * 365/4))\n                > (dayofyear({{first_date}}) - (quarter({{first_date}}) * 365/4))\n            ) then -1\n            else 0 end\n\n    {%- elif datepart == 'year' -%}\n    \n        year({{second_date}}) - year({{first_date}})\n\n    {%- elif datepart in ('hour', 'minute', 'second', 'millisecond', 'microsecond') -%}\n    \n        {%- set divisor -%} \n            {%- if datepart == 'hour' -%} 3600\n            {%- elif datepart == 'minute' -%} 60\n            {%- elif datepart == 'second' -%} 1\n            {%- elif datepart == 'millisecond' -%} (1/1000)\n            {%- elif datepart == 'microsecond' -%} (1/1000000)\n            {%- endif -%}\n        {%- endset -%}\n\n        case when {{first_date}} < {{second_date}}\n            then ceil((\n                {# make sure the timestamps are real, otherwise raise an error asap #}\n                {{ spark_utils.assert_not_null('to_unix_timestamp', spark_utils.assert_not_null('to_timestamp', second_date)) }}\n                - {{ spark_utils.assert_not_null('to_unix_timestamp', spark_utils.assert_not_null('to_timestamp', first_date)) }}\n            ) / {{divisor}})\n            else floor((\n                {{ spark_utils.assert_not_null('to_unix_timestamp', spark_utils.assert_not_null('to_timestamp', second_date)) }}\n                - {{ spark_utils.assert_not_null('to_unix_timestamp', spark_utils.assert_not_null('to_timestamp', first_date)) }}\n            ) / {{divisor}})\n            end\n            \n            {% if datepart == 'millisecond' %}\n                + cast(date_format({{second_date}}, 'SSS') as int)\n                - cast(date_format({{first_date}}, 'SSS') as int)\n            {% endif %}\n            \n            {% if datepart == 'microsecond' %}    \n                {% set capture_str = '[0-9]{4}-[0-9]{2}-[0-9]{2}.[0-9]{2}:[0-9]{2}:[0-9]{2}.([0-9]{6})' %}\n                -- Spark doesn't really support microseconds, so this is a massive hack!\n                -- It will only work if the timestamp-string is of the format\n                -- 'yyyy-MM-dd-HH mm.ss.SSSSSS'\n                + cast(regexp_extract({{second_date}}, '{{capture_str}}', 1) as int)\n                - cast(regexp_extract({{first_date}}, '{{capture_str}}', 1) as int)    \n            {% endif %}\n\n    {%- else -%}\n\n        {{ exceptions.raise_compiler_error(\"macro datediff not implemented for datepart ~ '\" ~ datepart ~ \"' ~ on Spark\") }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.assert_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.208703, "supported_languages": null}, "macro.spark_utils.spark__current_timestamp": {"name": "spark__current_timestamp", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/current_timestamp.sql", "unique_id": "macro.spark_utils.spark__current_timestamp", "macro_sql": "{% macro spark__current_timestamp() %}\n    current_timestamp()\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.2088351, "supported_languages": null}, "macro.spark_utils.spark__current_timestamp_in_utc": {"name": "spark__current_timestamp_in_utc", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/current_timestamp.sql", "unique_id": "macro.spark_utils.spark__current_timestamp_in_utc", "macro_sql": "{% macro spark__current_timestamp_in_utc() %}\n    unix_timestamp()\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.208904, "supported_languages": null}, "macro.spark_utils.spark__split_part": {"name": "spark__split_part", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/cross_db_utils/split_part.sql", "original_file_path": "macros/dbt_utils/cross_db_utils/split_part.sql", "unique_id": "macro.spark_utils.spark__split_part", "macro_sql": "{% macro spark__split_part(string_text, delimiter_text, part_number) %}\n\n    {% set delimiter_expr %}\n    \n        -- escape if starts with a special character\n        case when regexp_extract({{ delimiter_text }}, '([^A-Za-z0-9])(.*)', 1) != '_'\n            then concat('\\\\', {{ delimiter_text }})\n            else {{ delimiter_text }} end\n    \n    {% endset %}\n\n    {% set split_part_expr %}\n    \n    split(\n        {{ string_text }},\n        {{ delimiter_expr }}\n        )[({{ part_number - 1 }})]\n    \n    {% endset %}\n    \n    {{ return(split_part_expr) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.209408, "supported_languages": null}, "macro.spark_utils.spark__get_relations_by_pattern": {"name": "spark__get_relations_by_pattern", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "original_file_path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "unique_id": "macro.spark_utils.spark__get_relations_by_pattern", "macro_sql": "{% macro spark__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n        show table extended in {{ schema_pattern }} like '{{ table_pattern }}'\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n    {%- set tbl_relations = [] -%}\n    {%- for row in table_list['table'] -%}\n        {%- set tbl_relation = api.Relation.create(\n            database=None,\n            schema=row[0],\n            identifier=row[1],\n            type=('view' if 'Type: VIEW' in row[3] else 'table')\n        ) -%}\n        {%- do tbl_relations.append(tbl_relation) -%}\n    {%- endfor -%}\n\n    {{ return(tbl_relations) }}\n    {%- else -%}\n    {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.210885, "supported_languages": null}, "macro.spark_utils.spark__get_relations_by_prefix": {"name": "spark__get_relations_by_prefix", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "original_file_path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "unique_id": "macro.spark_utils.spark__get_relations_by_prefix", "macro_sql": "{% macro spark__get_relations_by_prefix(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {% set table_pattern = table_pattern ~ '*' %}\n    {{ return(spark_utils.spark__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.spark__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.2112691, "supported_languages": null}, "macro.spark_utils.spark__get_tables_by_pattern": {"name": "spark__get_tables_by_pattern", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "original_file_path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "unique_id": "macro.spark_utils.spark__get_tables_by_pattern", "macro_sql": "{% macro spark__get_tables_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(spark_utils.spark__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.spark__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.211533, "supported_languages": null}, "macro.spark_utils.spark__get_tables_by_prefix": {"name": "spark__get_tables_by_prefix", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "original_file_path": "macros/dbt_utils/sql/get_relations_by_prefix.sql", "unique_id": "macro.spark_utils.spark__get_tables_by_prefix", "macro_sql": "{% macro spark__get_tables_by_prefix(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(spark_utils.spark__get_relations_by_prefix(schema_pattern, table_pattern, exclude='', database=target.database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.spark_utils.spark__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.211797, "supported_languages": null}, "macro.spark_utils.assert_not_null": {"name": "assert_not_null", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/etc/assert_not_null.sql", "original_file_path": "macros/etc/assert_not_null.sql", "unique_id": "macro.spark_utils.assert_not_null", "macro_sql": "{% macro assert_not_null(function, arg) -%}\n  {{ return(adapter.dispatch('assert_not_null', 'spark_utils')(function, arg)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.spark_utils.default__assert_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.212113, "supported_languages": null}, "macro.spark_utils.default__assert_not_null": {"name": "default__assert_not_null", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/etc/assert_not_null.sql", "original_file_path": "macros/etc/assert_not_null.sql", "unique_id": "macro.spark_utils.default__assert_not_null", "macro_sql": "{% macro default__assert_not_null(function, arg) %}\n\n    coalesce({{function}}({{arg}}), nvl2({{function}}({{arg}}), assert_true({{function}}({{arg}}) is not null), null))\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.212288, "supported_languages": null}, "macro.spark_utils.spark__convert_timezone": {"name": "spark__convert_timezone", "resource_type": "macro", "package_name": "spark_utils", "path": "macros/snowplow/convert_timezone.sql", "original_file_path": "macros/snowplow/convert_timezone.sql", "unique_id": "macro.spark_utils.spark__convert_timezone", "macro_sql": "{% macro spark__convert_timezone(in_tz, out_tz, in_timestamp) %}\n    from_utc_timestamp(to_utc_timestamp({{in_timestamp}}, {{in_tz}}), {{out_tz}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.212477, "supported_languages": null}, "macro.fivetran_utils.enabled_vars": {"name": "enabled_vars", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/enabled_vars.sql", "original_file_path": "macros/enabled_vars.sql", "unique_id": "macro.fivetran_utils.enabled_vars", "macro_sql": "{% macro enabled_vars(vars) %}\n\n{% for v in vars %}\n    \n    {% if var(v, True) == False %}\n    {{ return(False) }}\n    {% endif %}\n\n{% endfor %}\n\n{{ return(True) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.212854, "supported_languages": null}, "macro.fivetran_utils.percentile": {"name": "percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.percentile", "macro_sql": "{% macro percentile(percentile_field, partition_field, percent) -%}\n\n{{ adapter.dispatch('percentile', 'fivetran_utils') (percentile_field, partition_field, percent) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.postgres__percentile"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.213681, "supported_languages": null}, "macro.fivetran_utils.default__percentile": {"name": "default__percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.default__percentile", "macro_sql": "{% macro default__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n        over ( partition by {{ partition_field }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.213829, "supported_languages": null}, "macro.fivetran_utils.redshift__percentile": {"name": "redshift__percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.redshift__percentile", "macro_sql": "{% macro redshift__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n        over ( partition by {{ partition_field }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.21397, "supported_languages": null}, "macro.fivetran_utils.bigquery__percentile": {"name": "bigquery__percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.bigquery__percentile", "macro_sql": "{% macro bigquery__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percentile_field }}, \n        {{ percent }}) \n        over (partition by {{ partition_field }}    \n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.214124, "supported_languages": null}, "macro.fivetran_utils.postgres__percentile": {"name": "postgres__percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.postgres__percentile", "macro_sql": "{% macro postgres__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile_cont( \n        {{ percent }} )\n        within group ( order by {{ percentile_field }} )\n    /* have to group by partition field */\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.214249, "supported_languages": null}, "macro.fivetran_utils.spark__percentile": {"name": "spark__percentile", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/percentile.sql", "original_file_path": "macros/percentile.sql", "unique_id": "macro.fivetran_utils.spark__percentile", "macro_sql": "{% macro spark__percentile(percentile_field, partition_field, percent)  %}\n\n    percentile( \n        {{ percentile_field }}, \n        {{ percent }}) \n        over (partition by {{ partition_field }}    \n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.214397, "supported_languages": null}, "macro.fivetran_utils.pivot_json_extract": {"name": "pivot_json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/pivot_json_extract.sql", "original_file_path": "macros/pivot_json_extract.sql", "unique_id": "macro.fivetran_utils.pivot_json_extract", "macro_sql": "{% macro pivot_json_extract(string, list_of_properties) %}\n\n{%- for property in list_of_properties -%}\n{%- if property is mapping -%}\nreplace( {{ fivetran_utils.json_extract(string, property.name) }}, '\"', '') as {{ property.alias if property.alias else property.name | replace(' ', '_') | replace('.', '_') | lower }}\n\n{%- else -%}\nreplace( {{ fivetran_utils.json_extract(string, property) }}, '\"', '') as {{ property | replace(' ', '_') | lower }}\n\n{%- endif -%}\n{%- if not loop.last -%},{%- endif %}\n{% endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.json_extract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.215183, "supported_languages": null}, "macro.fivetran_utils.persist_pass_through_columns": {"name": "persist_pass_through_columns", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/persist_pass_through_columns.sql", "original_file_path": "macros/persist_pass_through_columns.sql", "unique_id": "macro.fivetran_utils.persist_pass_through_columns", "macro_sql": "{% macro persist_pass_through_columns(pass_through_variable, identifier=none, transform='') %}\n\n{% if var(pass_through_variable, none) %}\n    {% for field in var(pass_through_variable) %}\n        , {{ transform ~ '(' ~ (identifier ~ '.' if identifier else '') ~ (field.alias if field.alias else field.name) ~ ')' }} as {{ field.alias if field.alias else field.name }}\n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.2157922, "supported_languages": null}, "macro.fivetran_utils.json_parse": {"name": "json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.json_parse", "macro_sql": "{% macro json_parse(string, string_path) -%}\n\n{{ adapter.dispatch('json_parse', 'fivetran_utils') (string, string_path) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.postgres__json_parse"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.2167811, "supported_languages": null}, "macro.fivetran_utils.default__json_parse": {"name": "default__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.default__json_parse", "macro_sql": "{% macro default__json_parse(string, string_path) %}\n\n  json_extract_path_text({{string}}, {%- for s in string_path -%}'{{ s }}'{%- if not loop.last -%},{%- endif -%}{%- endfor -%} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.217002, "supported_languages": null}, "macro.fivetran_utils.redshift__json_parse": {"name": "redshift__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.redshift__json_parse", "macro_sql": "{% macro redshift__json_parse(string, string_path) %}\n\n  json_extract_path_text({{string}}, {%- for s in string_path -%}'{{ s }}'{%- if not loop.last -%},{%- endif -%}{%- endfor -%} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.2172182, "supported_languages": null}, "macro.fivetran_utils.bigquery__json_parse": {"name": "bigquery__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.bigquery__json_parse", "macro_sql": "{% macro bigquery__json_parse(string, string_path) %}\n\n \n  json_extract_scalar({{string}}, '$.{%- for s in string_path -%}{{ s }}{%- if not loop.last -%}.{%- endif -%}{%- endfor -%} ')\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.217428, "supported_languages": null}, "macro.fivetran_utils.postgres__json_parse": {"name": "postgres__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.postgres__json_parse", "macro_sql": "{% macro postgres__json_parse(string, string_path) %}\n\n  {{string}}::json #>> '{ {%- for s in string_path -%}{{ s }}{%- if not loop.last -%},{%- endif -%}{%- endfor -%} }'\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.217634, "supported_languages": null}, "macro.fivetran_utils.snowflake__json_parse": {"name": "snowflake__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.snowflake__json_parse", "macro_sql": "{% macro snowflake__json_parse(string, string_path) %}\n\n  parse_json( {{string}} ) {%- for s in string_path -%}{% if s is number %}[{{ s }}]{% else %}['{{ s }}']{% endif %}{%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.217868, "supported_languages": null}, "macro.fivetran_utils.spark__json_parse": {"name": "spark__json_parse", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_parse.sql", "original_file_path": "macros/json_parse.sql", "unique_id": "macro.fivetran_utils.spark__json_parse", "macro_sql": "{% macro spark__json_parse(string, string_path) %}\n\n  {{string}} : {%- for s in string_path -%}{% if s is number %}[{{ s }}]{% else %}['{{ s }}']{% endif %}{%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.218103, "supported_languages": null}, "macro.fivetran_utils.max_bool": {"name": "max_bool", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "unique_id": "macro.fivetran_utils.max_bool", "macro_sql": "{% macro max_bool(boolean_field) -%}\n\n{{ adapter.dispatch('max_bool', 'fivetran_utils') (boolean_field) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__max_bool"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.2183921, "supported_languages": null}, "macro.fivetran_utils.default__max_bool": {"name": "default__max_bool", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "unique_id": "macro.fivetran_utils.default__max_bool", "macro_sql": "{% macro default__max_bool(boolean_field)  %}\n\n    bool_or( {{ boolean_field }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.218484, "supported_languages": null}, "macro.fivetran_utils.snowflake__max_bool": {"name": "snowflake__max_bool", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "unique_id": "macro.fivetran_utils.snowflake__max_bool", "macro_sql": "{% macro snowflake__max_bool(boolean_field)  %}\n\n    max( {{ boolean_field }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.218571, "supported_languages": null}, "macro.fivetran_utils.bigquery__max_bool": {"name": "bigquery__max_bool", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/max_bool.sql", "original_file_path": "macros/max_bool.sql", "unique_id": "macro.fivetran_utils.bigquery__max_bool", "macro_sql": "{% macro bigquery__max_bool(boolean_field)  %}\n\n    max( {{ boolean_field }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.2186592, "supported_languages": null}, "macro.fivetran_utils.calculated_fields": {"name": "calculated_fields", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/calculated_fields.sql", "original_file_path": "macros/calculated_fields.sql", "unique_id": "macro.fivetran_utils.calculated_fields", "macro_sql": "{% macro calculated_fields(variable) -%}\n\n{% if var(variable, none) %}\n    {% for field in var(variable) %}\n        , {{ field.transform_sql }} as {{ field.name }} \n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.21898, "supported_languages": null}, "macro.fivetran_utils.seed_data_helper": {"name": "seed_data_helper", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/seed_data_helper.sql", "original_file_path": "macros/seed_data_helper.sql", "unique_id": "macro.fivetran_utils.seed_data_helper", "macro_sql": "{% macro seed_data_helper(seed_name, warehouses) %}\n\n{% if target.type in warehouses %}\n    {% for w in warehouses %}\n        {% if target.type == w %}\n            {{ return(ref(seed_name ~ \"_\" ~ w ~ \"\")) }}\n        {% endif %}\n    {% endfor %}\n{% else %}\n{{ return(ref(seed_name)) }}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.219487, "supported_languages": null}, "macro.fivetran_utils.fill_pass_through_columns": {"name": "fill_pass_through_columns", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fill_pass_through_columns.sql", "original_file_path": "macros/fill_pass_through_columns.sql", "unique_id": "macro.fivetran_utils.fill_pass_through_columns", "macro_sql": "{% macro fill_pass_through_columns(pass_through_variable) %}\n\n{% if var(pass_through_variable) %}\n    {% for field in var(pass_through_variable) %}\n        {% if field is mapping %}\n            {% if field.transform_sql %}\n                , {{ field.transform_sql }} as {{ field.alias if field.alias else field.name }}\n            {% else %}\n                , {{ field.alias if field.alias else field.name }}\n            {% endif %}\n        {% else %}\n        , {{ field }}\n        {% endif %}\n    {% endfor %}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.220165, "supported_languages": null}, "macro.fivetran_utils.string_agg": {"name": "string_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "unique_id": "macro.fivetran_utils.string_agg", "macro_sql": "{% macro string_agg(field_to_agg, delimiter) -%}\n\n{{ adapter.dispatch('string_agg', 'fivetran_utils') (field_to_agg, delimiter) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__string_agg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.220584, "supported_languages": null}, "macro.fivetran_utils.default__string_agg": {"name": "default__string_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "unique_id": "macro.fivetran_utils.default__string_agg", "macro_sql": "{% macro default__string_agg(field_to_agg, delimiter) %}\n    string_agg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.2207859, "supported_languages": null}, "macro.fivetran_utils.snowflake__string_agg": {"name": "snowflake__string_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "unique_id": "macro.fivetran_utils.snowflake__string_agg", "macro_sql": "{% macro snowflake__string_agg(field_to_agg, delimiter) %}\n    listagg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.220939, "supported_languages": null}, "macro.fivetran_utils.redshift__string_agg": {"name": "redshift__string_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "unique_id": "macro.fivetran_utils.redshift__string_agg", "macro_sql": "{% macro redshift__string_agg(field_to_agg, delimiter) %}\n    listagg({{ field_to_agg }}, {{ delimiter }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.2210538, "supported_languages": null}, "macro.fivetran_utils.spark__string_agg": {"name": "spark__string_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/string_agg.sql", "original_file_path": "macros/string_agg.sql", "unique_id": "macro.fivetran_utils.spark__string_agg", "macro_sql": "{% macro spark__string_agg(field_to_agg, delimiter) %}\n    -- collect set will remove duplicates\n    replace(replace(replace(cast( collect_set({{ field_to_agg }}) as string), '[', ''), ']', ''), ', ', {{ delimiter }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.221303, "supported_languages": null}, "macro.fivetran_utils.timestamp_diff": {"name": "timestamp_diff", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "unique_id": "macro.fivetran_utils.timestamp_diff", "macro_sql": "{% macro timestamp_diff(first_date, second_date, datepart) %}\n  {{ adapter.dispatch('timestamp_diff', 'fivetran_utils')(first_date, second_date, datepart) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.postgres__timestamp_diff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.223876, "supported_languages": null}, "macro.fivetran_utils.default__timestamp_diff": {"name": "default__timestamp_diff", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "unique_id": "macro.fivetran_utils.default__timestamp_diff", "macro_sql": "{% macro default__timestamp_diff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.224032, "supported_languages": null}, "macro.fivetran_utils.redshift__timestamp_diff": {"name": "redshift__timestamp_diff", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "unique_id": "macro.fivetran_utils.redshift__timestamp_diff", "macro_sql": "{% macro redshift__timestamp_diff(first_date, second_date, datepart) %}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.224172, "supported_languages": null}, "macro.fivetran_utils.bigquery__timestamp_diff": {"name": "bigquery__timestamp_diff", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "unique_id": "macro.fivetran_utils.bigquery__timestamp_diff", "macro_sql": "{% macro bigquery__timestamp_diff(first_date, second_date, datepart) %}\n\n    timestamp_diff(\n        {{second_date}},\n        {{first_date}},\n        {{datepart}}\n    )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.22431, "supported_languages": null}, "macro.fivetran_utils.postgres__timestamp_diff": {"name": "postgres__timestamp_diff", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_diff.sql", "original_file_path": "macros/timestamp_diff.sql", "unique_id": "macro.fivetran_utils.postgres__timestamp_diff", "macro_sql": "{% macro postgres__timestamp_diff(first_date, second_date, datepart) %}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.225909, "supported_languages": null}, "macro.fivetran_utils.try_cast": {"name": "try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.try_cast", "macro_sql": "{% macro try_cast(field, type) %}\n    {{ adapter.dispatch('try_cast', 'fivetran_utils') (field, type) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.postgres__try_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.226727, "supported_languages": null}, "macro.fivetran_utils.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.2268548, "supported_languages": null}, "macro.fivetran_utils.redshift__try_cast": {"name": "redshift__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.redshift__try_cast", "macro_sql": "{% macro redshift__try_cast(field, type) %}\n{%- if type == 'numeric' -%}\n\n    case\n        when trim({{field}}) ~ '^(0|[1-9][0-9]*)$' then trim({{field}})\n        else null\n    end::{{type}}\n\n{% else %}\n    {{ exceptions.raise_compiler_error(\n            \"non-numeric datatypes are not currently supported\") }}\n\n{% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.2271008, "supported_languages": null}, "macro.fivetran_utils.postgres__try_cast": {"name": "postgres__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.postgres__try_cast", "macro_sql": "{% macro postgres__try_cast(field, type) %}\n{%- if type == 'numeric' -%}\n\n    case\n        when replace(cast({{field}} as varchar),cast(' ' as varchar),cast('' as varchar)) ~ '^(0|[1-9][0-9]*)$' \n        then replace(cast({{field}} as varchar),cast(' ' as varchar),cast('' as varchar))\n        else null\n    end::{{type}}\n\n{% else %}\n    {{ exceptions.raise_compiler_error(\n            \"non-numeric datatypes are not currently supported\") }}\n\n{% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.2274282, "supported_languages": null}, "macro.fivetran_utils.snowflake__try_cast": {"name": "snowflake__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.snowflake__try_cast", "macro_sql": "{% macro snowflake__try_cast(field, type) %}\n    try_cast(cast({{field}} as varchar) as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.227572, "supported_languages": null}, "macro.fivetran_utils.bigquery__try_cast": {"name": "bigquery__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.bigquery__try_cast", "macro_sql": "{% macro bigquery__try_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.2276962, "supported_languages": null}, "macro.fivetran_utils.spark__try_cast": {"name": "spark__try_cast", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/try_cast.sql", "original_file_path": "macros/try_cast.sql", "unique_id": "macro.fivetran_utils.spark__try_cast", "macro_sql": "{% macro spark__try_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.227813, "supported_languages": null}, "macro.fivetran_utils.source_relation": {"name": "source_relation", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/source_relation.sql", "original_file_path": "macros/source_relation.sql", "unique_id": "macro.fivetran_utils.source_relation", "macro_sql": "{% macro source_relation(union_schema_variable='union_schemas', union_database_variable='union_databases') -%}\n\n{{ adapter.dispatch('source_relation', 'fivetran_utils') (union_schema_variable, union_database_variable) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__source_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.228319, "supported_languages": null}, "macro.fivetran_utils.default__source_relation": {"name": "default__source_relation", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/source_relation.sql", "original_file_path": "macros/source_relation.sql", "unique_id": "macro.fivetran_utils.default__source_relation", "macro_sql": "{% macro default__source_relation(union_schema_variable, union_database_variable) %}\n\n{% if var(union_schema_variable, none)  %}\n, case\n    {% for schema in var(union_schema_variable) %}\n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%.{{ schema|lower }}.%' then '{{ schema|lower }}'\n    {% endfor %}\n  end as source_relation\n{% elif var(union_database_variable, none) %}\n, case\n    {% for database in var(union_database_variable) %}\n    when lower(replace(replace(_dbt_source_relation,'\"',''),'`','')) like '%{{ database|lower }}.%' then '{{ database|lower }}'\n    {% endfor %}\n  end as source_relation\n{% else %}\n, cast('' as {{ dbt.type_string() }}) as source_relation\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.22888, "supported_languages": null}, "macro.fivetran_utils.first_value": {"name": "first_value", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "unique_id": "macro.fivetran_utils.first_value", "macro_sql": "{% macro first_value(first_value_field, partition_field, order_by_field, order=\"asc\") -%}\n\n{{ adapter.dispatch('first_value', 'fivetran_utils') (first_value_field, partition_field, order_by_field, order) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__first_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.229373, "supported_languages": null}, "macro.fivetran_utils.default__first_value": {"name": "default__first_value", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "unique_id": "macro.fivetran_utils.default__first_value", "macro_sql": "{% macro default__first_value(first_value_field, partition_field, order_by_field, order=\"asc\")  %}\n\n    first_value( {{ first_value_field }} ignore nulls ) over (partition by {{ partition_field }} order by {{ order_by_field }} {{ order }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.229568, "supported_languages": null}, "macro.fivetran_utils.redshift__first_value": {"name": "redshift__first_value", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/first_value.sql", "original_file_path": "macros/first_value.sql", "unique_id": "macro.fivetran_utils.redshift__first_value", "macro_sql": "{% macro redshift__first_value(first_value_field, partition_field, order_by_field, order=\"asc\") %}\n\n    first_value( {{ first_value_field }} ignore nulls ) over (partition by {{ partition_field }} order by {{ order_by_field }} {{ order }} , {{ partition_field }} rows unbounded preceding )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.229773, "supported_languages": null}, "macro.fivetran_utils.add_dbt_source_relation": {"name": "add_dbt_source_relation", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/add_dbt_source_relation.sql", "original_file_path": "macros/add_dbt_source_relation.sql", "unique_id": "macro.fivetran_utils.add_dbt_source_relation", "macro_sql": "{% macro add_dbt_source_relation() %}\n\n{% if var('union_schemas', none) or var('union_databases', none) %}\n, _dbt_source_relation\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.230022, "supported_languages": null}, "macro.fivetran_utils.add_pass_through_columns": {"name": "add_pass_through_columns", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/add_pass_through_columns.sql", "original_file_path": "macros/add_pass_through_columns.sql", "unique_id": "macro.fivetran_utils.add_pass_through_columns", "macro_sql": "{% macro add_pass_through_columns(base_columns, pass_through_var) %}\n\n  {% if pass_through_var %}\n\n    {% for column in pass_through_var %}\n\n    {% if column is mapping %}\n\n      {% if column.alias %}\n\n        {% do base_columns.append({ \"name\": column.name, \"alias\": column.alias, \"datatype\": column.datatype if column.datatype else dbt.type_string()}) %}\n\n      {% else %}\n\n        {% do base_columns.append({ \"name\": column.name, \"datatype\": column.datatype if column.datatype else dbt.type_string()}) %}\n        \n      {% endif %}\n\n    {% else %}\n\n      {% do base_columns.append({ \"name\": column, \"datatype\": dbt.type_string()}) %}\n\n    {% endif %}\n\n    {% endfor %}\n\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.231165, "supported_languages": null}, "macro.fivetran_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/union_relations.sql", "original_file_path": "macros/union_relations.sql", "unique_id": "macro.fivetran_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, aliases=none, column_override=none, include=[], exclude=[], source_column_name=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n    {%- set source_column_name = source_column_name if source_column_name is not none else '_dbt_source_relation' -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ aliases[loop.index0] if aliases else relation }}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.234827, "supported_languages": null}, "macro.fivetran_utils.union_tables": {"name": "union_tables", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/union_relations.sql", "original_file_path": "macros/union_relations.sql", "unique_id": "macro.fivetran_utils.union_tables", "macro_sql": "{%- macro union_tables(tables, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_table') -%}\n\n    {%- do exceptions.warn(\"Warning: the `union_tables` macro is no longer supported and will be deprecated in a future release of dbt-utils. Use the `union_relations` macro instead\") -%}\n\n    {{ return(dbt_utils.union_relations(tables, column_override, include, exclude, source_column_name)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils.union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.235163, "supported_languages": null}, "macro.fivetran_utils.snowflake_seed_data": {"name": "snowflake_seed_data", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/snowflake_seed_data.sql", "original_file_path": "macros/snowflake_seed_data.sql", "unique_id": "macro.fivetran_utils.snowflake_seed_data", "macro_sql": "{% macro snowflake_seed_data(seed_name) %}\n\n{% if target.type == 'snowflake' %}\n{{ return(ref(seed_name ~ '_snowflake')) }}\n{% else %}\n{{ return(ref(seed_name)) }}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.2355158, "supported_languages": null}, "macro.fivetran_utils.fill_staging_columns": {"name": "fill_staging_columns", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fill_staging_columns.sql", "original_file_path": "macros/fill_staging_columns.sql", "unique_id": "macro.fivetran_utils.fill_staging_columns", "macro_sql": "{% macro fill_staging_columns(source_columns, staging_columns) -%}\n\n{%- set source_column_names = source_columns|map(attribute='name')|map('lower')|list -%}\n\n{%- for column in staging_columns %}\n    {% if column.name|lower in source_column_names -%}\n        {{ fivetran_utils.quote_column(column) }} as \n        {%- if 'alias' in column %} {{ column.alias }} {% else %} {{ fivetran_utils.quote_column(column) }} {%- endif -%}\n    {%- else -%}\n        cast(null as {{ column.datatype }})\n        {%- if 'alias' in column %} as {{ column.alias }} {% else %} as {{ fivetran_utils.quote_column(column) }} {% endif -%}\n    {%- endif -%}\n    {%- if not loop.last -%} , {% endif -%}\n{% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.quote_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.2369769, "supported_languages": null}, "macro.fivetran_utils.quote_column": {"name": "quote_column", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/fill_staging_columns.sql", "original_file_path": "macros/fill_staging_columns.sql", "unique_id": "macro.fivetran_utils.quote_column", "macro_sql": "{% macro quote_column(column) %}\n    {% if 'quote' in column %}\n        {% if column.quote %}\n            {% if target.type in ('bigquery', 'spark', 'databricks') %}\n            `{{ column.name }}`\n            {% elif target.type == 'snowflake' %}\n            \"{{ column.name | upper }}\"\n            {% else %}\n            \"{{ column.name }}\"\n            {% endif %}\n        {% else %}\n        {{ column.name }}\n        {% endif %}\n    {% else %}\n    {{ column.name }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.237559, "supported_languages": null}, "macro.fivetran_utils.json_extract": {"name": "json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.json_extract", "macro_sql": "{% macro json_extract(string, string_path) -%}\n\n{{ adapter.dispatch('json_extract', 'fivetran_utils') (string, string_path) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.postgres__json_extract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.238102, "supported_languages": null}, "macro.fivetran_utils.default__json_extract": {"name": "default__json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.default__json_extract", "macro_sql": "{% macro default__json_extract(string, string_path) %}\n\n  json_extract_path_text({{string}}, {{ \"'\" ~ string_path ~ \"'\" }} )\n \n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.2382588, "supported_languages": null}, "macro.fivetran_utils.snowflake__json_extract": {"name": "snowflake__json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.snowflake__json_extract", "macro_sql": "{% macro snowflake__json_extract(string, string_path) %}\n\n  json_extract_path_text(try_parse_json( {{string}} ), {{ \"'\" ~ string_path ~ \"'\" }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.2384, "supported_languages": null}, "macro.fivetran_utils.redshift__json_extract": {"name": "redshift__json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.redshift__json_extract", "macro_sql": "{% macro redshift__json_extract(string, string_path) %}\n\n  case when is_valid_json( {{string}} ) then json_extract_path_text({{string}}, {{ \"'\" ~ string_path ~ \"'\" }} ) else null end\n \n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.23855, "supported_languages": null}, "macro.fivetran_utils.bigquery__json_extract": {"name": "bigquery__json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.bigquery__json_extract", "macro_sql": "{% macro bigquery__json_extract(string, string_path) %}\n\n  json_extract_scalar({{string}}, {{ \"'$.\" ~ string_path ~ \"'\" }} )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.238691, "supported_languages": null}, "macro.fivetran_utils.postgres__json_extract": {"name": "postgres__json_extract", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/json_extract.sql", "original_file_path": "macros/json_extract.sql", "unique_id": "macro.fivetran_utils.postgres__json_extract", "macro_sql": "{% macro postgres__json_extract(string, string_path) %}\n\n  {{string}}::json->>{{\"'\" ~ string_path ~ \"'\" }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.238824, "supported_languages": null}, "macro.fivetran_utils.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/collect_freshness.sql", "original_file_path": "macros/collect_freshness.sql", "unique_id": "macro.fivetran_utils.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.239446, "supported_languages": null}, "macro.fivetran_utils.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/collect_freshness.sql", "original_file_path": "macros/collect_freshness.sql", "unique_id": "macro.fivetran_utils.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n\n  {%- set enabled_array = [] -%}\n  {% for node in graph.sources.values() %}\n    {% if node.identifier == source.identifier %}\n      {% if (node.meta['is_enabled'] | default(true)) %}\n        {%- do enabled_array.append(1) -%}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n  {% set is_enabled = (enabled_array != []) %}\n\n    select\n      {% if is_enabled %}\n      max({{ loaded_at_field }})\n      {% else %} \n      {{ current_timestamp() }} {% endif %} as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n\n    {% if is_enabled %}\n    from {{ source }}\n      {% if filter %}\n      where {{ filter }}\n      {% endif %}\n    {% endif %}\n\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.2403789, "supported_languages": null}, "macro.fivetran_utils.timestamp_add": {"name": "timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.timestamp_add", "macro_sql": "{% macro timestamp_add(datepart, interval, from_timestamp) -%}\n\n{{ adapter.dispatch('timestamp_add', 'fivetran_utils') (datepart, interval, from_timestamp) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.postgres__timestamp_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.241013, "supported_languages": null}, "macro.fivetran_utils.default__timestamp_add": {"name": "default__timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.default__timestamp_add", "macro_sql": "{% macro default__timestamp_add(datepart, interval, from_timestamp) %}\n\n    timestampadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.241159, "supported_languages": null}, "macro.fivetran_utils.bigquery__timestamp_add": {"name": "bigquery__timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.bigquery__timestamp_add", "macro_sql": "{% macro bigquery__timestamp_add(datepart, interval, from_timestamp) %}\n\n        timestamp_add({{ from_timestamp }}, interval  {{ interval }} {{ datepart }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.2412958, "supported_languages": null}, "macro.fivetran_utils.redshift__timestamp_add": {"name": "redshift__timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.redshift__timestamp_add", "macro_sql": "{% macro redshift__timestamp_add(datepart, interval, from_timestamp) %}\n\n        dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.2414348, "supported_languages": null}, "macro.fivetran_utils.postgres__timestamp_add": {"name": "postgres__timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.postgres__timestamp_add", "macro_sql": "{% macro postgres__timestamp_add(datepart, interval, from_timestamp) %}\n\n    {{ from_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.241577, "supported_languages": null}, "macro.fivetran_utils.spark__timestamp_add": {"name": "spark__timestamp_add", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/timestamp_add.sql", "original_file_path": "macros/timestamp_add.sql", "unique_id": "macro.fivetran_utils.spark__timestamp_add", "macro_sql": "{% macro spark__timestamp_add(datepart, interval, from_timestamp) %}\n\n    {{ dbt.dateadd(datepart, interval, from_timestamp) }}\n        \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.24173, "supported_languages": null}, "macro.fivetran_utils.ceiling": {"name": "ceiling", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "unique_id": "macro.fivetran_utils.ceiling", "macro_sql": "{% macro ceiling(num) -%}\n\n{{ adapter.dispatch('ceiling', 'fivetran_utils') (num) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__ceiling"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.241954, "supported_languages": null}, "macro.fivetran_utils.default__ceiling": {"name": "default__ceiling", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "unique_id": "macro.fivetran_utils.default__ceiling", "macro_sql": "{% macro default__ceiling(num) %}\n    ceiling({{ num }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.242111, "supported_languages": null}, "macro.fivetran_utils.snowflake__ceiling": {"name": "snowflake__ceiling", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/ceiling.sql", "original_file_path": "macros/ceiling.sql", "unique_id": "macro.fivetran_utils.snowflake__ceiling", "macro_sql": "{% macro snowflake__ceiling(num) %}\n    ceil({{ num }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.242201, "supported_languages": null}, "macro.fivetran_utils.remove_prefix_from_columns": {"name": "remove_prefix_from_columns", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/remove_prefix_from_columns.sql", "original_file_path": "macros/remove_prefix_from_columns.sql", "unique_id": "macro.fivetran_utils.remove_prefix_from_columns", "macro_sql": "{% macro remove_prefix_from_columns(columns, prefix='', exclude=[]) %}\n\n        {%- for col in columns if col.name not in exclude -%}\n        {%- if col.name[:prefix|length]|lower == prefix -%}\n        {{ col.name }} as {{ col.name[prefix|length:] }}\n        {%- else -%}\n        {{ col.name }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n        {% endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.242777, "supported_languages": null}, "macro.fivetran_utils.union_data": {"name": "union_data", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/union_data.sql", "original_file_path": "macros/union_data.sql", "unique_id": "macro.fivetran_utils.union_data", "macro_sql": "{% macro union_data(table_identifier, database_variable, schema_variable, default_database, default_schema, default_variable, union_schema_variable='union_schemas', union_database_variable='union_databases') -%}\n\n{{ adapter.dispatch('union_data', 'fivetran_utils') (\n    table_identifier, \n    database_variable, \n    schema_variable, \n    default_database, \n    default_schema, \n    default_variable,\n    union_schema_variable,\n    union_database_variable\n    ) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__union_data"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.2441118, "supported_languages": null}, "macro.fivetran_utils.default__union_data": {"name": "default__union_data", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/union_data.sql", "original_file_path": "macros/union_data.sql", "unique_id": "macro.fivetran_utils.default__union_data", "macro_sql": "{% macro default__union_data(\n    table_identifier, \n    database_variable, \n    schema_variable, \n    default_database, \n    default_schema, \n    default_variable,\n    union_schema_variable,\n    union_database_variable\n    ) %}\n\n{% if var(union_schema_variable, none) %}\n\n    {% set relations = [] %}\n    \n    {% if var(union_schema_variable) is string %}\n    {% set trimmed = var(union_schema_variable)|trim('[')|trim(']') %}\n    {% set schemas = trimmed.split(',')|map('trim',\" \")|map('trim','\"')|map('trim',\"'\") %}\n    {% else %}\n    {% set schemas = var(union_schema_variable) %}\n    {% endif %}\n\n    {% for schema in var(union_schema_variable) %}\n    {% set relation=adapter.get_relation(\n        database=source(schema, table_identifier).database if var('has_defined_sources', false) else var(database_variable, default_database),\n        schema=source(schema, table_identifier).schema if var('has_defined_sources', false) else schema,\n        identifier=source(schema, table_identifier).identifier if var('has_defined_sources', false) else table_identifier\n    ) -%}\n    \n    {% set relation_exists=relation is not none %}\n\n    {% if relation_exists %}\n\n    {% do relations.append(relation) %}\n    \n    {% endif %}\n\n    {% endfor %}\n\n    {{ dbt_utils.union_relations(relations) }}\n\n{% elif var(union_database_variable, none) %}\n\n    {% set relations = [] %}\n\n    {% for database in var(union_database_variable) %}\n\n    {% set relation=adapter.get_relation(\n        database=source(schema, table_identifier).database if var('has_defined_sources', false) else database,\n        schema=source(schema, table_identifier).schema if var('has_defined_sources', false) else var(schema_variable, default_schema),\n        identifier=source(schema, table_identifier).identifier if var('has_defined_sources', false) else table_identifier\n    ) -%}\n\n    {% set relation_exists=relation is not none %}\n\n    {% if relation_exists %}\n\n    {% do relations.append(relation) %}\n    \n    {% endif %}\n\n    {% endfor %}\n\n    {{ dbt_utils.union_relations(relations) }}\n\n{% else %}\n\n    select * \n    from {{ var(default_variable) }}\n\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.246544, "supported_languages": null}, "macro.fivetran_utils.dummy_coalesce_value": {"name": "dummy_coalesce_value", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/dummy_coalesce_value.sql", "original_file_path": "macros/dummy_coalesce_value.sql", "unique_id": "macro.fivetran_utils.dummy_coalesce_value", "macro_sql": "{% macro dummy_coalesce_value(column) %}\n\n{% set coalesce_value = {\n 'STRING': \"'DUMMY_STRING'\",\n 'BOOLEAN': 'null',\n 'INT': 999999999,\n 'FLOAT': 999999999.99,\n 'TIMESTAMP': 'cast(\"2099-12-31\" as timestamp)',\n 'DATE': 'cast(\"2099-12-31\" as date)',\n} %}\n\n{% if column.is_float() %}\n{{ return(coalesce_value['FLOAT']) }}\n\n{% elif column.is_numeric() %}\n{{ return(coalesce_value['INT']) }}\n\n{% elif column.is_string() %}\n{{ return(coalesce_value['STRING']) }}\n\n{% elif column.data_type|lower == 'boolean' %}\n{{ return(coalesce_value['BOOLEAN']) }}\n\n{% elif 'timestamp' in column.data_type|lower %}\n{{ return(coalesce_value['TIMESTAMP']) }}\n\n{% elif 'date' in column.data_type|lower %}\n{{ return(coalesce_value['DATE']) }}\n\n{% elif 'int' in column.data_type|lower %}\n{{ return(coalesce_value['INT']) }}\n\n{% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.247844, "supported_languages": null}, "macro.fivetran_utils.array_agg": {"name": "array_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "unique_id": "macro.fivetran_utils.array_agg", "macro_sql": "{% macro array_agg(field_to_agg) -%}\n\n{{ adapter.dispatch('array_agg', 'fivetran_utils') (field_to_agg) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.fivetran_utils.default__array_agg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.248086, "supported_languages": null}, "macro.fivetran_utils.default__array_agg": {"name": "default__array_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "unique_id": "macro.fivetran_utils.default__array_agg", "macro_sql": "{% macro default__array_agg(field_to_agg) %}\n    array_agg({{ field_to_agg }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.248176, "supported_languages": null}, "macro.fivetran_utils.redshift__array_agg": {"name": "redshift__array_agg", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/array_agg.sql", "original_file_path": "macros/array_agg.sql", "unique_id": "macro.fivetran_utils.redshift__array_agg", "macro_sql": "{% macro redshift__array_agg(field_to_agg) %}\n    listagg({{ field_to_agg }}, ',')\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.248262, "supported_languages": null}, "macro.fivetran_utils.empty_variable_warning": {"name": "empty_variable_warning", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/empty_variable_warning.sql", "original_file_path": "macros/empty_variable_warning.sql", "unique_id": "macro.fivetran_utils.empty_variable_warning", "macro_sql": "{% macro empty_variable_warning(variable, downstream_model) %}\n\n{% if not var(variable) %}\n{{ log(\n    \"\"\"\n    Warning: You have passed an empty list to the \"\"\" ~ variable ~ \"\"\".\n    As a result, you won't see the history of any columns in the \"\"\" ~ downstream_model ~ \"\"\" model.\n    \"\"\",\n    info=True\n) }}\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.248613, "supported_languages": null}, "macro.fivetran_utils.enabled_vars_one_true": {"name": "enabled_vars_one_true", "resource_type": "macro", "package_name": "fivetran_utils", "path": "macros/enabled_vars_one_true.sql", "original_file_path": "macros/enabled_vars_one_true.sql", "unique_id": "macro.fivetran_utils.enabled_vars_one_true", "macro_sql": "{% macro enabled_vars_one_true(vars) %}\n\n{% for v in vars %}\n    \n    {% if var(v, False) == True %}\n    {{ return(True) }}\n    {% endif %}\n\n{% endfor %}\n\n{{ return(False) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.24897, "supported_languages": null}, "macro.zuora_source.get_contact_columns": {"name": "get_contact_columns", "resource_type": "macro", "package_name": "zuora_source", "path": "macros/get_contact_columns.sql", "original_file_path": "macros/get_contact_columns.sql", "unique_id": "macro.zuora_source.get_contact_columns", "macro_sql": "{% macro get_contact_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"address_1\", \"datatype\": dbt.type_string()},\n    {\"name\": \"address_2\", \"datatype\": dbt.type_string()},\n    {\"name\": \"city\", \"datatype\": dbt.type_string()},\n    {\"name\": \"country\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_by_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"description\", \"datatype\": dbt.type_string()}, \n    {\"name\": \"first_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"last_name\", \"datatype\": dbt.type_string()}, \n    {\"name\": \"postal_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"state\", \"datatype\": dbt.type_string()}, \n    {\"name\": \"updated_by_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"work_email\", \"datatype\": dbt.type_string()},\n    {\"name\": \"work_phone\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.250803, "supported_languages": null}, "macro.zuora_source.get_account_columns": {"name": "get_account_columns", "resource_type": "macro", "package_name": "zuora_source", "path": "macros/get_account_columns.sql", "original_file_path": "macros/get_account_columns.sql", "unique_id": "macro.zuora_source.get_account_columns", "macro_sql": "{% macro get_account_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"account_number\", \"datatype\": dbt.type_string()},\n    {\"name\": \"auto_pay\", \"datatype\": \"boolean\"},\n    {\"name\": \"balance\", \"datatype\": dbt.type_float()},\n    {\"name\": \"batch\", \"datatype\": dbt.type_string()},\n    {\"name\": \"bill_cycle_day\", \"datatype\": dbt.type_int()},\n    {\"name\": \"bill_to_contact_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_by_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"credit_balance\", \"datatype\": dbt.type_float()},\n    {\"name\": \"crm_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"currency\", \"datatype\": dbt.type_string()},\n    {\"name\": \"default_payment_method_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"last_invoice_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"mrr\", \"datatype\": dbt.type_float()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"notes\", \"datatype\": dbt.type_string()},\n    {\"name\": \"parent_account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"payment_term\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sold_to_contact_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt.type_string()}, \n    {\"name\": \"tax_exempt_effective_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"tax_exempt_expiration_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"tax_exempt_status\", \"datatype\": dbt.type_string()}, \n    {\"name\": \"total_debit_memo_balance\", \"datatype\": dbt.type_float()},\n    {\"name\": \"total_invoice_balance\", \"datatype\": dbt.type_float()},\n    {\"name\": \"unapplied_balance\", \"datatype\": dbt.type_float()},\n    {\"name\": \"unapplied_credit_memo_amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"updated_by_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"vatid\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('zuora_account_pass_through_columns')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_float", "macro.dbt.type_int", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.275489, "supported_languages": null}, "macro.zuora_source.get_refund_invoice_payment_columns": {"name": "get_refund_invoice_payment_columns", "resource_type": "macro", "package_name": "zuora_source", "path": "macros/get_refund_invoice_payment_columns.sql", "original_file_path": "macros/get_refund_invoice_payment_columns.sql", "unique_id": "macro.zuora_source.get_refund_invoice_payment_columns", "macro_sql": "{% macro get_refund_invoice_payment_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"created_by_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"refund_amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"updated_by_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_date\", \"datatype\": dbt.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.276387, "supported_languages": null}, "macro.zuora_source.get_amendment_columns": {"name": "get_amendment_columns", "resource_type": "macro", "package_name": "zuora_source", "path": "macros/get_amendment_columns.sql", "original_file_path": "macros/get_amendment_columns.sql", "unique_id": "macro.zuora_source.get_amendment_columns", "macro_sql": "{% macro get_amendment_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"auto_renew\", \"datatype\": \"boolean\"},\n    {\"name\": \"booking_date\", \"datatype\": \"date\"},\n    {\"name\": \"code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"contract_effective_date\", \"datatype\": \"date\"},\n    {\"name\": \"created_by_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"current_term\", \"datatype\": dbt.type_int()},\n    {\"name\": \"current_term_period_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"customer_acceptance_date\", \"datatype\": \"date\"},\n    {\"name\": \"description\", \"datatype\": dbt.type_string()},\n    {\"name\": \"effective_date\", \"datatype\": \"date\"}, \n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"new_rate_plan_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"removed_rate_plan_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"renewal_setting\", \"datatype\": dbt.type_string()},\n    {\"name\": \"renewal_term\", \"datatype\": dbt.type_int()},\n    {\"name\": \"renewal_term_period_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"resume_date\", \"datatype\": \"date\"},\n    {\"name\": \"service_activation_date\", \"datatype\": \"date\"},\n    {\"name\": \"specific_update_date\", \"datatype\": \"date\"},\n    {\"name\": \"status\", \"datatype\": dbt.type_string()}, \n    {\"name\": \"subscription_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"suspend_date\", \"datatype\": \"date\"},\n    {\"name\": \"term_start_date\", \"datatype\": \"date\"},\n    {\"name\": \"term_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_by_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_date\", \"datatype\": dbt.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.2794502, "supported_languages": null}, "macro.zuora_source.get_credit_balance_adjustment_columns": {"name": "get_credit_balance_adjustment_columns", "resource_type": "macro", "package_name": "zuora_source", "path": "macros/get_credit_balance_adjustment_columns.sql", "original_file_path": "macros/get_credit_balance_adjustment_columns.sql", "unique_id": "macro.zuora_source.get_credit_balance_adjustment_columns", "macro_sql": "{% macro get_credit_balance_adjustment_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"account_receivable_accounting_code_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"accounting_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"adjustment_date\", \"datatype\": \"date\"},\n    {\"name\": \"amount\", \"datatype\": dbt.type_float()}, \n    {\"name\": \"amount_home_currency\", \"datatype\": dbt.type_float()},\n    {\"name\": \"bill_to_contact_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"cancelled_on\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"comment\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_by_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"customer_cash_on_account_accounting_code_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"default_payment_method_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"exchange_rate\", \"datatype\": dbt.type_float()},\n    {\"name\": \"exchange_rate_date\", \"datatype\": \"date\"},\n    {\"name\": \"home_currency\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"invoice_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"journal_entry_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"number\", \"datatype\": dbt.type_string()},\n    {\"name\": \"parent_account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"reason_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"reference_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sold_to_contact_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"source_transaction_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"source_transaction_number\", \"datatype\": dbt.type_string()},\n    {\"name\": \"source_transaction_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"transaction_currency\", \"datatype\": dbt.type_string()},\n    {\"name\": \"transferred_to_accounting\", \"datatype\": dbt.type_string()},\n    {\"name\": \"type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_by_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_date\", \"datatype\": dbt.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.283123, "supported_languages": null}, "macro.zuora_source.get_rate_plan_columns": {"name": "get_rate_plan_columns", "resource_type": "macro", "package_name": "zuora_source", "path": "macros/get_rate_plan_columns.sql", "original_file_path": "macros/get_rate_plan_columns.sql", "unique_id": "macro.zuora_source.get_rate_plan_columns", "macro_sql": "{% macro get_rate_plan_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"amendment_id\", \"datatype\": dbt.type_string()}, \n    {\"name\": \"bill_to_contact_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_by_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"default_payment_method_id\", \"datatype\": dbt.type_string()}, \n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"original_rate_plan_id\", \"datatype\": dbt.type_string()}, \n    {\"name\": \"product_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"product_rate_plan_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sold_to_contact_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"subscription_id\", \"datatype\": dbt.type_string()}, \n    {\"name\": \"updated_by_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_date\", \"datatype\": dbt.type_timestamp()}\n] %}\n\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('zuora_rate_plan_pass_through_columns')) }} \n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.284877, "supported_languages": null}, "macro.zuora_source.get_refund_columns": {"name": "get_refund_columns", "resource_type": "macro", "package_name": "zuora_source", "path": "macros/get_refund_columns.sql", "original_file_path": "macros/get_refund_columns.sql", "unique_id": "macro.zuora_source.get_refund_columns", "macro_sql": "{% macro get_refund_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"accounting_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"cancelled_on\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"comment\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_by_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()}, \n    {\"name\": \"method_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"payment_method_id\", \"datatype\": dbt.type_string()}, \n    {\"name\": \"reason_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"reference_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"refund_date\", \"datatype\": \"date\"},\n    {\"name\": \"refund_number\", \"datatype\": dbt.type_string()},\n    {\"name\": \"refund_transaction_time\", \"datatype\": dbt.type_timestamp()}, \n    {\"name\": \"settled_on\", \"datatype\": dbt.type_timestamp()}, \n    {\"name\": \"source_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"submitted_on\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"transferred_to_accounting\", \"datatype\": dbt.type_string()},\n    {\"name\": \"type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_by_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_date\", \"datatype\": dbt.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.2872598, "supported_languages": null}, "macro.zuora_source.get_payment_method_columns": {"name": "get_payment_method_columns", "resource_type": "macro", "package_name": "zuora_source", "path": "macros/get_payment_method_columns.sql", "original_file_path": "macros/get_payment_method_columns.sql", "unique_id": "macro.zuora_source.get_payment_method_columns", "macro_sql": "{% macro get_payment_method_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"ach_account_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"active\", \"datatype\": \"boolean\"},\n    {\"name\": \"bank_transfer_account_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_by_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"credit_card_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"last_failed_sale_transaction_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"last_transaction_date_time\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"last_transaction_status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"max_consecutive_payment_failures\", \"datatype\": dbt.type_int()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"num_consecutive_failures\", \"datatype\": dbt.type_int()},\n    {\"name\": \"payment_method_status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"paypal_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sub_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"total_number_of_error_payments\", \"datatype\": dbt.type_int()},\n    {\"name\": \"total_number_of_processed_payments\", \"datatype\": dbt.type_int()},\n    {\"name\": \"type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_by_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_date\", \"datatype\": dbt.type_timestamp()},\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.290068, "supported_languages": null}, "macro.zuora_source.get_invoice_payment_columns": {"name": "get_invoice_payment_columns", "resource_type": "macro", "package_name": "zuora_source", "path": "macros/get_invoice_payment_columns.sql", "original_file_path": "macros/get_invoice_payment_columns.sql", "unique_id": "macro.zuora_source.get_invoice_payment_columns", "macro_sql": "{% macro get_invoice_payment_columns() %}\n\n{% set columns = [ \n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"account_receivable_accounting_code_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"accounting_period_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"amount_currency_rounding\", \"datatype\": dbt.type_float()},\n    {\"name\": \"amount_home_currency\", \"datatype\": dbt.type_float()},\n    {\"name\": \"bill_to_contact_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"cash_accounting_code_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_by_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"default_payment_method_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"exchange_rate\", \"datatype\": dbt.type_float()},\n    {\"name\": \"exchange_rate_date\", \"datatype\": \"date\"},\n    {\"name\": \"home_currency\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"invoice_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"journal_entry_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"journal_run_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"parent_account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"payment_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"payment_method_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"provider_exchange_rate_date\", \"datatype\": \"date\"},\n    {\"name\": \"refund_amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"sold_to_contact_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"transaction_currency\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_by_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_date\", \"datatype\": dbt.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.2932348, "supported_languages": null}, "macro.zuora_source.get_product_columns": {"name": "get_product_columns", "resource_type": "macro", "package_name": "zuora_source", "path": "macros/get_product_columns.sql", "original_file_path": "macros/get_product_columns.sql", "unique_id": "macro.zuora_source.get_product_columns", "macro_sql": "{% macro get_product_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"category\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_by_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"description\", \"datatype\": dbt.type_string()},\n    {\"name\": \"effective_end_date\", \"datatype\": \"date\"},\n    {\"name\": \"effective_start_date\", \"datatype\": \"date\"},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sku\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_by_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_date\", \"datatype\": dbt.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.294486, "supported_languages": null}, "macro.zuora_source.get_payment_columns": {"name": "get_payment_columns", "resource_type": "macro", "package_name": "zuora_source", "path": "macros/get_payment_columns.sql", "original_file_path": "macros/get_payment_columns.sql", "unique_id": "macro.zuora_source.get_payment_columns", "macro_sql": "{% macro get_payment_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"accounting_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"amount\", \"datatype\": dbt.type_float()}, \n    {\"name\": \"amount_home_currency\", \"datatype\": dbt.type_float()},\n    {\"name\": \"applied_amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"applied_credit_balance_amount\", \"datatype\": dbt.type_float()}, \n    {\"name\": \"bill_to_contact_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"cancelled_on\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"comment\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_by_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"currency\", \"datatype\": dbt.type_string()}, \n    {\"name\": \"effective_date\", \"datatype\": \"date\"},\n    {\"name\": \"exchange_rate\", \"datatype\": dbt.type_float()},\n    {\"name\": \"exchange_rate_date\", \"datatype\": \"date\"}, \n    {\"name\": \"home_currency\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()}, \n    {\"name\": \"parent_account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"payment_method_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"payment_number\", \"datatype\": dbt.type_string()},\n    {\"name\": \"refund_amount\", \"datatype\": dbt.type_float()}, \n    {\"name\": \"settled_on\", \"datatype\": dbt.type_timestamp()}, \n    {\"name\": \"sold_to_contact_id\", \"datatype\": dbt.type_string()}, \n    {\"name\": \"status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"submitted_on\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"transaction_currency\", \"datatype\": dbt.type_string()},\n    {\"name\": \"transferred_to_accounting\", \"datatype\": dbt.type_string()},\n    {\"name\": \"type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"unapplied_amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"updated_by_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_date\", \"datatype\": dbt.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.298056, "supported_languages": null}, "macro.zuora_source.get_order_columns": {"name": "get_order_columns", "resource_type": "macro", "package_name": "zuora_source", "path": "macros/get_order_columns.sql", "original_file_path": "macros/get_order_columns.sql", "unique_id": "macro.zuora_source.get_order_columns", "macro_sql": "{% macro get_order_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"bill_to_contact_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"category\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_by_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"default_payment_method_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"description\", \"datatype\": dbt.type_string()},\n    {\"name\": \"error_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"error_message\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"order_date\", \"datatype\": \"date\"},\n    {\"name\": \"order_number\", \"datatype\": dbt.type_string()},\n    {\"name\": \"response\", \"datatype\": dbt.type_string()},\n    {\"name\": \"scheduled_date\", \"datatype\": \"date\"}, \n    {\"name\": \"sold_to_contact_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"state\", \"datatype\": dbt.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_by_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_date\", \"datatype\": dbt.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.300416, "supported_languages": null}, "macro.zuora_source.get_product_rate_plan_charge_columns": {"name": "get_product_rate_plan_charge_columns", "resource_type": "macro", "package_name": "zuora_source", "path": "macros/get_product_rate_plan_charge_columns.sql", "original_file_path": "macros/get_product_rate_plan_charge_columns.sql", "unique_id": "macro.zuora_source.get_product_rate_plan_charge_columns", "macro_sql": "{% macro get_product_rate_plan_charge_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"account_receivable_accounting_code_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"accounting_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"apply_discount_to\", \"datatype\": dbt.type_string()},\n    {\"name\": \"bill_cycle_day\", \"datatype\": dbt.type_int()},\n    {\"name\": \"bill_cycle_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"billing_period\", \"datatype\": dbt.type_string()}, \n    {\"name\": \"charge_model\", \"datatype\": dbt.type_string()},\n    {\"name\": \"charge_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_by_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"default_quantity\", \"datatype\": dbt.type_float()}, \n    {\"name\": \"deferred_revenue_accounting_code_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"description\", \"datatype\": dbt.type_string()},\n    {\"name\": \"discount_class_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"discount_level\", \"datatype\": dbt.type_string()},\n    {\"name\": \"end_date_condition\", \"datatype\": dbt.type_string()},\n    {\"name\": \"exclude_item_billing_from_revenue_accounting\", \"datatype\": \"boolean\"},\n    {\"name\": \"exclude_item_booking_from_revenue_accounting\", \"datatype\": \"boolean\"},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"included_units\", \"datatype\": dbt.type_float()},\n    {\"name\": \"is_stacked_discount\", \"datatype\": \"boolean\"}, \n    {\"name\": \"list_price_base\", \"datatype\": dbt.type_string()},\n    {\"name\": \"max_quantity\", \"datatype\": dbt.type_float()},\n    {\"name\": \"min_quantity\", \"datatype\": dbt.type_float()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},  \n    {\"name\": \"product_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"product_rate_plan_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"recognized_revenue_accounting_code_id\", \"datatype\": dbt.type_string()},  \n    {\"name\": \"specific_billing_period\", \"datatype\": dbt.type_int()},  \n    {\"name\": \"tax_mode\", \"datatype\": dbt.type_string()},\n    {\"name\": \"taxable\", \"datatype\": \"boolean\"},\n    {\"name\": \"trigger_event\", \"datatype\": dbt.type_string()},\n    {\"name\": \"uom\", \"datatype\": dbt.type_string()},\n    {\"name\": \"up_to_periods\", \"datatype\": dbt.type_int()},\n    {\"name\": \"up_to_periods_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_by_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_date\", \"datatype\": dbt.type_timestamp()}, \n    {\"name\": \"use_discount_specific_accounting_code\", \"datatype\": \"boolean\"}, \n    {\"name\": \"weekly_bill_cycle_day\", \"datatype\": dbt.type_string()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_int", "macro.dbt.type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.304995, "supported_languages": null}, "macro.zuora_source.get_invoice_item_columns": {"name": "get_invoice_item_columns", "resource_type": "macro", "package_name": "zuora_source", "path": "macros/get_invoice_item_columns.sql", "original_file_path": "macros/get_invoice_item_columns.sql", "unique_id": "macro.zuora_source.get_invoice_item_columns", "macro_sql": "{% macro get_invoice_item_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"account_receivable_accounting_code_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"accounting_code\", \"datatype\": dbt.type_string()}, \n    {\"name\": \"amendment_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"applied_to_invoice_item_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"balance\", \"datatype\": dbt.type_float()},\n    {\"name\": \"bill_to_contact_id\", \"datatype\": dbt.type_string()}, \n    {\"name\": \"charge_amount\", \"datatype\": dbt.type_float()}, \n    {\"name\": \"charge_amount_home_currency\", \"datatype\": dbt.type_float()},\n    {\"name\": \"charge_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"charge_name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_by_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"default_payment_method_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"deferred_revenue_accounting_code_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"exchange_rate\", \"datatype\": dbt.type_float()},\n    {\"name\": \"exchange_rate_date\", \"datatype\": \"date\"},\n    {\"name\": \"home_currency\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"invoice_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"journal_entry_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"parent_account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"processing_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"product_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"product_rate_plan_charge_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"product_rate_plan_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"quantity\", \"datatype\": dbt.type_float()},\n    {\"name\": \"rate_plan_charge_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rate_plan_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"recognized_revenue_accounting_code_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rev_rec_start_date\", \"datatype\": \"date\"},\n    {\"name\": \"service_end_date\", \"datatype\": \"date\"},\n    {\"name\": \"service_start_date\", \"datatype\": \"date\"},\n    {\"name\": \"sku\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sold_to_contact_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"source_item_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"subscription_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"tax_amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"tax_mode\", \"datatype\": dbt.type_string()},\n    {\"name\": \"transaction_currency\", \"datatype\": dbt.type_string()},\n    {\"name\": \"unit_price\", \"datatype\": dbt.type_float()},\n    {\"name\": \"uom\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_by_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_date\", \"datatype\": dbt.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.310276, "supported_languages": null}, "macro.zuora_source.get_invoice_columns": {"name": "get_invoice_columns", "resource_type": "macro", "package_name": "zuora_source", "path": "macros/get_invoice_columns.sql", "original_file_path": "macros/get_invoice_columns.sql", "unique_id": "macro.zuora_source.get_invoice_columns", "macro_sql": "{% macro get_invoice_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"adjustment_amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"amount\", \"datatype\": dbt.type_float()}, \n    {\"name\": \"amount_home_currency\", \"datatype\": dbt.type_float()},\n    {\"name\": \"amount_without_tax\", \"datatype\": dbt.type_float()}, \n    {\"name\": \"amount_without_tax_home_currency\", \"datatype\": dbt.type_float()},\n    {\"name\": \"auto_pay\", \"datatype\": \"boolean\"},\n    {\"name\": \"balance\", \"datatype\": dbt.type_float()},\n    {\"name\": \"bill_to_contact_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"comments\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_by_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"credit_balance_adjustment_amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"credit_memo_amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"default_payment_method_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"due_date\", \"datatype\": \"date\"},\n    {\"name\": \"exchange_rate\", \"datatype\": dbt.type_float()},\n    {\"name\": \"exchange_rate_date\", \"datatype\": \"date\"},\n    {\"name\": \"home_currency\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"includes_one_time\", \"datatype\": \"boolean\"},\n    {\"name\": \"includes_recurring\", \"datatype\": \"boolean\"},\n    {\"name\": \"includes_usage\", \"datatype\": \"boolean\"},\n    {\"name\": \"invoice_date\", \"datatype\": \"date\"},\n    {\"name\": \"invoice_number\", \"datatype\": dbt.type_string()},\n    {\"name\": \"last_email_sent_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"parent_account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"payment_amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"payment_term\", \"datatype\": dbt.type_string()},\n    {\"name\": \"posted_by\", \"datatype\": dbt.type_string()},\n    {\"name\": \"posted_date\", \"datatype\": dbt.type_timestamp()}, \n    {\"name\": \"refund_amount\", \"datatype\": dbt.type_float()},  \n    {\"name\": \"sold_to_contact_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"source\", \"datatype\": dbt.type_string()},\n    {\"name\": \"source_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"source_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"target_date\", \"datatype\": \"date\"},\n    {\"name\": \"tax_amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"tax_status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"template_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"transaction_currency\", \"datatype\": dbt.type_string()},\n    {\"name\": \"transferred_to_accounting\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_by_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_date\", \"datatype\": dbt.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.3158631, "supported_languages": null}, "macro.zuora_source.get_rate_plan_charge_columns": {"name": "get_rate_plan_charge_columns", "resource_type": "macro", "package_name": "zuora_source", "path": "macros/get_rate_plan_charge_columns.sql", "original_file_path": "macros/get_rate_plan_charge_columns.sql", "unique_id": "macro.zuora_source.get_rate_plan_charge_columns", "macro_sql": "{% macro get_rate_plan_charge_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"account_receivable_accounting_code_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"accounting_code\", \"datatype\": dbt.type_string()},\n    {\"name\": \"amended_by_order_on\", \"datatype\": \"date\"},\n    {\"name\": \"amendment_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"apply_discount_to\", \"datatype\": dbt.type_string()},\n    {\"name\": \"bill_cycle_day\", \"datatype\": dbt.type_int()},\n    {\"name\": \"bill_cycle_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"bill_to_contact_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"bill_to_contact_snapshot_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"billing_period\", \"datatype\": dbt.type_string()}, \n    {\"name\": \"billing_timing\", \"datatype\": dbt.type_string()},\n    {\"name\": \"booking_exchange_rate\", \"datatype\": dbt.type_float()},\n    {\"name\": \"booking_exchange_rate_date\", \"datatype\": \"date\"}, \n    {\"name\": \"charge_model\", \"datatype\": dbt.type_string()},\n    {\"name\": \"charge_number\", \"datatype\": dbt.type_string()},\n    {\"name\": \"charge_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"charged_through_date\", \"datatype\": \"date\"},\n    {\"name\": \"created_by_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"credit_option\", \"datatype\": dbt.type_string()},\n    {\"name\": \"default_payment_method_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"deferred_revenue_accounting_code_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"description\", \"datatype\": dbt.type_string()},\n    {\"name\": \"discount_level\", \"datatype\": dbt.type_string()},\n    {\"name\": \"dmrc\", \"datatype\": dbt.type_float()}, \n    {\"name\": \"dmrchome_currency\", \"datatype\": dbt.type_float()}, \n    {\"name\": \"dtcv\", \"datatype\": dbt.type_float()}, \n    {\"name\": \"dtcvhome_currency\", \"datatype\": dbt.type_float()},\n    {\"name\": \"effective_end_date\", \"datatype\": \"date\"},\n    {\"name\": \"effective_start_date\", \"datatype\": \"date\"},\n    {\"name\": \"end_date_condition\", \"datatype\": dbt.type_string()},\n    {\"name\": \"exchange_rate\", \"datatype\": dbt.type_float()},\n    {\"name\": \"exchange_rate_date\", \"datatype\": \"date\"},\n    {\"name\": \"home_currency\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"invoice_owner_id\", \"datatype\": dbt.type_string()}, \n    {\"name\": \"is_prepaid\", \"datatype\": \"boolean\"},\n    {\"name\": \"is_processed\", \"datatype\": \"boolean\"}, \n    {\"name\": \"mrr\", \"datatype\": dbt.type_float()},\n    {\"name\": \"mrrhome_currency\", \"datatype\": dbt.type_float()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"number_of_periods\", \"datatype\": dbt.type_int()},\n    {\"name\": \"original_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"original_order_date\", \"datatype\": \"date\"},\n    {\"name\": \"price_change_option\", \"datatype\": dbt.type_string()},\n    {\"name\": \"price_increase_percentage\", \"datatype\": dbt.type_float()},\n    {\"name\": \"processed_through_date\", \"datatype\": \"date\"},\n    {\"name\": \"product_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"product_rate_plan_charge_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"product_rate_plan_id\", \"datatype\": dbt.type_string()}, \n    {\"name\": \"quantity\", \"datatype\": dbt.type_float()},\n    {\"name\": \"rate_plan_id\", \"datatype\": dbt.type_string()}, \n    {\"name\": \"recognized_revenue_accounting_code_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"segment\", \"datatype\": dbt.type_int()},\n    {\"name\": \"sold_to_contact_id\", \"datatype\": dbt.type_string()}, \n    {\"name\": \"specific_billing_period\", \"datatype\": dbt.type_int()},\n    {\"name\": \"specific_end_date\", \"datatype\": \"date\"},\n    {\"name\": \"specific_list_price_base\", \"datatype\": dbt.type_int()},\n    {\"name\": \"subscription_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"subscription_owner_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"tcv\", \"datatype\": dbt.type_float()}, \n    {\"name\": \"tcvhome_currency\", \"datatype\": dbt.type_float()},\n    {\"name\": \"transaction_currency\", \"datatype\": dbt.type_string()},\n    {\"name\": \"trigger_date\", \"datatype\": \"date\"},\n    {\"name\": \"trigger_event\", \"datatype\": dbt.type_string()},\n    {\"name\": \"uom\", \"datatype\": dbt.type_string()},\n    {\"name\": \"up_to_periods\", \"datatype\": dbt.type_int()},\n    {\"name\": \"up_to_periods_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_by_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_date\", \"datatype\": dbt.type_timestamp()}, \n    {\"name\": \"version\", \"datatype\": dbt.type_int()},\n    {\"name\": \"weekly_bill_cycle_day\", \"datatype\": dbt.type_string()}\n] %}\n\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('zuora_rate_plan_charge_pass_through_columns')) }}  \n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_int", "macro.dbt.type_float", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.32554, "supported_languages": null}, "macro.zuora_source.get_subscription_columns": {"name": "get_subscription_columns", "resource_type": "macro", "package_name": "zuora_source", "path": "macros/get_subscription_columns.sql", "original_file_path": "macros/get_subscription_columns.sql", "unique_id": "macro.zuora_source.get_subscription_columns", "macro_sql": "{% macro get_subscription_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"auto_renew\", \"datatype\": \"boolean\"},\n    {\"name\": \"bill_to_contact_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"cancel_reason\", \"datatype\": dbt.type_string()},\n    {\"name\": \"cancelled_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"contract_acceptance_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"contract_effective_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"created_by_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"current_term\", \"datatype\": dbt.type_int()},\n    {\"name\": \"current_term_period_type\", \"datatype\": dbt.type_string()}, \n    {\"name\": \"default_payment_method_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"externally_managed_by\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"initial_term\", \"datatype\": dbt.type_int()},\n    {\"name\": \"initial_term_period_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"invoice_owner_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"is_invoice_separate\", \"datatype\": \"boolean\"},\n    {\"name\": \"is_latest_version\", \"datatype\": \"boolean\"},\n    {\"name\": \"last_booking_date\", \"datatype\": \"date\"},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"notes\", \"datatype\": dbt.type_string()},\n    {\"name\": \"original_created_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"original_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"parent_account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"payment_term\", \"datatype\": dbt.type_string()},\n    {\"name\": \"previous_subscription_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"renewal_setting\", \"datatype\": dbt.type_string()},\n    {\"name\": \"renewal_term\", \"datatype\": dbt.type_int()},\n    {\"name\": \"renewal_term_period_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"revision\", \"datatype\": dbt.type_string()},\n    {\"name\": \"service_activation_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"sold_to_contact_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"status\", \"datatype\": dbt.type_string()},\n    {\"name\": \"subscription_end_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"subscription_start_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"term_end_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"term_start_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"term_type\", \"datatype\": dbt.type_string()}, \n    {\"name\": \"updated_by_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"version\", \"datatype\": dbt.type_int()}\n] %}\n\n{{ fivetran_utils.add_pass_through_columns(columns, var('zuora_subscription_pass_through_columns')) }}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_int", "macro.fivetran_utils.add_pass_through_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.3309288, "supported_languages": null}, "macro.zuora_source.get_product_rate_plan_columns": {"name": "get_product_rate_plan_columns", "resource_type": "macro", "package_name": "zuora_source", "path": "macros/get_product_rate_plan_columns.sql", "original_file_path": "macros/get_product_rate_plan_columns.sql", "unique_id": "macro.zuora_source.get_product_rate_plan_columns", "macro_sql": "{% macro get_product_rate_plan_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"created_by_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"description\", \"datatype\": dbt.type_string()},\n    {\"name\": \"effective_end_date\", \"datatype\": \"date\"},\n    {\"name\": \"effective_start_date\", \"datatype\": \"date\"}, \n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"product_id\", \"datatype\": dbt.type_string()}, \n    {\"name\": \"updated_by_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_date\", \"datatype\": dbt.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.3322299, "supported_languages": null}, "macro.zuora_source.get_taxation_item_columns": {"name": "get_taxation_item_columns", "resource_type": "macro", "package_name": "zuora_source", "path": "macros/get_taxation_item_columns.sql", "original_file_path": "macros/get_taxation_item_columns.sql", "unique_id": "macro.zuora_source.get_taxation_item_columns", "macro_sql": "{% macro get_taxation_item_columns() %}\n\n{% set columns = [\n    {\"name\": \"_fivetran_synced\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"account_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"account_receivable_accounting_code_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"accounting_code\", \"datatype\": dbt.type_string()}, \n    {\"name\": \"amendment_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"balance\", \"datatype\": dbt.type_float()},\n    {\"name\": \"bill_to_contact_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_by_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"created_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"credit_amount\", \"datatype\": dbt.type_float()}, \n    {\"name\": \"exchange_rate\", \"datatype\": dbt.type_float()},\n    {\"name\": \"exchange_rate_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"exempt_amount\", \"datatype\": dbt.type_float()}, \n    {\"name\": \"exempt_amount_home_currency\", \"datatype\": dbt.type_int()}, \n    {\"name\": \"home_currency\", \"datatype\": dbt.type_string()},\n    {\"name\": \"id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"invoice_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"invoice_item_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"journal_entry_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"journal_run_id\", \"datatype\": dbt.type_string()}, \n    {\"name\": \"name\", \"datatype\": dbt.type_string()},\n    {\"name\": \"payment_amount\", \"datatype\": dbt.type_float()},\n    {\"name\": \"product_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"product_rate_plan_charge_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"product_rate_plan_id\", \"datatype\": dbt.type_string()}, \n    {\"name\": \"rate_plan_charge_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"rate_plan_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sales_tax_payable_accounting_code_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"seller_registration\", \"datatype\": dbt.type_string()},\n    {\"name\": \"sold_to_contact_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"subscription_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"tax_amount\", \"datatype\": dbt.type_float()}, \n    {\"name\": \"tax_amount_home_currency\", \"datatype\": dbt.type_float()}, \n    {\"name\": \"tax_date\", \"datatype\": dbt.type_timestamp()},\n    {\"name\": \"tax_description\", \"datatype\": dbt.type_string()},\n    {\"name\": \"tax_mode\", \"datatype\": dbt.type_string()},\n    {\"name\": \"tax_rate\", \"datatype\": dbt.type_float()},\n    {\"name\": \"tax_rate_description\", \"datatype\": dbt.type_string()},\n    {\"name\": \"tax_rate_type\", \"datatype\": dbt.type_string()},\n    {\"name\": \"tax_rule_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"transaction_currency\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_by_id\", \"datatype\": dbt.type_string()},\n    {\"name\": \"updated_date\", \"datatype\": dbt.type_timestamp()}\n] %}\n\n{{ return(columns) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.type_string", "macro.dbt.type_float", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1682531375.337562, "supported_languages": null}}, "docs": {"doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}, "doc.zuora_source.account_table": {"name": "account_table", "resource_type": "doc", "package_name": "zuora_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.zuora_source.account_table", "block_contents": "An account is a customer account that collects all of the critical information about the customer, such as contact information, payment terms, and payment methods."}, "doc.zuora_source.accounting_code_table": {"name": "accounting_code_table", "resource_type": "doc", "package_name": "zuora_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.zuora_source.accounting_code_table", "block_contents": "Grabs accounting values to help aggregate Zuora transaction data."}, "doc.zuora_source.amendment_table": {"name": "amendment_table", "resource_type": "doc", "package_name": "zuora_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.zuora_source.amendment_table", "block_contents": "When a customer needs to make a change to a subscription, you make that change through an amendment. Common subscription changes include 'Changing the terms and conditions of a contract; add a product or update an existing product to a subscription; renew, cancel, suspend or resume a subscription.'"}, "doc.zuora_source.contact_table": {"name": "contact_table", "resource_type": "doc", "package_name": "zuora_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.zuora_source.contact_table", "block_contents": "Customer who holds an account or who is otherwise a person to contact about an account."}, "doc.zuora_source.credit_balance_adjustment_table": {"name": "credit_balance_adjustment_table", "resource_type": "doc", "package_name": "zuora_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.zuora_source.credit_balance_adjustment_table", "block_contents": "An adjustment to change a customer's credit balance.  Applies adjustments to credit balances on billing accounts. This includes applying credit balance to invoices and transferring an invoice to a credit balance."}, "doc.zuora_source.invoice_table": {"name": "invoice_table", "resource_type": "doc", "package_name": "zuora_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.zuora_source.invoice_table", "block_contents": "An invoice represents a bill to a customer, providing information about customers' accounts for invoices, including dates, status, and amounts. It is created at the account level, and can include all of the charges for multiple subscriptions for an account."}, "doc.zuora_source.invoice_item_table": {"name": "invoice_item_table", "resource_type": "doc", "package_name": "zuora_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.zuora_source.invoice_item_table", "block_contents": "An invoice item is an individual line item in an invoice. Invoice items are charges, such as a monthly recurring charge."}, "doc.zuora_source.journal_entry_table": {"name": "journal_entry_table", "resource_type": "doc", "package_name": "zuora_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.zuora_source.journal_entry_table", "block_contents": "A journal entry in Zuora is a summary of all Zuora transactions, such as account receivables, credit balance adjustment, and revenue."}, "doc.zuora_source.journal_entry_item_table": {"name": "journal_entry_item_table", "resource_type": "doc", "package_name": "zuora_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.zuora_source.journal_entry_item_table", "block_contents": "Table containing individual line items of a transaction associated with a journal entry."}, "doc.zuora_source.order_table": {"name": "order_table", "resource_type": "doc", "package_name": "zuora_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.zuora_source.order_table", "block_contents": "Orders are contractual agreements between merchants and customers. You can create multiple subscriptions and subscription amendments at once in a single order. All the operations on subscriptions in orders are done by order actions."}, "doc.zuora_source.order_item_table": {"name": "order_item_table", "resource_type": "doc", "package_name": "zuora_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.zuora_source.order_item_table", "block_contents": "An order item is a sales item within an order in the context of the recurring subscription business model. It can be a unit of products or service, but defined by both quantity and term (the start and end dates)."}, "doc.zuora_source.payment_table": {"name": "payment_table", "resource_type": "doc", "package_name": "zuora_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.zuora_source.payment_table", "block_contents": "A payment is the money that customers send to pay for invoices related to their subscriptions"}, "doc.zuora_source.payment_method_table": {"name": "payment_method_table", "resource_type": "doc", "package_name": "zuora_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.zuora_source.payment_method_table", "block_contents": "Payment methods are the ways in which customers pay for their subscriptions. Your customers can choose a payment method from your company's list of preferred payment methods."}, "doc.zuora_source.product_table": {"name": "product_table", "resource_type": "doc", "package_name": "zuora_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.zuora_source.product_table", "block_contents": "A product is an item or service that your company sells. In the subscription economy, a product is generally a service that your customers subscribe to rather than a physical item that they purchase one time."}, "doc.zuora_source.product_rate_plan_table": {"name": "product_rate_plan_table", "resource_type": "doc", "package_name": "zuora_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.zuora_source.product_rate_plan_table", "block_contents": "A product rate plan is the part of a product that your customers subscribe to. Each product can have multiple product rate plans, and each product rate plan can have multiple product rate plan charges, which are fees for products and their product rate plans."}, "doc.zuora_source.product_rate_plan_charge_table": {"name": "product_rate_plan_charge_table", "resource_type": "doc", "package_name": "zuora_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.zuora_source.product_rate_plan_charge_table", "block_contents": "A product rate plan charge represents a charge model or a set of fees associated with a product rate plan, which is the part of a product that your customers subscribe to. Each product rate plan can have multiple product rate plan charges."}, "doc.zuora_source.rate_plan_table": {"name": "rate_plan_table", "resource_type": "doc", "package_name": "zuora_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.zuora_source.rate_plan_table", "block_contents": "A rate plan is part of a subscription or an amendment to a subscription, and it comes from a product rate plan.  Rate plans represent a price or a collection of prices for a service you sell. An individual rate plan contains all charges specific to a particular subscription."}, "doc.zuora_source.rate_plan_charge_table": {"name": "rate_plan_charge_table", "resource_type": "doc", "package_name": "zuora_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.zuora_source.rate_plan_charge_table", "block_contents": "A rate plan charge is part of a subscription or an amendment to a subscription, and it comes from a product rate plan charge. Rate plan charges represent the actual charges for the rate plans or services that you sell."}, "doc.zuora_source.refund_table": {"name": "refund_table", "resource_type": "doc", "package_name": "zuora_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.zuora_source.refund_table", "block_contents": "A refund returns money to a customer - as opposed to a credit, which creates a customer credit balance that may be applied to reduce the amount owed to you. Electronic refunds are processed by Zuora via a payment gateway.\nExternal refunds indicate that the refund was processed outside of Zuora, say by a check, and the transaction must be recorded."}, "doc.zuora_source.refund_invoice_payment_table": {"name": "refund_invoice_payment_table", "resource_type": "doc", "package_name": "zuora_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.zuora_source.refund_invoice_payment_table", "block_contents": "This table exports information on refunds attributed to invoice payments."}, "doc.zuora_source.subscription_table": {"name": "subscription_table", "resource_type": "doc", "package_name": "zuora_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.zuora_source.subscription_table", "block_contents": "A subscription is a product or service that has recurring charges, such as a monthly flat fee or charges based on usage. Subscriptions can also include one-time charges, such as activation fees. Every subscription must be associated with an account. At least one active account must exist before any subscriptions can be created."}, "doc.zuora_source.taxation_item_table": {"name": "taxation_item_table", "resource_type": "doc", "package_name": "zuora_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.zuora_source.taxation_item_table", "block_contents": "Used to add a tax amount to an invoice item. Changes that you make with this object affect the product charges in your product catalog, but not the charges in existing subscriptions. To change taxes in existing subscriptions, you need to amend the subscription - remove the existing charge and replace it with the modified charge."}, "doc.zuora_source.account_id": {"name": "account_id", "resource_type": "doc", "package_name": "zuora_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.zuora_source.account_id", "block_contents": ""}, "doc.zuora_source.bill_to_contact_id": {"name": "bill_to_contact_id", "resource_type": "doc", "package_name": "zuora_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.zuora_source.bill_to_contact_id", "block_contents": "Person that you would like to bill or send the invoice to."}, "doc.zuora_source.contact_id": {"name": "contact_id", "resource_type": "doc", "package_name": "zuora_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.zuora_source.contact_id", "block_contents": ""}, "doc.zuora_source.currency": {"name": "currency", "resource_type": "doc", "package_name": "zuora_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.zuora_source.currency", "block_contents": "Currency the customer is billed in."}, "doc.zuora_source.created_date": {"name": "created_date", "resource_type": "doc", "package_name": "zuora_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.zuora_source.created_date", "block_contents": "Creation date for"}, "doc.zuora_source.created_by_id": {"name": "created_by_id", "resource_type": "doc", "package_name": "zuora_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.zuora_source.created_by_id", "block_contents": "Identifier of the user who created"}, "doc.zuora_source.default_payment_method_id": {"name": "default_payment_method_id", "resource_type": "doc", "package_name": "zuora_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.zuora_source.default_payment_method_id", "block_contents": "Identifier of the default payment method for the account."}, "doc.zuora_source._fivetran_synced": {"name": "_fivetran_synced", "resource_type": "doc", "package_name": "zuora_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.zuora_source._fivetran_synced", "block_contents": "Timestamp of when a record was last synced."}, "doc.zuora_source.home_currency": {"name": "home_currency", "resource_type": "doc", "package_name": "zuora_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.zuora_source.home_currency", "block_contents": "Home currency the customer is billed in."}, "doc.zuora_source.id": {"name": "id", "resource_type": "doc", "package_name": "zuora_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.zuora_source.id", "block_contents": "The unique identifier of the"}, "doc.zuora_source.is_most_recent_record": {"name": "is_most_recent_record", "resource_type": "doc", "package_name": "zuora_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.zuora_source.is_most_recent_record", "block_contents": "Is this the most recent record of"}, "doc.zuora_source.product_id": {"name": "product_id", "resource_type": "doc", "package_name": "zuora_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.zuora_source.product_id", "block_contents": ""}, "doc.zuora_source.sold_to_contact_id": {"name": "sold_to_contact_id", "resource_type": "doc", "package_name": "zuora_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.zuora_source.sold_to_contact_id", "block_contents": "Person that you have sold your product or services to; can be the same as the bill to contact."}, "doc.zuora_source.transaction_currency": {"name": "transaction_currency", "resource_type": "doc", "package_name": "zuora_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.zuora_source.transaction_currency", "block_contents": "Transaction currency the customer is billed in."}, "doc.zuora_source.updated_by_id": {"name": "updated_by_id", "resource_type": "doc", "package_name": "zuora_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.zuora_source.updated_by_id", "block_contents": "Identifier of the user who last updated"}, "doc.zuora_source.updated_date": {"name": "updated_date", "resource_type": "doc", "package_name": "zuora_source", "path": "docs.md", "original_file_path": "models/docs.md", "unique_id": "doc.zuora_source.updated_date", "block_contents": "Last updated date for"}}, "exposures": {}, "metrics": {}, "selectors": {}, "disabled": {}, "parent_map": {"seed.zuora_source_integration_tests.zuora_invoice_item_data": [], "seed.zuora_source_integration_tests.zuora_contact_data": [], "seed.zuora_source_integration_tests.zuora_rate_plan_charge_data": [], "seed.zuora_source_integration_tests.zuora_product_rate_plan_data": [], "seed.zuora_source_integration_tests.zuora_refund_data": [], "seed.zuora_source_integration_tests.zuora_rate_plan_data": [], "seed.zuora_source_integration_tests.zuora_product_data": [], "seed.zuora_source_integration_tests.zuora_account_data": [], "seed.zuora_source_integration_tests.zuora_amendment_data": [], "seed.zuora_source_integration_tests.zuora_taxation_item_data": [], "seed.zuora_source_integration_tests.zuora_payment_method_data": [], "seed.zuora_source_integration_tests.zuora_product_rate_plan_charge_data": [], "seed.zuora_source_integration_tests.zuora_refund_invoice_payment_data": [], "seed.zuora_source_integration_tests.zuora_invoice_payment_data": [], "seed.zuora_source_integration_tests.zuora_subscription_data": [], "seed.zuora_source_integration_tests.zuora_order_data": [], "seed.zuora_source_integration_tests.zuora_payment_data": [], "seed.zuora_source_integration_tests.zuora_invoice_data": [], "seed.zuora_source_integration_tests.zuora_credit_balance_adjustment_data": [], "model.zuora_source.stg_zuora__product": ["model.zuora_source.stg_zuora__product_tmp", "model.zuora_source.stg_zuora__product_tmp"], "model.zuora_source.stg_zuora__product_rate_plan_charge": ["model.zuora_source.stg_zuora__product_rate_plan_charge_tmp", "model.zuora_source.stg_zuora__product_rate_plan_charge_tmp"], "model.zuora_source.stg_zuora__invoice_item": ["model.zuora_source.stg_zuora__invoice_item_tmp", "model.zuora_source.stg_zuora__invoice_item_tmp"], "model.zuora_source.stg_zuora__payment": ["model.zuora_source.stg_zuora__payment_tmp", "model.zuora_source.stg_zuora__payment_tmp"], "model.zuora_source.stg_zuora__contact": ["model.zuora_source.stg_zuora__contact_tmp", "model.zuora_source.stg_zuora__contact_tmp"], "model.zuora_source.stg_zuora__refund": ["model.zuora_source.stg_zuora__refund_tmp", "model.zuora_source.stg_zuora__refund_tmp"], "model.zuora_source.stg_zuora__account": ["model.zuora_source.stg_zuora__account_tmp", "model.zuora_source.stg_zuora__account_tmp"], "model.zuora_source.stg_zuora__taxation_item": ["model.zuora_source.stg_zuora__taxation_item_tmp", "model.zuora_source.stg_zuora__taxation_item_tmp"], "model.zuora_source.stg_zuora__rate_plan": ["model.zuora_source.stg_zuora__rate_plan_tmp", "model.zuora_source.stg_zuora__rate_plan_tmp"], "model.zuora_source.stg_zuora__rate_plan_charge": ["model.zuora_source.stg_zuora__rate_plan_charge_tmp", "model.zuora_source.stg_zuora__rate_plan_charge_tmp"], "model.zuora_source.stg_zuora__invoice": ["model.zuora_source.stg_zuora__invoice_tmp", "model.zuora_source.stg_zuora__invoice_tmp"], "model.zuora_source.stg_zuora__amendment": ["model.zuora_source.stg_zuora__amendment_tmp", "model.zuora_source.stg_zuora__amendment_tmp"], "model.zuora_source.stg_zuora__order": ["model.zuora_source.stg_zuora__order_tmp", "model.zuora_source.stg_zuora__order_tmp"], "model.zuora_source.stg_zuora__subscription": ["model.zuora_source.stg_zuora__subscription_tmp", "model.zuora_source.stg_zuora__subscription_tmp"], "model.zuora_source.stg_zuora__refund_invoice_payment": ["model.zuora_source.stg_zuora__refund_invoice_payment_tmp", "model.zuora_source.stg_zuora__refund_invoice_payment_tmp"], "model.zuora_source.stg_zuora__payment_method": ["model.zuora_source.stg_zuora__payment_method_tmp", "model.zuora_source.stg_zuora__payment_method_tmp"], "model.zuora_source.stg_zuora__credit_balance_adjustment": ["model.zuora_source.stg_zuora__credit_balance_adjustment_tmp", "model.zuora_source.stg_zuora__credit_balance_adjustment_tmp"], "model.zuora_source.stg_zuora__invoice_payment": ["model.zuora_source.stg_zuora__invoice_payment_tmp", "model.zuora_source.stg_zuora__invoice_payment_tmp"], "model.zuora_source.stg_zuora__product_rate_plan": ["model.zuora_source.stg_zuora__product_rate_plan_tmp", "model.zuora_source.stg_zuora__product_rate_plan_tmp"], "model.zuora_source.stg_zuora__payment_method_tmp": ["source.zuora_source.zuora.payment_method"], "model.zuora_source.stg_zuora__invoice_tmp": ["source.zuora_source.zuora.invoice"], "model.zuora_source.stg_zuora__rate_plan_charge_tmp": ["source.zuora_source.zuora.rate_plan_charge"], "model.zuora_source.stg_zuora__invoice_item_tmp": ["source.zuora_source.zuora.invoice_item"], "model.zuora_source.stg_zuora__contact_tmp": ["source.zuora_source.zuora.contact"], "model.zuora_source.stg_zuora__rate_plan_tmp": ["source.zuora_source.zuora.rate_plan"], "model.zuora_source.stg_zuora__refund_tmp": ["source.zuora_source.zuora.refund"], "model.zuora_source.stg_zuora__account_tmp": ["source.zuora_source.zuora.account"], "model.zuora_source.stg_zuora__product_rate_plan_tmp": ["source.zuora_source.zuora.product_rate_plan"], "model.zuora_source.stg_zuora__credit_balance_adjustment_tmp": ["source.zuora_source.zuora.credit_balance_adjustment"], "model.zuora_source.stg_zuora__taxation_item_tmp": ["source.zuora_source.zuora.taxation_item"], "model.zuora_source.stg_zuora__subscription_tmp": ["source.zuora_source.zuora.subscription"], "model.zuora_source.stg_zuora__product_tmp": ["source.zuora_source.zuora.product"], "model.zuora_source.stg_zuora__order_tmp": ["source.zuora_source.zuora.order"], "model.zuora_source.stg_zuora__amendment_tmp": ["source.zuora_source.zuora.amendment"], "model.zuora_source.stg_zuora__invoice_payment_tmp": ["source.zuora_source.zuora.invoice_payment"], "model.zuora_source.stg_zuora__product_rate_plan_charge_tmp": ["source.zuora_source.zuora.product_rate_plan_charge"], "model.zuora_source.stg_zuora__refund_invoice_payment_tmp": ["source.zuora_source.zuora.refund_invoice_payment"], "model.zuora_source.stg_zuora__payment_tmp": ["source.zuora_source.zuora.payment"], "test.zuora_source.unique_stg_zuora__account_account_id.48b1eab20d": ["model.zuora_source.stg_zuora__account"], "test.zuora_source.not_null_stg_zuora__account_account_id.fbbdb7cb1f": ["model.zuora_source.stg_zuora__account"], "test.zuora_source.unique_stg_zuora__amendment_amendment_id.1adf35b9b3": ["model.zuora_source.stg_zuora__amendment"], "test.zuora_source.not_null_stg_zuora__amendment_amendment_id.d5dfc9f72e": ["model.zuora_source.stg_zuora__amendment"], "test.zuora_source.unique_stg_zuora__contact_contact_id.55e4bbceda": ["model.zuora_source.stg_zuora__contact"], "test.zuora_source.not_null_stg_zuora__contact_contact_id.825f7a5ab6": ["model.zuora_source.stg_zuora__contact"], "test.zuora_source.unique_stg_zuora__credit_balance_adjustment_credit_balance_adjustment_id.48dcd90757": ["model.zuora_source.stg_zuora__credit_balance_adjustment"], "test.zuora_source.not_null_stg_zuora__credit_balance_adjustment_credit_balance_adjustment_id.b7d154ddd5": ["model.zuora_source.stg_zuora__credit_balance_adjustment"], "test.zuora_source.unique_stg_zuora__invoice_invoice_id.bce76b88e8": ["model.zuora_source.stg_zuora__invoice"], "test.zuora_source.not_null_stg_zuora__invoice_invoice_id.2461bd7df7": ["model.zuora_source.stg_zuora__invoice"], "test.zuora_source.unique_stg_zuora__invoice_item_invoice_item_id.c04fd09b46": ["model.zuora_source.stg_zuora__invoice_item"], "test.zuora_source.not_null_stg_zuora__invoice_item_invoice_item_id.c9ce75552a": ["model.zuora_source.stg_zuora__invoice_item"], "test.zuora_source.unique_stg_zuora__order_order_id.2506b4224d": ["model.zuora_source.stg_zuora__order"], "test.zuora_source.not_null_stg_zuora__order_order_id.3e57f63e6b": ["model.zuora_source.stg_zuora__order"], "test.zuora_source.unique_stg_zuora__payment_payment_id.104a07cd8c": ["model.zuora_source.stg_zuora__payment"], "test.zuora_source.not_null_stg_zuora__payment_payment_id.21d5bbc205": ["model.zuora_source.stg_zuora__payment"], "test.zuora_source.unique_stg_zuora__payment_method_payment_method_id.f4d0192fe3": ["model.zuora_source.stg_zuora__payment_method"], "test.zuora_source.not_null_stg_zuora__payment_method_payment_method_id.757f1baba1": ["model.zuora_source.stg_zuora__payment_method"], "test.zuora_source.unique_stg_zuora__product_product_id.aff0a8698c": ["model.zuora_source.stg_zuora__product"], "test.zuora_source.not_null_stg_zuora__product_product_id.08d94a982a": ["model.zuora_source.stg_zuora__product"], "test.zuora_source.unique_stg_zuora__product_rate_plan_product_rate_plan_id.5172fe6de3": ["model.zuora_source.stg_zuora__product_rate_plan"], "test.zuora_source.not_null_stg_zuora__product_rate_plan_product_rate_plan_id.17b42ef97f": ["model.zuora_source.stg_zuora__product_rate_plan"], "test.zuora_source.unique_stg_zuora__product_rate_plan_charge_product_rate_plan_charge_id.3fba29feec": ["model.zuora_source.stg_zuora__product_rate_plan_charge"], "test.zuora_source.not_null_stg_zuora__product_rate_plan_charge_product_rate_plan_charge_id.ee9a534d30": ["model.zuora_source.stg_zuora__product_rate_plan_charge"], "test.zuora_source.unique_stg_zuora__rate_plan_rate_plan_id.09741de08d": ["model.zuora_source.stg_zuora__rate_plan"], "test.zuora_source.not_null_stg_zuora__rate_plan_rate_plan_id.0a3262a4ac": ["model.zuora_source.stg_zuora__rate_plan"], "test.zuora_source.unique_stg_zuora__rate_plan_charge_rate_plan_charge_id.968ebd8116": ["model.zuora_source.stg_zuora__rate_plan_charge"], "test.zuora_source.not_null_stg_zuora__rate_plan_charge_rate_plan_charge_id.4f37fe0feb": ["model.zuora_source.stg_zuora__rate_plan_charge"], "test.zuora_source.unique_stg_zuora__refund_refund_id.01e977f065": ["model.zuora_source.stg_zuora__refund"], "test.zuora_source.unique_stg_zuora__subscription_subscription_id.219bd2fe86": ["model.zuora_source.stg_zuora__subscription"], "test.zuora_source.not_null_stg_zuora__subscription_subscription_id.be7f23f7d2": ["model.zuora_source.stg_zuora__subscription"], "test.zuora_source.unique_stg_zuora__taxation_item_taxation_item_id.2762673f7d": ["model.zuora_source.stg_zuora__taxation_item"], "test.zuora_source.not_null_stg_zuora__taxation_item_taxation_item_id.8f5f59eabf": ["model.zuora_source.stg_zuora__taxation_item"], "source.zuora_source.zuora.account": [], "source.zuora_source.zuora.amendment": [], "source.zuora_source.zuora.contact": [], "source.zuora_source.zuora.credit_balance_adjustment": [], "source.zuora_source.zuora.invoice": [], "source.zuora_source.zuora.invoice_item": [], "source.zuora_source.zuora.invoice_payment": [], "source.zuora_source.zuora.order": [], "source.zuora_source.zuora.payment": [], "source.zuora_source.zuora.payment_method": [], "source.zuora_source.zuora.product": [], "source.zuora_source.zuora.product_rate_plan": [], "source.zuora_source.zuora.product_rate_plan_charge": [], "source.zuora_source.zuora.rate_plan": [], "source.zuora_source.zuora.rate_plan_charge": [], "source.zuora_source.zuora.refund": [], "source.zuora_source.zuora.refund_invoice_payment": [], "source.zuora_source.zuora.subscription": [], "source.zuora_source.zuora.taxation_item": []}, "child_map": {"seed.zuora_source_integration_tests.zuora_invoice_item_data": [], "seed.zuora_source_integration_tests.zuora_contact_data": [], "seed.zuora_source_integration_tests.zuora_rate_plan_charge_data": [], "seed.zuora_source_integration_tests.zuora_product_rate_plan_data": [], "seed.zuora_source_integration_tests.zuora_refund_data": [], "seed.zuora_source_integration_tests.zuora_rate_plan_data": [], "seed.zuora_source_integration_tests.zuora_product_data": [], "seed.zuora_source_integration_tests.zuora_account_data": [], "seed.zuora_source_integration_tests.zuora_amendment_data": [], "seed.zuora_source_integration_tests.zuora_taxation_item_data": [], "seed.zuora_source_integration_tests.zuora_payment_method_data": [], "seed.zuora_source_integration_tests.zuora_product_rate_plan_charge_data": [], "seed.zuora_source_integration_tests.zuora_refund_invoice_payment_data": [], "seed.zuora_source_integration_tests.zuora_invoice_payment_data": [], "seed.zuora_source_integration_tests.zuora_subscription_data": [], "seed.zuora_source_integration_tests.zuora_order_data": [], "seed.zuora_source_integration_tests.zuora_payment_data": [], "seed.zuora_source_integration_tests.zuora_invoice_data": [], "seed.zuora_source_integration_tests.zuora_credit_balance_adjustment_data": [], "model.zuora_source.stg_zuora__product": ["test.zuora_source.not_null_stg_zuora__product_product_id.08d94a982a", "test.zuora_source.unique_stg_zuora__product_product_id.aff0a8698c"], "model.zuora_source.stg_zuora__product_rate_plan_charge": ["test.zuora_source.not_null_stg_zuora__product_rate_plan_charge_product_rate_plan_charge_id.ee9a534d30", "test.zuora_source.unique_stg_zuora__product_rate_plan_charge_product_rate_plan_charge_id.3fba29feec"], "model.zuora_source.stg_zuora__invoice_item": ["test.zuora_source.not_null_stg_zuora__invoice_item_invoice_item_id.c9ce75552a", "test.zuora_source.unique_stg_zuora__invoice_item_invoice_item_id.c04fd09b46"], "model.zuora_source.stg_zuora__payment": ["test.zuora_source.not_null_stg_zuora__payment_payment_id.21d5bbc205", "test.zuora_source.unique_stg_zuora__payment_payment_id.104a07cd8c"], "model.zuora_source.stg_zuora__contact": ["test.zuora_source.not_null_stg_zuora__contact_contact_id.825f7a5ab6", "test.zuora_source.unique_stg_zuora__contact_contact_id.55e4bbceda"], "model.zuora_source.stg_zuora__refund": ["test.zuora_source.unique_stg_zuora__refund_refund_id.01e977f065"], "model.zuora_source.stg_zuora__account": ["test.zuora_source.not_null_stg_zuora__account_account_id.fbbdb7cb1f", "test.zuora_source.unique_stg_zuora__account_account_id.48b1eab20d"], "model.zuora_source.stg_zuora__taxation_item": ["test.zuora_source.not_null_stg_zuora__taxation_item_taxation_item_id.8f5f59eabf", "test.zuora_source.unique_stg_zuora__taxation_item_taxation_item_id.2762673f7d"], "model.zuora_source.stg_zuora__rate_plan": ["test.zuora_source.not_null_stg_zuora__rate_plan_rate_plan_id.0a3262a4ac", "test.zuora_source.unique_stg_zuora__rate_plan_rate_plan_id.09741de08d"], "model.zuora_source.stg_zuora__rate_plan_charge": ["test.zuora_source.not_null_stg_zuora__rate_plan_charge_rate_plan_charge_id.4f37fe0feb", "test.zuora_source.unique_stg_zuora__rate_plan_charge_rate_plan_charge_id.968ebd8116"], "model.zuora_source.stg_zuora__invoice": ["test.zuora_source.not_null_stg_zuora__invoice_invoice_id.2461bd7df7", "test.zuora_source.unique_stg_zuora__invoice_invoice_id.bce76b88e8"], "model.zuora_source.stg_zuora__amendment": ["test.zuora_source.not_null_stg_zuora__amendment_amendment_id.d5dfc9f72e", "test.zuora_source.unique_stg_zuora__amendment_amendment_id.1adf35b9b3"], "model.zuora_source.stg_zuora__order": ["test.zuora_source.not_null_stg_zuora__order_order_id.3e57f63e6b", "test.zuora_source.unique_stg_zuora__order_order_id.2506b4224d"], "model.zuora_source.stg_zuora__subscription": ["test.zuora_source.not_null_stg_zuora__subscription_subscription_id.be7f23f7d2", "test.zuora_source.unique_stg_zuora__subscription_subscription_id.219bd2fe86"], "model.zuora_source.stg_zuora__refund_invoice_payment": [], "model.zuora_source.stg_zuora__payment_method": ["test.zuora_source.not_null_stg_zuora__payment_method_payment_method_id.757f1baba1", "test.zuora_source.unique_stg_zuora__payment_method_payment_method_id.f4d0192fe3"], "model.zuora_source.stg_zuora__credit_balance_adjustment": ["test.zuora_source.not_null_stg_zuora__credit_balance_adjustment_credit_balance_adjustment_id.b7d154ddd5", "test.zuora_source.unique_stg_zuora__credit_balance_adjustment_credit_balance_adjustment_id.48dcd90757"], "model.zuora_source.stg_zuora__invoice_payment": [], "model.zuora_source.stg_zuora__product_rate_plan": ["test.zuora_source.not_null_stg_zuora__product_rate_plan_product_rate_plan_id.17b42ef97f", "test.zuora_source.unique_stg_zuora__product_rate_plan_product_rate_plan_id.5172fe6de3"], "model.zuora_source.stg_zuora__payment_method_tmp": ["model.zuora_source.stg_zuora__payment_method", "model.zuora_source.stg_zuora__payment_method"], "model.zuora_source.stg_zuora__invoice_tmp": ["model.zuora_source.stg_zuora__invoice", "model.zuora_source.stg_zuora__invoice"], "model.zuora_source.stg_zuora__rate_plan_charge_tmp": ["model.zuora_source.stg_zuora__rate_plan_charge", "model.zuora_source.stg_zuora__rate_plan_charge"], "model.zuora_source.stg_zuora__invoice_item_tmp": ["model.zuora_source.stg_zuora__invoice_item", "model.zuora_source.stg_zuora__invoice_item"], "model.zuora_source.stg_zuora__contact_tmp": ["model.zuora_source.stg_zuora__contact", "model.zuora_source.stg_zuora__contact"], "model.zuora_source.stg_zuora__rate_plan_tmp": ["model.zuora_source.stg_zuora__rate_plan", "model.zuora_source.stg_zuora__rate_plan"], "model.zuora_source.stg_zuora__refund_tmp": ["model.zuora_source.stg_zuora__refund", "model.zuora_source.stg_zuora__refund"], "model.zuora_source.stg_zuora__account_tmp": ["model.zuora_source.stg_zuora__account", "model.zuora_source.stg_zuora__account"], "model.zuora_source.stg_zuora__product_rate_plan_tmp": ["model.zuora_source.stg_zuora__product_rate_plan", "model.zuora_source.stg_zuora__product_rate_plan"], "model.zuora_source.stg_zuora__credit_balance_adjustment_tmp": ["model.zuora_source.stg_zuora__credit_balance_adjustment", "model.zuora_source.stg_zuora__credit_balance_adjustment"], "model.zuora_source.stg_zuora__taxation_item_tmp": ["model.zuora_source.stg_zuora__taxation_item", "model.zuora_source.stg_zuora__taxation_item"], "model.zuora_source.stg_zuora__subscription_tmp": ["model.zuora_source.stg_zuora__subscription", "model.zuora_source.stg_zuora__subscription"], "model.zuora_source.stg_zuora__product_tmp": ["model.zuora_source.stg_zuora__product", "model.zuora_source.stg_zuora__product"], "model.zuora_source.stg_zuora__order_tmp": ["model.zuora_source.stg_zuora__order", "model.zuora_source.stg_zuora__order"], "model.zuora_source.stg_zuora__amendment_tmp": ["model.zuora_source.stg_zuora__amendment", "model.zuora_source.stg_zuora__amendment"], "model.zuora_source.stg_zuora__invoice_payment_tmp": ["model.zuora_source.stg_zuora__invoice_payment", "model.zuora_source.stg_zuora__invoice_payment"], "model.zuora_source.stg_zuora__product_rate_plan_charge_tmp": ["model.zuora_source.stg_zuora__product_rate_plan_charge", "model.zuora_source.stg_zuora__product_rate_plan_charge"], "model.zuora_source.stg_zuora__refund_invoice_payment_tmp": ["model.zuora_source.stg_zuora__refund_invoice_payment", "model.zuora_source.stg_zuora__refund_invoice_payment"], "model.zuora_source.stg_zuora__payment_tmp": ["model.zuora_source.stg_zuora__payment", "model.zuora_source.stg_zuora__payment"], "test.zuora_source.unique_stg_zuora__account_account_id.48b1eab20d": [], "test.zuora_source.not_null_stg_zuora__account_account_id.fbbdb7cb1f": [], "test.zuora_source.unique_stg_zuora__amendment_amendment_id.1adf35b9b3": [], "test.zuora_source.not_null_stg_zuora__amendment_amendment_id.d5dfc9f72e": [], "test.zuora_source.unique_stg_zuora__contact_contact_id.55e4bbceda": [], "test.zuora_source.not_null_stg_zuora__contact_contact_id.825f7a5ab6": [], "test.zuora_source.unique_stg_zuora__credit_balance_adjustment_credit_balance_adjustment_id.48dcd90757": [], "test.zuora_source.not_null_stg_zuora__credit_balance_adjustment_credit_balance_adjustment_id.b7d154ddd5": [], "test.zuora_source.unique_stg_zuora__invoice_invoice_id.bce76b88e8": [], "test.zuora_source.not_null_stg_zuora__invoice_invoice_id.2461bd7df7": [], "test.zuora_source.unique_stg_zuora__invoice_item_invoice_item_id.c04fd09b46": [], "test.zuora_source.not_null_stg_zuora__invoice_item_invoice_item_id.c9ce75552a": [], "test.zuora_source.unique_stg_zuora__order_order_id.2506b4224d": [], "test.zuora_source.not_null_stg_zuora__order_order_id.3e57f63e6b": [], "test.zuora_source.unique_stg_zuora__payment_payment_id.104a07cd8c": [], "test.zuora_source.not_null_stg_zuora__payment_payment_id.21d5bbc205": [], "test.zuora_source.unique_stg_zuora__payment_method_payment_method_id.f4d0192fe3": [], "test.zuora_source.not_null_stg_zuora__payment_method_payment_method_id.757f1baba1": [], "test.zuora_source.unique_stg_zuora__product_product_id.aff0a8698c": [], "test.zuora_source.not_null_stg_zuora__product_product_id.08d94a982a": [], "test.zuora_source.unique_stg_zuora__product_rate_plan_product_rate_plan_id.5172fe6de3": [], "test.zuora_source.not_null_stg_zuora__product_rate_plan_product_rate_plan_id.17b42ef97f": [], "test.zuora_source.unique_stg_zuora__product_rate_plan_charge_product_rate_plan_charge_id.3fba29feec": [], "test.zuora_source.not_null_stg_zuora__product_rate_plan_charge_product_rate_plan_charge_id.ee9a534d30": [], "test.zuora_source.unique_stg_zuora__rate_plan_rate_plan_id.09741de08d": [], "test.zuora_source.not_null_stg_zuora__rate_plan_rate_plan_id.0a3262a4ac": [], "test.zuora_source.unique_stg_zuora__rate_plan_charge_rate_plan_charge_id.968ebd8116": [], "test.zuora_source.not_null_stg_zuora__rate_plan_charge_rate_plan_charge_id.4f37fe0feb": [], "test.zuora_source.unique_stg_zuora__refund_refund_id.01e977f065": [], "test.zuora_source.unique_stg_zuora__subscription_subscription_id.219bd2fe86": [], "test.zuora_source.not_null_stg_zuora__subscription_subscription_id.be7f23f7d2": [], "test.zuora_source.unique_stg_zuora__taxation_item_taxation_item_id.2762673f7d": [], "test.zuora_source.not_null_stg_zuora__taxation_item_taxation_item_id.8f5f59eabf": [], "source.zuora_source.zuora.account": ["model.zuora_source.stg_zuora__account_tmp"], "source.zuora_source.zuora.amendment": ["model.zuora_source.stg_zuora__amendment_tmp"], "source.zuora_source.zuora.contact": ["model.zuora_source.stg_zuora__contact_tmp"], "source.zuora_source.zuora.credit_balance_adjustment": ["model.zuora_source.stg_zuora__credit_balance_adjustment_tmp"], "source.zuora_source.zuora.invoice": ["model.zuora_source.stg_zuora__invoice_tmp"], "source.zuora_source.zuora.invoice_item": ["model.zuora_source.stg_zuora__invoice_item_tmp"], "source.zuora_source.zuora.invoice_payment": ["model.zuora_source.stg_zuora__invoice_payment_tmp"], "source.zuora_source.zuora.order": ["model.zuora_source.stg_zuora__order_tmp"], "source.zuora_source.zuora.payment": ["model.zuora_source.stg_zuora__payment_tmp"], "source.zuora_source.zuora.payment_method": ["model.zuora_source.stg_zuora__payment_method_tmp"], "source.zuora_source.zuora.product": ["model.zuora_source.stg_zuora__product_tmp"], "source.zuora_source.zuora.product_rate_plan": ["model.zuora_source.stg_zuora__product_rate_plan_tmp"], "source.zuora_source.zuora.product_rate_plan_charge": ["model.zuora_source.stg_zuora__product_rate_plan_charge_tmp"], "source.zuora_source.zuora.rate_plan": ["model.zuora_source.stg_zuora__rate_plan_tmp"], "source.zuora_source.zuora.rate_plan_charge": ["model.zuora_source.stg_zuora__rate_plan_charge_tmp"], "source.zuora_source.zuora.refund": ["model.zuora_source.stg_zuora__refund_tmp"], "source.zuora_source.zuora.refund_invoice_payment": ["model.zuora_source.stg_zuora__refund_invoice_payment_tmp"], "source.zuora_source.zuora.subscription": ["model.zuora_source.stg_zuora__subscription_tmp"], "source.zuora_source.zuora.taxation_item": ["model.zuora_source.stg_zuora__taxation_item_tmp"]}}